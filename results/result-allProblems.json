{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name '`$1`' should start with a lowercase letter",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 27,
        "length": 4,
        "offset": 83,
        "surroundingCode": "    operator fun invoke(pattern: String): RegExp\n    var prototype: RegExp\n    var `$1`: String\n    var `$2`: String\n    var `$3`: String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "PropertyName"
  },
  "hash": "61a2ed6f146f931239e0933a8e3b17180b073932cff2202fd03cfa281a7b048a"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name '`$2`' should start with a lowercase letter",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 28,
        "length": 4,
        "offset": 55,
        "surroundingCode": "    var prototype: RegExp\n    var `$1`: String\n    var `$2`: String\n    var `$3`: String\n    var `$4`: String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "PropertyName"
  },
  "hash": "9cca5bf2fdb36992e55f03ff9d73f632f7371ee8734b5a8b14df1e0da0f56ee3"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name '`$3`' should start with a lowercase letter",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 29,
        "length": 4,
        "offset": 50,
        "surroundingCode": "    var `$1`: String\n    var `$2`: String\n    var `$3`: String\n    var `$4`: String\n    var `$5`: String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "PropertyName"
  },
  "hash": "62cc562f983fdf6f08ff38059ff654ace5c6e8808af92f3d1e1aa3e63a5f0618"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name '`$4`' should start with a lowercase letter",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 30,
        "length": 4,
        "offset": 50,
        "surroundingCode": "    var `$2`: String\n    var `$3`: String\n    var `$4`: String\n    var `$5`: String\n    var `$6`: String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "PropertyName"
  },
  "hash": "bd8c3bf7ff053c18acf1cae22f30e8c4e0344cd8136cf6f96c68005f902ca239"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name '`$5`' should start with a lowercase letter",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 31,
        "length": 4,
        "offset": 50,
        "surroundingCode": "    var `$3`: String\n    var `$4`: String\n    var `$5`: String\n    var `$6`: String\n    var `$7`: String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "PropertyName"
  },
  "hash": "a7b0c4aeda21b1885a58ecc95702ff6aa6a3fc797e038e32773cb29f81f91298"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name '`$6`' should start with a lowercase letter",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 32,
        "length": 4,
        "offset": 50,
        "surroundingCode": "    var `$4`: String\n    var `$5`: String\n    var `$6`: String\n    var `$7`: String\n    var `$8`: String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "PropertyName"
  },
  "hash": "0282d65965af9b24df9e03d051e658cdbacb4da60ad7c5eb24f97c019cc25742"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name '`$7`' should start with a lowercase letter",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 33,
        "length": 4,
        "offset": 50,
        "surroundingCode": "    var `$5`: String\n    var `$6`: String\n    var `$7`: String\n    var `$8`: String\n    var `$9`: String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "PropertyName"
  },
  "hash": "588919e2bc4e9213c2f3ed06d63eb703cd3ed600ba2cfd95c10bdc8aec03019a"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name '`$8`' should start with a lowercase letter",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 34,
        "length": 4,
        "offset": 50,
        "surroundingCode": "    var `$6`: String\n    var `$7`: String\n    var `$8`: String\n    var `$9`: String\n    var lastMatch: String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "PropertyName"
  },
  "hash": "162bf31c4d78b44f5e0eb1134109953080b60136b240f4a5a1f04ccb615bfcdb"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Property naming convention",
  "severity": "Moderate",
  "comment": "Property name '`$9`' should start with a lowercase letter",
  "detailsInfo": "Reports property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nproperty names should start with a lowercase letter and use camel case.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 35,
        "length": 4,
        "offset": 50,
        "surroundingCode": "    var `$7`: String\n    var `$8`: String\n    var `$9`: String\n    var lastMatch: String\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "PropertyName"
  },
  "hash": "723f47fa2396105ffbe8ce860d9218863e8f58d699a57eb49fc9877ec7deb5f5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant lambda arrow",
  "severity": "Moderate",
  "comment": "Redundant lambda arrow",
  "detailsInfo": "Reports redundant lambda arrows in lambdas without parameters.\n\n**Example:**\n\n\n      fun foo(f: () -> Unit) = f()\n\n      fun bar() {\n          foo { -\\> println(\"Hi!\") }\n      }\n\nAfter the quick-fix is applied:\n\n\n      fun foo(f: () -> Unit) = f()\n\n      fun bar() {\n          foo { println(\"Hi!\") }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "examples/src/main/kotlin/space/kscience/kmath/fit/qowFit.kt",
      "language": "kotlin",
      "line": 53,
      "offset": 21,
      "length": 5,
      "code": {
        "startLine": 51,
        "length": 5,
        "offset": 98,
        "surroundingCode": "\n    //Perform an operation on each x value (much more effective, than numpy)\n    val y = x.map { it ->\n        val value = it.pow(2) + it + 1\n        value + chain.next() * sqrt(value)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.examples.main",
    "inspectionName": "RedundantLambdaArrow"
  },
  "hash": "8e21c737e6c85eb4aed1e7a2337e7867b6009902a1f2ae50f378b48dcaa0445f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant lambda arrow",
  "severity": "Moderate",
  "comment": "Redundant lambda arrow",
  "detailsInfo": "Reports redundant lambda arrows in lambdas without parameters.\n\n**Example:**\n\n\n      fun foo(f: () -> Unit) = f()\n\n      fun bar() {\n          foo { -\\> println(\"Hi!\") }\n      }\n\nAfter the quick-fix is applied:\n\n\n      fun foo(f: () -> Unit) = f()\n\n      fun bar() {\n          foo { println(\"Hi!\") }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "examples/src/main/kotlin/space/kscience/kmath/fit/chiSquared.kt",
      "language": "kotlin",
      "line": 59,
      "offset": 21,
      "length": 5,
      "code": {
        "startLine": 57,
        "length": 5,
        "offset": 98,
        "surroundingCode": "\n    //Perform an operation on each x value (much more effective, than numpy)\n    val y = x.map { it ->\n        val value = it.pow(2) + it + 1\n        value + chain.next() * sqrt(value)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.examples.main",
    "inspectionName": "RedundantLambdaArrow"
  },
  "hash": "ea117c3d36d49a92932fd366b1dedc5ee22e6ef3496950b93e645649c340b18d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant 'Unit' return type",
  "severity": "High",
  "comment": "Redundant 'Unit' return type",
  "detailsInfo": "Reports a redundant `Unit` return type which can be omitted.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensorflow/src/main/kotlin/space/kscience/kmath/tensorflow/TensorFlowAlgebra.kt",
      "language": "kotlin",
      "line": 140,
      "offset": 8,
      "length": 4,
      "code": {
        "startLine": 138,
        "length": 4,
        "offset": 100,
        "surroundingCode": "        value: T,\n        operation: (left: Operand<TT>, right: Operand<TT>) -> Operand<TT>,\n    ): Unit {\n        val origin = asTensorFlow()\n        val left = origin.output"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensorflow.main",
    "inspectionName": "RedundantUnitReturnType"
  },
  "hash": "f8cd4529be19322faf0418c796d7f15a8d55c605815e1a572b084b52876229d0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant 'Unit' return type",
  "severity": "High",
  "comment": "Redundant 'Unit' return type",
  "detailsInfo": "Reports a redundant `Unit` return type which can be omitted.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensorflow/src/main/kotlin/space/kscience/kmath/tensorflow/TensorFlowAlgebra.kt",
      "language": "kotlin",
      "line": 130,
      "offset": 8,
      "length": 4,
      "code": {
        "startLine": 128,
        "length": 4,
        "offset": 113,
        "surroundingCode": "        other: StructureND<T>,\n        operation: (left: Operand<TT>, right: Operand<TT>) -> Operand<TT>,\n    ): Unit {\n        val origin = asTensorFlow()\n        val left = origin.output"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensorflow.main",
    "inspectionName": "RedundantUnitReturnType"
  },
  "hash": "2102d11bf4583ff73a0562803d8225fa9ff9443d841b305c2b6ea0b73b4e7315"
},{
  "tool": "Code Inspection",
  "category": "Other problems",
  "type": "@Deprecated annotation without 'replaceWith' argument",
  "severity": "Info",
  "comment": "'@Deprecated' annotation without a 'replaceWith' argument",
  "detailsInfo": "Reports deprecated functions and properties that do not have the `kotlin.ReplaceWith` argument in its `kotlin.deprecated` annotation and suggests to add one based on their body.\n\n\nKotlin provides the `ReplaceWith` argument to replace deprecated declarations automatically.\nIt is recommended to use the argument to fix deprecation issues in code.\n\n**Example:**\n\n\n      @Deprecated(\"Use refined() instead.\")\n      fun deprecated() = refined()\n\n      fun refined() = 42\n\nA quick-fix adds the `ReplaceWith()` argument:\n\n\n      @Deprecated(\"Use refined() instead.\", ReplaceWith(\"refined()\"))\n      fun deprecated() = refined()\n\n      fun refined() = 42\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/linear/MatrixWrapper.kt",
      "language": "kotlin",
      "line": 52,
      "offset": 1,
      "length": 44,
      "code": {
        "startLine": 50,
        "length": 44,
        "offset": 3,
        "surroundingCode": "}\n\n@Deprecated(\"To be replaced by withFeature\")\npublic operator fun <T : Any> Matrix<T>.plus(newFeature: MatrixFeature): MatrixWrapper<T> = withFeature(newFeature)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "DeprecatedCallableAddReplaceWith"
  },
  "hash": "840046213c33ddb95a3dfaa6e9323a0923b821a1016198ade41fb110b03263c7"
},{
  "tool": "Code Inspection",
  "category": "Other problems",
  "type": "@Deprecated annotation without 'replaceWith' argument",
  "severity": "Info",
  "comment": "'@Deprecated' annotation without a 'replaceWith' argument",
  "detailsInfo": "Reports deprecated functions and properties that do not have the `kotlin.ReplaceWith` argument in its `kotlin.deprecated` annotation and suggests to add one based on their body.\n\n\nKotlin provides the `ReplaceWith` argument to replace deprecated declarations automatically.\nIt is recommended to use the argument to fix deprecation issues in code.\n\n**Example:**\n\n\n      @Deprecated(\"Use refined() instead.\")\n      fun deprecated() = refined()\n\n      fun refined() = 42\n\nA quick-fix adds the `ReplaceWith()` argument:\n\n\n      @Deprecated(\"Use refined() instead.\", ReplaceWith(\"refined()\"))\n      fun deprecated() = refined()\n\n      fun refined() = 42\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/BigInt.kt",
      "language": "kotlin",
      "line": 531,
      "offset": 1,
      "length": 33,
      "code": {
        "startLine": 529,
        "length": 33,
        "offset": 60,
        "surroundingCode": "public val BigInt.algebra: BigIntField get() = BigIntField\n\n@Deprecated(\"Use BigInt::buffer\")\npublic inline fun Buffer.Companion.bigInt(size: Int, initializer: (Int) -> BigInt): Buffer<BigInt> =\n    boxing(size, initializer)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "DeprecatedCallableAddReplaceWith"
  },
  "hash": "6d1476813469f51c0d6c57352779a5464843786b6c5037440ce4922c0004e878"
},{
  "tool": "Code Inspection",
  "category": "Other problems",
  "type": "@Deprecated annotation without 'replaceWith' argument",
  "severity": "Info",
  "comment": "'@Deprecated' annotation without a 'replaceWith' argument",
  "detailsInfo": "Reports deprecated functions and properties that do not have the `kotlin.ReplaceWith` argument in its `kotlin.deprecated` annotation and suggests to add one based on their body.\n\n\nKotlin provides the `ReplaceWith` argument to replace deprecated declarations automatically.\nIt is recommended to use the argument to fix deprecation issues in code.\n\n**Example:**\n\n\n      @Deprecated(\"Use refined() instead.\")\n      fun deprecated() = refined()\n\n      fun refined() = 42\n\nA quick-fix adds the `ReplaceWith()` argument:\n\n\n      @Deprecated(\"Use refined() instead.\", ReplaceWith(\"refined()\"))\n      fun deprecated() = refined()\n\n      fun refined() = 42\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/BigInt.kt",
      "language": "kotlin",
      "line": 538,
      "offset": 1,
      "length": 40,
      "code": {
        "startLine": 536,
        "length": 40,
        "offset": 38,
        "surroundingCode": "    Buffer.boxing(size, initializer)\n\n@Deprecated(\"Use BigInt::mutableBuffer\")\npublic inline fun MutableBuffer.Companion.bigInt(size: Int, initializer: (Int) -> BigInt): MutableBuffer<BigInt> =\n    boxing(size, initializer)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "DeprecatedCallableAddReplaceWith"
  },
  "hash": "771871ac0b2d229f31819b5cc8cc8a0c0812e1b2a8962750357677a4c6b2fb35"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Object literal can be converted to lambda",
  "severity": "Info",
  "comment": "Convert to lambda",
  "detailsInfo": "Reports anonymous object literals implementing a Java interface with a single abstract method that can be converted into a call with a lambda expression.\n\n**Example:**\n\n\n    class SomeService {\n      val threadPool = Executors.newCachedThreadPool()\n        \n      fun foo() {\n        threadPool.submit(object : Runnable {\n          override fun run() {\n            println(\"hello\")\n          }\n        })\n      }\n    }\n\nAfter the quick-fix is applied:\n\n\n      fun foo() {\n        threadPool.submit { println(\"hello\") }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-coroutines/src/commonMain/kotlin/space/kscience/kmath/coroutines/coroutinesExtra.kt",
      "language": "kotlin",
      "line": 84,
      "offset": 32,
      "length": 25,
      "code": {
        "startLine": 82,
        "length": 25,
        "offset": 105,
        "surroundingCode": "    concurrency: Int,\n    crossinline action: suspend (value: T) -> Unit,\n): Unit = collect(concurrency, object : FlowCollector<T> {\n    override suspend fun emit(value: T): Unit = action(value)\n})"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-coroutines.commonMain",
    "inspectionName": "ObjectLiteralToLambda"
  },
  "hash": "76a7518023aab30262419e90f48425a351432123131e94219740a7bea12a5975"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'compileToExpression'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jsMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 54,
      "length": 19,
      "code": {
        "startLine": 35,
        "length": 19,
        "offset": 62,
        "surroundingCode": "\n    /**\n     * Benchmark case for [Expression] created with [compileToExpression].\n     */\n    @Benchmark"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jsMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "c8a5548569330d73f04814fd6c798a292d016ab3ca5260eaea764f14bec1b4fc"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'compileToExpression'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jsMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 43,
      "offset": 54,
      "length": 19,
      "code": {
        "startLine": 41,
        "length": 19,
        "offset": 62,
        "surroundingCode": "\n    /**\n     * Benchmark case for [Expression] created with [compileToExpression].\n     */\n    @Benchmark"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jsMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "ea25bdaddde3256555be07236eb0200a0130db0c2cb1c55707b9d9cc6ae4a8f2"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'pairs'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/expressions/Expression.kt",
      "language": "kotlin",
      "line": 161,
      "offset": 11,
      "length": 5,
      "code": {
        "startLine": 159,
        "length": 5,
        "offset": 54,
        "surroundingCode": " * Calls this expression from arguments.\n *\n * @param pairs the pairs of arguments to values.\n * @return a value.\n */"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "ccc7a08ddbd16e1d6a5e065547b1d72e050953da880e822dde02312ff6905f03"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'pairs'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/expressions/Expression.kt",
      "language": "kotlin",
      "line": 180,
      "offset": 11,
      "length": 5,
      "code": {
        "startLine": 178,
        "length": 5,
        "offset": 54,
        "surroundingCode": " * Calls this expression from arguments.\n *\n * @param pairs the pairs of arguments to values.\n * @return a value.\n */"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "6a67bc6844be22fe395dd933f54330a31fc14e2eb29832d89253562f74e769b7"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'pairs'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/expressions/Expression.kt",
      "language": "kotlin",
      "line": 199,
      "offset": 11,
      "length": 5,
      "code": {
        "startLine": 197,
        "length": 5,
        "offset": 54,
        "surroundingCode": " * Calls this expression from arguments.\n *\n * @param pairs the pairs of arguments to values.\n * @return a value.\n */"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "659fca66c2f3a2826b8811d1c28f9cd47d2be189be11ae6c5a769723229c6adf"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'BoxMullerNormalizedGaussianSampler'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/samplers/MarsagliaNormalizedGaussianSampler.kt",
      "language": "kotlin",
      "line": 17,
      "offset": 5,
      "length": 34,
      "code": {
        "startLine": 15,
        "length": 34,
        "offset": 221,
        "surroundingCode": " * [Marsaglia polar method](https://en.wikipedia.org/wiki/Marsaglia_polar_method) for sampling from a Gaussian\n * distribution with mean 0 and standard deviation 1. This is a variation of the algorithm implemented in\n * [BoxMullerNormalizedGaussianSampler].\n *\n * Based on Commons RNG implementation."
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "27e87af90ba3c29a17a5fcfe690d049fcb468ed1d0608dbe0dc942b2c61b2552"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unnecessary type argument",
  "severity": "Moderate",
  "comment": "Remove explicit type arguments",
  "detailsInfo": "Reports function calls with type arguments that can be automatically inferred. Such type arguments are redundant and can be safely omitted.\n\nUse the 'Remove explicit type arguments' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      // 'String' type can be inferred here\n      fun foo(): MutableList<String> = mutableListOf<String>()\n\n      // Here 'String' cannot be inferred, type argument is required.\n      fun bar() = mutableListOf<String>()\n\nAfter the quick-fix is applied:\n\n\n      fun foo(): MutableList<String> = mutableListOf() <== Updated\n\n      fun bar() = mutableListOf<String>()\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-optimization/src/commonMain/kotlin/space/kscience/kmath/optimization/OptimizationBuilder.kt",
      "language": "kotlin",
      "line": 52,
      "offset": 39,
      "length": 3,
      "code": {
        "startLine": 50,
        "length": 3,
        "offset": 128,
        "surroundingCode": "    builder: FunctionOptimizationBuilder<T>.() -> Unit = {},\n): FunctionOptimization<T> {\n    val problem = FunctionOptimization<T>(this) {\n        startAt(startingPoint)\n        builder()"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-optimization.commonMain",
    "inspectionName": "RemoveExplicitTypeArguments"
  },
  "hash": "203701592f3b4b696452f5e5c2277f082fe9fa7017d1ede690afebfd396f955e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unnecessary type argument",
  "severity": "Moderate",
  "comment": "Remove explicit type arguments",
  "detailsInfo": "Reports function calls with type arguments that can be automatically inferred. Such type arguments are redundant and can be safely omitted.\n\nUse the 'Remove explicit type arguments' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      // 'String' type can be inferred here\n      fun foo(): MutableList<String> = mutableListOf<String>()\n\n      // Here 'String' cannot be inferred, type argument is required.\n      fun bar() = mutableListOf<String>()\n\nAfter the quick-fix is applied:\n\n\n      fun foo(): MutableList<String> = mutableListOf() <== Updated\n\n      fun bar() = mutableListOf<String>()\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-optimization/src/commonMain/kotlin/space/kscience/kmath/optimization/OptimizationBuilder.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 39,
      "length": 3,
      "code": {
        "startLine": 62,
        "length": 3,
        "offset": 128,
        "surroundingCode": "    builder: FunctionOptimizationBuilder<T>.() -> Unit = {},\n): FunctionOptimization<T> {\n    val problem = FunctionOptimization<T>(this) {\n        startAt(mapOf(*startingPoint))\n        builder()"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-optimization.commonMain",
    "inspectionName": "RemoveExplicitTypeArguments"
  },
  "hash": "5fc55f4fc70f98b9bfe1e7d03c4916359da719ab9601c95001fcb5ac5c98c870"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unnecessary type argument",
  "severity": "Moderate",
  "comment": "Remove explicit type arguments",
  "detailsInfo": "Reports function calls with type arguments that can be automatically inferred. Such type arguments are redundant and can be safely omitted.\n\nUse the 'Remove explicit type arguments' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      // 'String' type can be inferred here\n      fun foo(): MutableList<String> = mutableListOf<String>()\n\n      // Here 'String' cannot be inferred, type argument is required.\n      fun bar() = mutableListOf<String>()\n\nAfter the quick-fix is applied:\n\n\n      fun foo(): MutableList<String> = mutableListOf() <== Updated\n\n      fun bar() = mutableListOf<String>()\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-optimization/src/commonMain/kotlin/space/kscience/kmath/optimization/FunctionOptimization.kt",
      "language": "kotlin",
      "line": 63,
      "offset": 39,
      "length": 3,
      "code": {
        "startLine": 61,
        "length": 3,
        "offset": 109,
        "surroundingCode": "    vararg features: OptimizationFeature,\n): FunctionOptimization<T> {\n    val problem = FunctionOptimization<T>(FeatureSet.of(OptimizationStartPoint(startingPoint), *features), this)\n    return optimizer.optimize(problem)\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-optimization.commonMain",
    "inspectionName": "RemoveExplicitTypeArguments"
  },
  "hash": "284887f8354fe0fb13033085a0faef7a89f972b90bdef8c4ef1a14fecb29705d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "examples/src/main/kotlin/space/kscience/kmath/structures/StreamDoubleFieldND.kt",
      "language": "kotlin",
      "line": 108,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 106,
        "length": 11,
        "offset": 7,
        "surroundingCode": "}\n\nfun DoubleField.ndStreaming(vararg shape: Int): StreamDoubleFieldND = StreamDoubleFieldND(shape)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.examples.main",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "03eece1ab4c96a14d37f3f9cb27ad118300803634bd47b5134491c59b0a88d79"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/nd/ShortRingND.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 23,
      "length": 9,
      "code": {
        "startLine": 28,
        "length": 9,
        "offset": 25,
        "surroundingCode": "}\n\npublic inline fun <R> ShortRing.withNdAlgebra(vararg shape: Int, action: ShortRingND.() -> R): R {\n    contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n    return ShortRingND(shape).run(action)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "1f16bfd5a349d4825057ea80e8c9b2f130aa2915b12db629cbd9964be84425f7"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/nd/StructureND.kt",
      "language": "kotlin",
      "line": 171,
      "offset": 32,
      "length": 21,
      "code": {
        "startLine": 169,
        "length": 21,
        "offset": 55,
        "surroundingCode": " */\n@PerformancePitfall\npublic fun <T : Comparable<T>> AlgebraND<T, Ring<T>>.contentEquals(\n    st1: StructureND<T>,\n    st2: StructureND<T>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "79cd31e780290dec76a5722553882c40f096a4a4e32409a85cec2d76af2a2af2"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/nd/StructureND.kt",
      "language": "kotlin",
      "line": 180,
      "offset": 32,
      "length": 23,
      "code": {
        "startLine": 178,
        "length": 23,
        "offset": 55,
        "surroundingCode": " */\n@PerformancePitfall\npublic fun <T : Comparable<T>> LinearSpace<T, Ring<T>>.contentEquals(\n    st1: StructureND<T>,\n    st2: StructureND<T>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "be5cef9e3aafb61cdf1b9c9b4d216f990a31d0948f347dca217d842f862af561"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/nd/DoubleFieldND.kt",
      "language": "kotlin",
      "line": 212,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 210,
        "length": 11,
        "offset": 14,
        "surroundingCode": "}\n\npublic val DoubleField.ndAlgebra: DoubleFieldOpsND get() = DoubleFieldOpsND\n\npublic fun DoubleField.ndAlgebra(vararg shape: Int): DoubleFieldND = DoubleFieldND(shape)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "57ab490502ced87123619f9b15bcea50480a4ffb1ad5139d07e0796d6d8ea49e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/nd/DoubleFieldND.kt",
      "language": "kotlin",
      "line": 214,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 212,
        "length": 11,
        "offset": 88,
        "surroundingCode": "public val DoubleField.ndAlgebra: DoubleFieldOpsND get() = DoubleFieldOpsND\n\npublic fun DoubleField.ndAlgebra(vararg shape: Int): DoubleFieldND = DoubleFieldND(shape)\n\n/**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "eb7f2c3068ef3ddb289186b9b1a0c6b8821fe90dc8c707d1b79caefc3444670a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/nd/DoubleFieldND.kt",
      "language": "kotlin",
      "line": 220,
      "offset": 23,
      "length": 11,
      "code": {
        "startLine": 218,
        "length": 11,
        "offset": 44,
        "surroundingCode": " */\n@UnstableKMathAPI\npublic inline fun <R> DoubleField.withNdAlgebra(vararg shape: Int, action: DoubleFieldND.() -> R): R {\n    contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n    return DoubleFieldND(shape).run(action)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "d59230079ef857cd601fad055e67a78a8f992ca2f5575002087ef576d7c4939f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/linear/DoubleLinearSpace.kt",
      "language": "kotlin",
      "line": 110,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 108,
        "length": 11,
        "offset": 14,
        "surroundingCode": "}\n\npublic val DoubleField.linearSpace: DoubleLinearSpace get() = DoubleLinearSpace\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "d8b4b5f8ced88fdc15c45871d910a5db7d650c39e050d38211ec4b513acf3b39"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/BigInt.kt",
      "language": "kotlin",
      "line": 529,
      "offset": 12,
      "length": 6,
      "code": {
        "startLine": 527,
        "length": 6,
        "offset": 14,
        "surroundingCode": "}\n\npublic val BigInt.algebra: BigIntField get() = BigIntField\n\n@Deprecated(\"Use BigInt::buffer\")"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "37dc2c7d37af650d74b37c4305b67aad788209afcf3ae7d824da739c3be66f51"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/BigInt.kt",
      "language": "kotlin",
      "line": 542,
      "offset": 19,
      "length": 6,
      "code": {
        "startLine": 540,
        "length": 6,
        "offset": 49,
        "surroundingCode": "    boxing(size, initializer)\n\npublic inline fun BigInt.mutableBuffer(size: Int, initializer: (Int) -> BigInt): Buffer<BigInt> =\n    Buffer.boxing(size, initializer)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "801bf0c8df83079869d3a3d472afd70ac747915a0276d19e3c6d668d3d464efe"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/BigInt.kt",
      "language": "kotlin",
      "line": 545,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 543,
        "length": 11,
        "offset": 49,
        "surroundingCode": "    Buffer.boxing(size, initializer)\n\npublic val BigIntField.nd: BufferedRingOpsND<BigInt, BigIntField>\n    get() = BufferedRingOpsND(BufferRingOps(BigIntField, BigInt::buffer))\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "64e39a30f822be76e0967f21b87efebe9190e9d2d5dbed414eb61f14a5beab06"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/BufferAlgebra.kt",
      "language": "kotlin",
      "line": 148,
      "offset": 12,
      "length": 9,
      "code": {
        "startLine": 146,
        "length": 9,
        "offset": 14,
        "surroundingCode": "}\n\npublic val ShortRing.bufferAlgebra: BufferRingOps<Short, ShortRing>\n    get() = BufferRingOps(ShortRing, ::ShortBuffer)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "5777fb7916ef0771a67f40564f10c95a6f85ca02efc146199969393a27ab5a1a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/BufferAlgebra.kt",
      "language": "kotlin",
      "line": 194,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 192,
        "length": 11,
        "offset": 52,
        "surroundingCode": "    BufferFieldOps(this, bufferFactory)\n\npublic val DoubleField.bufferAlgebra: BufferFieldOps<Double, DoubleField>\n    get() = BufferFieldOps(DoubleField, ::DoubleBuffer)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "cbda3d2ed05f7799f340225fb0d5ddebf5447f4ed89420c83b38fccf2652f75a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-nd4j/src/main/kotlin/space/kscience/kmath/nd4j/Nd4jArrayAlgebra.kt",
      "language": "kotlin",
      "line": 272,
      "offset": 12,
      "length": 10,
      "code": {
        "startLine": 270,
        "length": 10,
        "offset": 126,
        "surroundingCode": "public class FloatNd4jArrayField(override val shape: Shape) : FloatNd4jArrayFieldOps(), RingND<Float, FloatField>\n\npublic val FloatField.nd4j: FloatNd4jArrayFieldOps get() = FloatNd4jArrayFieldOps\n\npublic fun FloatField.nd4j(shapeFirst: Int, vararg shapeRest: Int): FloatNd4jArrayField ="
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-nd4j.main",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "4969871581d5a0fc237c98814f7fa42f8248a7f7245cc8ec404ef55787b8068d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-nd4j/src/main/kotlin/space/kscience/kmath/nd4j/Nd4jArrayAlgebra.kt",
      "language": "kotlin",
      "line": 221,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 219,
        "length": 11,
        "offset": 14,
        "surroundingCode": "}\n\npublic val DoubleField.nd4j: DoubleNd4jArrayFieldOps get() = DoubleNd4jArrayFieldOps\n\npublic class DoubleNd4jArrayField(override val shape: Shape) : DoubleNd4jArrayFieldOps(), FieldND<Double, DoubleField>"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-nd4j.main",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "ae7b86e4f06f21a5eab4e6c3909498543059a4020e92785b7b2914c404839723"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-nd4j/src/main/kotlin/space/kscience/kmath/nd4j/Nd4jArrayAlgebra.kt",
      "language": "kotlin",
      "line": 313,
      "offset": 12,
      "length": 7,
      "code": {
        "startLine": 311,
        "length": 7,
        "offset": 115,
        "surroundingCode": "public class IntNd4jArrayRing(override val shape: Shape) : IntNd4jArrayRingOps(), RingND<Int, IntRing>\n\npublic fun IntRing.nd4j(shapeFirst: Int, vararg shapeRest: Int): IntNd4jArrayRing =\n    IntNd4jArrayRing(intArrayOf(shapeFirst, * shapeRest))"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-nd4j.main",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "8ef96319f169b736908383abfba06638a76cc2610323afa6dd58bad7d4239943"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-nd4j/src/main/kotlin/space/kscience/kmath/nd4j/Nd4jArrayAlgebra.kt",
      "language": "kotlin",
      "line": 225,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 223,
        "length": 11,
        "offset": 131,
        "surroundingCode": "public class DoubleNd4jArrayField(override val shape: Shape) : DoubleNd4jArrayFieldOps(), FieldND<Double, DoubleField>\n\npublic fun DoubleField.nd4j(shapeFirst: Int, vararg shapeRest: Int): DoubleNd4jArrayField =\n    DoubleNd4jArrayField(intArrayOf(shapeFirst, * shapeRest))\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-nd4j.main",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "a9929a89a744a0c8381fea8aadcabd7fa44df00a3464f64e249a5d24722c180f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-nd4j/src/main/kotlin/space/kscience/kmath/nd4j/Nd4jArrayAlgebra.kt",
      "language": "kotlin",
      "line": 309,
      "offset": 12,
      "length": 7,
      "code": {
        "startLine": 307,
        "length": 7,
        "offset": 14,
        "surroundingCode": "}\n\npublic val IntRing.nd4j: IntNd4jArrayRingOps get() = IntNd4jArrayRingOps\n\npublic class IntNd4jArrayRing(override val shape: Shape) : IntNd4jArrayRingOps(), RingND<Int, IntRing>"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-nd4j.main",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "efec5365084e822b7107bb6bb8ce85b176df1d1434b554d56deefeb1f63ceb4f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-nd4j/src/main/kotlin/space/kscience/kmath/nd4j/Nd4jArrayAlgebra.kt",
      "language": "kotlin",
      "line": 274,
      "offset": 12,
      "length": 10,
      "code": {
        "startLine": 272,
        "length": 10,
        "offset": 94,
        "surroundingCode": "public val FloatField.nd4j: FloatNd4jArrayFieldOps get() = FloatNd4jArrayFieldOps\n\npublic fun FloatField.nd4j(shapeFirst: Int, vararg shapeRest: Int): FloatNd4jArrayField =\n    FloatNd4jArrayField(intArrayOf(shapeFirst, * shapeRest))\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-nd4j.main",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "c051c2f5bbf29b5c10f55ab5460d889d816bcb4556652a604d5d75babb73d815"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-multik/src/main/kotlin/space/kscience/kmath/multik/MultikDoubleAlgebra.kt",
      "language": "kotlin",
      "line": 53,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 51,
        "length": 11,
        "offset": 124,
        "surroundingCode": "\npublic val Double.Companion.multikAlgebra: MultikTensorAlgebra<Double, DoubleField> get() = MultikDoubleAlgebra\npublic val DoubleField.multikAlgebra: MultikTensorAlgebra<Double, DoubleField> get() = MultikDoubleAlgebra\n\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-multik.main",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "382365bbdc4e04cecb838d26d5b467fbd98168542f23d97048c168a86424fd82"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-viktor/src/main/kotlin/space/kscience/kmath/viktor/ViktorFieldOpsND.kt",
      "language": "kotlin",
      "line": 130,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 128,
        "length": 11,
        "offset": 14,
        "surroundingCode": "}\n\npublic fun DoubleField.viktorAlgebra(vararg shape: Int): ViktorFieldND = ViktorFieldND(shape)\n\npublic fun ViktorFieldND(vararg shape: Int): ViktorFieldND = ViktorFieldND(shape)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-viktor.main",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "58818dc515e86f777314dec4ff83f7464fe451253b077531ed1cba433601f5d6"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-viktor/src/main/kotlin/space/kscience/kmath/viktor/ViktorFieldOpsND.kt",
      "language": "kotlin",
      "line": 118,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 116,
        "length": 11,
        "offset": 14,
        "surroundingCode": "}\n\npublic val DoubleField.viktorAlgebra: ViktorFieldOpsND get() = ViktorFieldOpsND\n\npublic open class ViktorFieldND("
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-viktor.main",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "85343d837def34706711f395c5ebcd357b039d7fde7c7ded3ba402c808387679"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-complex/src/commonMain/kotlin/space/kscience/kmath/complex/ComplexFieldND.kt",
      "language": "kotlin",
      "line": 75,
      "offset": 12,
      "length": 12,
      "code": {
        "startLine": 73,
        "length": 12,
        "offset": 14,
        "surroundingCode": "}\n\npublic val ComplexField.ndAlgebra: ComplexFieldOpsND get() = ComplexFieldOpsND\n\npublic fun ComplexField.ndAlgebra(vararg shape: Int): ComplexFieldND = ComplexFieldND(shape)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-complex.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "11a8525fa9a2f3a5a02bb0209d45be50852b319819cd93ae99084baddf2cf662"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-complex/src/commonMain/kotlin/space/kscience/kmath/complex/ComplexFieldND.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 12,
      "length": 12,
      "code": {
        "startLine": 75,
        "length": 12,
        "offset": 91,
        "surroundingCode": "public val ComplexField.ndAlgebra: ComplexFieldOpsND get() = ComplexFieldOpsND\n\npublic fun ComplexField.ndAlgebra(vararg shape: Int): ComplexFieldND = ComplexFieldND(shape)\n\n/**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-complex.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "122dc94c6e575b132f8fee662ae16afc043df41e9dd948196c030ce1e6f3bf98"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-complex/src/commonMain/kotlin/space/kscience/kmath/complex/ComplexFieldND.kt",
      "language": "kotlin",
      "line": 82,
      "offset": 23,
      "length": 12,
      "code": {
        "startLine": 80,
        "length": 12,
        "offset": 99,
        "surroundingCode": " * Produce a context for n-dimensional operations inside this real field\n */\npublic inline fun <R> ComplexField.withNdAlgebra(vararg shape: Int, action: ComplexFieldND.() -> R): R {\n    contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n    return ComplexFieldND(shape).action()"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-complex.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "b324e578186f78273bbc44ffc67f8ee09f8afb607ec29b00116fa9b0fe0d7ceb"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/DoubleTensorAlgebra.kt",
      "language": "kotlin",
      "line": 1142,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 1140,
        "length": 11,
        "offset": 113,
        "surroundingCode": "\npublic val Double.Companion.tensorAlgebra: DoubleTensorAlgebra.Companion get() = DoubleTensorAlgebra\npublic val DoubleField.tensorAlgebra: DoubleTensorAlgebra.Companion get() = DoubleTensorAlgebra\n\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "6a8250e557fa45ba919fea18349cbb620b79cd91ff907387482e79fab4b86f63"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/BroadcastDoubleTensorAlgebra.kt",
      "language": "kotlin",
      "line": 106,
      "offset": 16,
      "length": 19,
      "code": {
        "startLine": 104,
        "length": 19,
        "offset": 53,
        "surroundingCode": "@UnstableKMathAPI\n@PerformancePitfall\npublic fun <R> DoubleTensorAlgebra.withBroadcast(block: BroadcastDoubleTensorAlgebra.() -> R): R =\n    BroadcastDoubleTensorAlgebra.block()"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "76ee8d9c13f664fd80cea8dec1ea717d1e7f93bb9fab444d63b8e6878948ba53"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-functions/src/commonMain/kotlin/space/kscience/kmath/integration/SimpsonIntegrator.kt",
      "language": "kotlin",
      "line": 108,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 106,
        "length": 11,
        "offset": 14,
        "surroundingCode": "}\n\npublic val DoubleField.simpsonIntegrator: DoubleSimpsonIntegrator get() = DoubleSimpsonIntegrator"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-functions.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "9f9b2a6ceea6671f901bb01164693ab98f71698ed09fa58fc04c3e39e3a54912"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensorflow/src/main/kotlin/space/kscience/kmath/tensorflow/DoubleTensorFlowAlgebra.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 75,
        "length": 11,
        "offset": 69,
        "surroundingCode": " * The resulting tensor is available outside of scope\n */\npublic fun DoubleField.produceWithTF(\n    block: DoubleTensorFlowAlgebra.() -> StructureND<Double>,\n): StructureND<Double> = Graph().use { graph ->"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensorflow.main",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "b8480193d18f2ad4d6e61a8cb028a5e2271b0ee25906a92286b63c9fb632dd32"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensorflow/src/main/kotlin/space/kscience/kmath/tensorflow/DoubleTensorFlowAlgebra.kt",
      "language": "kotlin",
      "line": 89,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 87,
        "length": 11,
        "offset": 71,
        "surroundingCode": " * The resulting tensors are available outside of scope\n */\npublic fun DoubleField.produceMapWithTF(\n    block: DoubleTensorFlowAlgebra.() -> Map<Symbol, StructureND<Double>>,\n): Map<Symbol, StructureND<Double>> = Graph().use { graph ->"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensorflow.main",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "4a573a2507854aebc4bb148e4ca4b12a0a466639b28325c20bf627cfe0ecc0d7"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'binaryenType' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/wasm/internal/WasmBuilder.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 20,
        "length": 9,
        "offset": 109,
        "surroundingCode": "@Suppress(\"UnsafeCastFromDynamic\")\ninternal sealed class WasmBuilder<T : Number, out E : Expression<T>>(\n    protected val binaryenType: Type,\n    protected val algebra: Algebra<T>,\n    protected val target: TypedMst<T>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "bb12b69834ac51e2e6a7f5e8839ff5384400f4e0eb6508c405ddda1413528ea0"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'target' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/wasm/internal/WasmBuilder.kt",
      "language": "kotlin",
      "line": 24,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 22,
        "length": 9,
        "offset": 81,
        "surroundingCode": "    protected val binaryenType: Type,\n    protected val algebra: Algebra<T>,\n    protected val target: TypedMst<T>,\n) {\n    protected val keys: MutableList<Symbol> = mutableListOf()"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "55a57a702c0d8bdfeb6cf9e676a27a9a9c6dfab99e1a157825aa747f973cdb05"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'loadNumberConstant' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/PrimitiveAsmBuilder.kt",
      "language": "kotlin",
      "line": 262,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 260,
        "length": 9,
        "offset": 80,
        "surroundingCode": "     * Loads a numeric constant [value] from the class's constants.\n     */\n    protected fun loadNumberConstant(value: Number) {\n        when (tTypePrimitive) {\n            BYTE_TYPE -> invokeMethodVisitor.iconst(value.toInt())"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "e2b31e66e0a6e0139da1fbb7edcff61aad8985a24bf21d682973ed5d10bd65d1"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'tTypePrimitiveArray' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/PrimitiveAsmBuilder.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 44,
        "length": 9,
        "offset": 62,
        "surroundingCode": "     * ASM type for array of [classOfTPrimitive].\n     */\n    protected val tTypePrimitiveArray: Type = getType(\"[\" + classOfTPrimitive.asm.descriptor)\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "44358c3d9dbbb900d34ee5307ca4aba5ea527227b9d852dba6c600e660ebda96"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'classOfTPrimitive' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/PrimitiveAsmBuilder.kt",
      "language": "kotlin",
      "line": 27,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 25,
        "length": 9,
        "offset": 74,
        "surroundingCode": "    protected val algebra: NumericAlgebra<T>,\n    classOfT: Class<*>,\n    protected val classOfTPrimitive: Class<*>,\n    expressionParent: Class<E>,\n    protected val target: TypedMst<T>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "141eb0969b68c2a438c3b28f6258c57f47f8c496f1fab47109caf67122bead28"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'target' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/PrimitiveAsmBuilder.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 27,
        "length": 9,
        "offset": 83,
        "surroundingCode": "    protected val classOfTPrimitive: Class<*>,\n    expressionParent: Class<E>,\n    protected val target: TypedMst<T>,\n) : AsmBuilder() {\n    private val className: String = buildName(\"${target.hashCode()}_${classOfT.simpleName}\")"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "7884ec69bb16f44900b824a248643071ecbde5ae91f3b9f6da58a8366cf9b442"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'prepareVariable' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/PrimitiveAsmBuilder.kt",
      "language": "kotlin",
      "line": 277,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 275,
        "length": 9,
        "offset": 40,
        "surroundingCode": "     * once for a variable.\n     */\n    protected fun prepareVariable(name: Symbol, arrayMode: Boolean): Unit = invokeMethodVisitor.run {\n        var argumentIndex = argumentsIndexer.indexOf(name)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "54434bc84391957fdc432c321ef62809c54488589d30ff75a6d51e17ef93c386"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'loadVariable' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/PrimitiveAsmBuilder.kt",
      "language": "kotlin",
      "line": 313,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 311,
        "length": 9,
        "offset": 49,
        "surroundingCode": "     * with [prepareVariable] first.\n     */\n    protected fun loadVariable(name: Symbol) {\n        val argumentIndex = argumentsIndexer.indexOf(name)\n        val localIndex = 2 + argumentIndex * tTypePrimitive.size"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "e029f77807fe8af3327050d5cb3039ad66909ed3c4aec0277225abaf92c9dd5e"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'types' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/commonMain/kotlin/space/kscience/kmath/ast/rendering/features.kt",
      "language": "kotlin",
      "line": 59,
      "offset": 32,
      "length": 6,
      "code": {
        "startLine": 57,
        "length": 6,
        "offset": 53,
        "surroundingCode": " */\n@UnstableKMathAPI\npublic class PrettyPrintFloats(public val types: Set<KClass<out Number>>) : RenderFeature {\n    override fun render(renderer: FeaturedMathRenderer, node: MST): MathSyntax? {\n        if (node !is MST.Numeric || node.value::class !in types) return null"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "47da523ac32c907f0eea2011cb562a7299bafa436f11aaebb3c5c42870a87ef2"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'types' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/commonMain/kotlin/space/kscience/kmath/ast/rendering/features.kt",
      "language": "kotlin",
      "line": 119,
      "offset": 34,
      "length": 6,
      "code": {
        "startLine": 117,
        "length": 6,
        "offset": 55,
        "surroundingCode": " */\n@UnstableKMathAPI\npublic class PrettyPrintIntegers(public val types: Set<KClass<out Number>>) : RenderFeature {\n    override fun render(renderer: FeaturedMathRenderer, node: MST): MathSyntax? =\n        if (node !is MST.Numeric || node.value::class !in types)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "f8a62c04b46772ee1672cc0181d0c08df5ba46303d5b3f9061fe079a98e61a63"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'symbols' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/commonMain/kotlin/space/kscience/kmath/ast/rendering/features.kt",
      "language": "kotlin",
      "line": 142,
      "offset": 28,
      "length": 6,
      "code": {
        "startLine": 140,
        "length": 6,
        "offset": 49,
        "surroundingCode": " */\n@UnstableKMathAPI\npublic class PrettyPrintPi(public val symbols: Set<String>) : RenderFeature {\n    override fun render(renderer: FeaturedMathRenderer, node: MST): MathSyntax? =\n        if (node !is Symbol || node.identity !in symbols)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "c51a91f5a5ebc34b13d2cee776e0444b901bb8e2b9806a3d5ce7ff0d9b511eca"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'features' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/commonMain/kotlin/space/kscience/kmath/ast/rendering/MathRenderer.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 40,
      "length": 6,
      "code": {
        "startLine": 29,
        "length": 6,
        "offset": 61,
        "surroundingCode": " */\n@UnstableKMathAPI\npublic open class FeaturedMathRenderer(public val features: List<RenderFeature>) : MathRenderer {\n    override fun render(mst: MST): MathSyntax {\n        for (feature in features) feature.render(this, mst)?.let { return it }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "75ed07cd1bca873dc5c5263b2fa9d571c700fa3a673ef0a6853b6693243d65f6"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'stages' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/commonMain/kotlin/space/kscience/kmath/ast/rendering/MathRenderer.kt",
      "language": "kotlin",
      "line": 57,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 55,
        "length": 6,
        "offset": 94,
        "surroundingCode": "public open class FeaturedMathRendererWithPostProcess(\n    features: List<RenderFeature>,\n    public val stages: List<PostProcessPhase>,\n) : FeaturedMathRenderer(features) {\n    override fun render(mst: MST): MathSyntax {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "4c42f2dfcfe84890119c8b9a411ef446eff7e2cb5cfbcd9c8852796bd00ac41a"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'dim' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/DotBenchmark.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 19,
      "length": 3,
      "code": {
        "startLine": 27,
        "length": 3,
        "offset": 76,
        "surroundingCode": "    companion object {\n        val random = Random(12224)\n        const val dim = 1000\n\n        //creating invertible matrix"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "b73e05f7fa2f2804cf824e89a577ed676bd7b2c5a64358bf1300a966de050b76"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'random' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/DotBenchmark.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 26,
        "length": 6,
        "offset": 65,
        "surroundingCode": "internal class DotBenchmark {\n    companion object {\n        val random = Random(12224)\n        const val dim = 1000\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "a0eac443ac77d8764af59f11b451c9a77e75c120071307b903ae2cad5e4b292e"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'flags' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/structures/FlaggedBuffer.kt",
      "language": "kotlin",
      "line": 58,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 56,
        "length": 6,
        "offset": 74,
        "surroundingCode": "public class FlaggedDoubleBuffer(\n    public val values: DoubleArray,\n    public val flags: ByteArray\n) : FlaggedBuffer<Double?>, Buffer<Double?> {\n    init {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "9273c93c1bde57e555016b0517706e440d491071d7fc20679a9b9866de9989c0"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'rowIndex' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/structures/BufferAccessor2D.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 55,
      "length": 8,
      "code": {
        "startLine": 38,
        "length": 8,
        "offset": 68,
        "surroundingCode": "    }.as2D()\n\n    inner class Row(val buffer: MutableBuffer<T>, val rowIndex: Int) : MutableBuffer<T> {\n        override val size: Int get() = colNum\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "de0be578e1c19e685bfbfee9eafeb95b05599715eaec4d8d760dc804b42318bd"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'generator' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/jvmMain/kotlin/space/kscience/kmath/stat/RandomSourceGenerator.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 38,
      "length": 6,
      "code": {
        "startLine": 38,
        "length": 6,
        "offset": 105,
        "surroundingCode": " * @property generator the underlying [RandomGenerator] object.\n */\npublic class RandomGeneratorProvider(public val generator: RandomGenerator) : UniformRandomProvider {\n    /**\n     * Generates a [Boolean] value."
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.jvmMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "d0865a3c63224344e1543b19c6dad4a2b24aa16ce28b81adddc6743a30adfdd7"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'range' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/stat/UniformDistribution.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 34,
      "length": 6,
      "code": {
        "startLine": 11,
        "length": 6,
        "offset": 91,
        "surroundingCode": "import space.kscience.kmath.distributions.Distribution1D\n\npublic class UniformDistribution(public val range: ClosedFloatingPointRange<Double>) : Distribution1D<Double> {\n    private val length: Double = range.endInclusive - range.start\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "11fee38c08ccfa071ed5e47df2302b638e545ba577d149c6c7708346373eae0c"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'LANCZOS_G' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/internal/InternalGamma.kt",
      "language": "kotlin",
      "line": 48,
      "offset": 15,
      "length": 9,
      "code": {
        "startLine": 46,
        "length": 9,
        "offset": 47,
        "surroundingCode": "\ninternal object InternalGamma {\n    const val LANCZOS_G = 607.0 / 128.0\n\n    private val LANCZOS = doubleArrayOf("
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "15f65f2166c87ac734d537c8fc26dc0263abe827b9636caa1ad270c23547d026"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'name' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/distributions/FactorizedDistribution.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 48,
      "length": 6,
      "code": {
        "startLine": 29,
        "length": 6,
        "offset": 50,
        "surroundingCode": "}\n\npublic class NamedDistributionWrapper<T : Any>(public val name: String, public val distribution: Distribution<T>) :\n    NamedDistribution<T> {\n    override fun probability(arg: Map<String, T>): Double = distribution.probability("
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "4647af7a10c8e67d6e861aed693497ffc0d66e7d9b40bcdc774b084c69b667d9"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'algebra' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-symja/src/main/kotlin/space/kscience/kmath/symja/SymjaExpression.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 27,
        "length": 6,
        "offset": 73,
        "surroundingCode": " */\npublic class SymjaExpression<T : Number, A : NumericAlgebra<T>>(\n    public val algebra: A,\n    public val mst: MST,\n    public val evaluator: ExprEvaluator = DEFAULT_EVALUATOR,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-symja.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "b2280bcd6979a54a43adda115db384fee72a559ec0072cf003c6c21b319a2634"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'mst' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-symja/src/main/kotlin/space/kscience/kmath/symja/SymjaExpression.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 28,
        "length": 6,
        "offset": 96,
        "surroundingCode": "public class SymjaExpression<T : Number, A : NumericAlgebra<T>>(\n    public val algebra: A,\n    public val mst: MST,\n    public val evaluator: ExprEvaluator = DEFAULT_EVALUATOR,\n) : SpecialDifferentiableExpression<T, SymjaExpression<T, A>> {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-symja.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "e35aa8f22298954a7dd74843dae55a5ff7d8d4c074c851521db163ccc35ab178"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'evaluator' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-symja/src/main/kotlin/space/kscience/kmath/symja/SymjaExpression.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 29,
        "length": 6,
        "offset": 56,
        "surroundingCode": "    public val algebra: A,\n    public val mst: MST,\n    public val evaluator: ExprEvaluator = DEFAULT_EVALUATOR,\n) : SpecialDifferentiableExpression<T, SymjaExpression<T, A>> {\n    override fun invoke(arguments: Map<Symbol, T>): T = mst.interpret(algebra, arguments)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-symja.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "7306638739d0ca932d413120f2136da838f981298ca02bb962b1dc8a48864535"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'startOffset' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/jvmMain/kotlin/space/kscience/kmath/memory/ByteBufferMemory.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 18,
        "length": 11,
        "offset": 69,
        "surroundingCode": "internal class ByteBufferMemory(\n    val buffer: ByteBuffer,\n    val startOffset: Int = 0,\n    override val size: Int = buffer.limit(),\n) : Memory {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.jvmMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "41c30f0c50ff7683000abe25a2b0ea2436b7c506476cc48dd122618c7d0bd1c5"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'startOffset' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/nativeMain/kotlin/space/kscience/kmath/memory/NativeMemory.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 9,
        "length": 11,
        "offset": 63,
        "surroundingCode": "internal class NativeMemory(\n    val array: ByteArray,\n    val startOffset: Int = 0,\n    override val size: Int = array.size,\n) : Memory {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.nativeMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "0c5c0a0608805b9a512adceae69872728f587c5f23b32db20e30530bfba22f11"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'multikLinAl' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-multik/src/main/kotlin/space/kscience/kmath/multik/MultikTensorAlgebra.kt",
      "language": "kotlin",
      "line": 59,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 57,
        "length": 9,
        "offset": 50,
        "surroundingCode": "\n    protected val multikMath: Math = mk.math\n    protected val multikLinAl: LinAlg = mk.linalg\n    protected val multikStat: Statistics = mk.stat\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-multik.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "11b59f52dae514b694f5bc88837fad6083acca3a762980cfe6edc8fe83b70fb6"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'f64Buffer' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-viktor/src/main/kotlin/space/kscience/kmath/viktor/ViktorFieldOpsND.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 24,
        "length": 6,
        "offset": 48,
        "surroundingCode": "    PowerOperations<StructureND<Double>> {\n\n    public val StructureND<Double>.f64Buffer: F64Array\n        get() = when (this) {\n            is ViktorStructureND -> this.f64Buffer"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-viktor.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "edc29c220ff233b763f778a2983bfc535aec15b363858719461555acb7d74615"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'wrap' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/linear/CMMatrix.kt",
      "language": "kotlin",
      "line": 66,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 64,
        "length": 8,
        "offset": 67,
        "surroundingCode": "\n    internal fun RealMatrix.wrap(): CMMatrix = CMMatrix(this)\n    internal fun RealVector.wrap(): CMVector = CMVector(this)\n\n    override fun buildVector(size: Int, initializer: DoubleField.(Int) -> Double): Point<Double> ="
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "66a71c30135e86e9f55ef1859784fe7c072b5a42909861f9b2d6f08b80dd0be5"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'numberOfVariables' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/expressions/DerivativeStructureExpression.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 24,
        "length": 6,
        "offset": 133,
        "surroundingCode": ") : ExtendedField<DerivativeStructure>, ExpressionAlgebra<Double, DerivativeStructure>,\n    NumbersAddOps<DerivativeStructure> {\n    public val numberOfVariables: Int = bindings.size\n\n    override val zero: DerivativeStructure by lazy { DerivativeStructure(numberOfVariables, order) }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "88af0c5101b62e3f5389c03f2a7bc7a221e80708b83947e0590c4b0414fb1282"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'DEFAULT_RELATIVE_TOLERANCE' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/optimization/CMOptimizer.kt",
      "language": "kotlin",
      "line": 65,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 63,
        "length": 6,
        "offset": 83,
        "surroundingCode": "public object CMOptimizer : Optimizer<Double, FunctionOptimization<Double>> {\n\n    public const val DEFAULT_RELATIVE_TOLERANCE: Double = 1e-4\n    public const val DEFAULT_ABSOLUTE_TOLERANCE: Double = 1e-4\n    public const val DEFAULT_MAX_ITER: Int = 1000"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "82f4dda613c4ed81fc58428b8899b76a09922802f433e505059f3272df25b445"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'DEFAULT_ABSOLUTE_TOLERANCE' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/optimization/CMOptimizer.kt",
      "language": "kotlin",
      "line": 66,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 64,
        "length": 6,
        "offset": 68,
        "surroundingCode": "\n    public const val DEFAULT_RELATIVE_TOLERANCE: Double = 1e-4\n    public const val DEFAULT_ABSOLUTE_TOLERANCE: Double = 1e-4\n    public const val DEFAULT_MAX_ITER: Int = 1000\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "03f28736cccb7a07d76488cf228d2a34bb4c0d91963201dde3a67db7b09059cc"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'DEFAULT_MAX_ITER' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/optimization/CMOptimizer.kt",
      "language": "kotlin",
      "line": 67,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 65,
        "length": 6,
        "offset": 130,
        "surroundingCode": "    public const val DEFAULT_RELATIVE_TOLERANCE: Double = 1e-4\n    public const val DEFAULT_ABSOLUTE_TOLERANCE: Double = 1e-4\n    public const val DEFAULT_MAX_ITER: Int = 1000\n\n    public val defaultConvergenceChecker: SimpleValueChecker = SimpleValueChecker("
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "8af3173b1c996e660a046f56c0fd04453b902b3572321be35e3dcdd561e80ac1"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'fullLike' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/DoubleTensorAlgebra.kt",
      "language": "kotlin",
      "line": 149,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 147,
        "length": 6,
        "offset": 89,
        "surroundingCode": "     * @return tensor with the `input` tensor shape and filled with [value].\n     */\n    public fun Tensor<Double>.fullLike(value: Double): DoubleTensor {\n        val shape = tensor.shape\n        val buffer = DoubleArray(tensor.numElements) { value }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "9f2a259b856d24420c73b904af227e7941506b6c0ccb5d414ef32911590659b9"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'eye' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/DoubleTensorAlgebra.kt",
      "language": "kotlin",
      "line": 191,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 189,
        "length": 6,
        "offset": 87,
        "surroundingCode": "     * @return a 2-D tensor with ones on the diagonal and zeros elsewhere.\n     */\n    public fun eye(n: Int): DoubleTensor {\n        val shape = intArrayOf(n, n)\n        val buffer = DoubleArray(n * n) { 0.0 }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "7b4c2537e5f4752eaefd8b3acfe6f4a9baa077f5e70f75105acba5f87e1b1c53"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'luFactor' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/DoubleTensorAlgebra.kt",
      "language": "kotlin",
      "line": 735,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 733,
        "length": 6,
        "offset": 128,
        "surroundingCode": "     * The `pivots`  has the shape ``(∗, min(m, n))``. `pivots` stores all the intermediate transpositions of rows.\n     */\n    public fun StructureND<Double>.luFactor(epsilon: Double): Pair<DoubleTensor, IntTensor> =\n        computeLU(tensor, epsilon)\n            ?: throw IllegalArgumentException(\"Tensor contains matrices which are singular at precision $epsilon\")"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "6cca5a6e0d1789403d1a4198c14aa2c9569e56a7155de81814486768bf629bc5"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'luPivot' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/DoubleTensorAlgebra.kt",
      "language": "kotlin",
      "line": 761,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 759,
        "length": 6,
        "offset": 62,
        "surroundingCode": "     * @return triple of `P`, `L` and `U` tensors\n     */\n    public fun luPivot(\n        luTensor: StructureND<Double>,\n        pivotsTensor: Tensor<Int>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "d661371761c13671609c60706c7e385909664d6f3e0654e52fff1b486ede3f49"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'cholesky' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/DoubleTensorAlgebra.kt",
      "language": "kotlin",
      "line": 805,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 803,
        "length": 6,
        "offset": 58,
        "surroundingCode": "     * @return a pair of `Q` and `R` tensors.\n     */\n    public fun StructureND<Double>.cholesky(epsilon: Double): DoubleTensor {\n        checkSquareMatrix(shape)\n        checkPositiveDefinite(tensor, epsilon)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "27597f33a381ffba3fa21cb02ac7e8eb2cdc6601145e366b7ec93b3333e77911"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'svd' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/DoubleTensorAlgebra.kt",
      "language": "kotlin",
      "line": 852,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 850,
        "length": 6,
        "offset": 55,
        "surroundingCode": "     * @return a triple `Triple(U, S, V)`.\n     */\n    public fun StructureND<Double>.svd(epsilon: Double): Triple<DoubleTensor, DoubleTensor, DoubleTensor> {\n        val size = tensor.dimension\n        val commonShape = tensor.shape.sliceArray(0 until size - 2)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "284cdc471aeea5a57281c3198c5526192037b13d64a817937608ec4d486420e8"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'lu' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/DoubleTensorAlgebra.kt",
      "language": "kotlin",
      "line": 1133,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 1131,
        "length": 6,
        "offset": 63,
        "surroundingCode": "     * @return triple of `P`, `L` and `U` tensors.\n     */\n    public fun StructureND<Double>.lu(epsilon: Double = 1e-9): Triple<DoubleTensor, DoubleTensor, DoubleTensor> {\n        val (lu, pivots) = tensor.luFactor(epsilon)\n        return luPivot(lu, pivots)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "c25b951e88e7e384743056d078efabc863378ae1074221a9409f47e5cb575c45"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'bufferFactory' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-functions/src/commonMain/kotlin/space/kscience/kmath/integration/SplineIntegrator.kt",
      "language": "kotlin",
      "line": 55,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 53,
        "length": 6,
        "offset": 88,
        "surroundingCode": "public class SplineIntegrator<T : Comparable<T>>(\n    public val algebra: Field<T>,\n    public val bufferFactory: MutableBufferFactory<T>,\n) : UnivariateIntegrator<T> {\n    override fun process(integrand: UnivariateIntegrand<T>): UnivariateIntegrand<T> = algebra {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-functions.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "a9b9fdefc8fdefb98df2fc1de13c87482e437b52ef56d1575447b03c07ad8cc2"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'isFull' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-coroutines/src/commonMain/kotlin/space/kscience/kmath/streaming/RingBuffer.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 32,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public fun isFull(): Boolean = size == buffer.size\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-coroutines.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "0bd06b129579351aa0719ecd3818e49d46ef4b8e4fa024598b304224f19bf5ff"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'coerce' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-dimensions/src/commonMain/kotlin/space/kscience/kmath/dimensions/Wrappers.kt",
      "language": "kotlin",
      "line": 23,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 21,
        "length": 6,
        "offset": 133,
        "surroundingCode": "         * Coerces a regular matrix to a matrix with type-safe dimensions and throws an error if coercion failed\n         */\n        public inline fun <T, reified R : Dimension, reified C : Dimension> coerce(structure: Structure2D<T>): DMatrix<T, R, C> {\n            require(structure.rowNum == Dimension.dim<R>()) {\n                \"Row number mismatch: expected ${Dimension.dim<R>()} but found ${structure.rowNum}\""
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-dimensions.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "69e8223689de407a9d645cd43a8a9fa202ea65b11307b431db5e112b28f79aec"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'point' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-dimensions/src/commonMain/kotlin/space/kscience/kmath/dimensions/Wrappers.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 56,
      "length": 6,
      "code": {
        "startLine": 75,
        "length": 6,
        "offset": 70,
        "surroundingCode": " */\n@JvmInline\npublic value class DPointWrapper<out T, D : Dimension>(public val point: Point<T>) :\n    DPoint<T, D> {\n    override val size: Int get() = point.size"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-dimensions.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "c96619c1e84812ed0753083d8493126283325d729b05017ef21c318e8c13de9c"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'dimension' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-histograms/src/commonMain/kotlin/space/kscience/kmath/histogram/UniformHistogramGroupND.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 39,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public val dimension: Int get() = lower.size\n\n    override val shape: IntArray = IntArray(binNums.size) { binNums[it] + 2 }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-histograms.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "2ebf3f3f697d975c0b702a45af252275b18a1273eadca3cf82796506759d2e89"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'algebra' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-kotlingrad/src/main/kotlin/space/kscience/kmath/kotlingrad/KMathNumber.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 32,
      "length": 6,
      "code": {
        "startLine": 17,
        "length": 6,
        "offset": 80,
        "surroundingCode": " * @property value The value of this number.\n */\npublic class KMathNumber<T, A>(public val algebra: A, override val value: T) :\n    SConst<KMathNumber<T, A>>(value) where T : Number, A : NumericAlgebra<T> {\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-kotlingrad.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "16f575e6a0d691c033f8f85571be143c28b72acf1b9346b7dfc11623b308114f"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'algebra' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-kotlingrad/src/main/kotlin/space/kscience/kmath/kotlingrad/KotlingradExpression.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 44,
        "length": 6,
        "offset": 77,
        "surroundingCode": " */\npublic class KotlingradProcessor<T : Number, A : NumericAlgebra<T>>(\n    public val algebra: A,\n) : AutoDiffProcessor<T, MST, MstExtendedField> {\n    override fun differentiate(function: MstExtendedField.() -> MST): DifferentiableExpression<T> ="
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-kotlingrad.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "1bae93f1b5dd681d44b5177961f923211b51221936d8d4a52c159384457a3e95"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'algebra' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-kotlingrad/src/main/kotlin/space/kscience/kmath/kotlingrad/KotlingradExpression.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 23,
        "length": 6,
        "offset": 78,
        "surroundingCode": " */\npublic class KotlingradExpression<T : Number, A : NumericAlgebra<T>>(\n    public val algebra: A,\n    public val mst: MST,\n) : SpecialDifferentiableExpression<T, KotlingradExpression<T, A>> {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-kotlingrad.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "fa0d215020d1a3b46b0849f135915b6375981c735d8bd587900cb96c40796017"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'mst' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-kotlingrad/src/main/kotlin/space/kscience/kmath/kotlingrad/KotlingradExpression.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 24,
        "length": 6,
        "offset": 101,
        "surroundingCode": "public class KotlingradExpression<T : Number, A : NumericAlgebra<T>>(\n    public val algebra: A,\n    public val mst: MST,\n) : SpecialDifferentiableExpression<T, KotlingradExpression<T, A>> {\n    override fun invoke(arguments: Map<Symbol, T>): T = mst.interpret(algebra, arguments)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-kotlingrad.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "5802fced4b69d65ef880ebe75b64cffc8585c5b82e373b688e69f304a34611aa"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'operateInPlace' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensorflow/src/main/kotlin/space/kscience/kmath/tensorflow/TensorFlowAlgebra.kt",
      "language": "kotlin",
      "line": 137,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 135,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public fun Tensor<T>.operateInPlace(\n        value: T,\n        operation: (left: Operand<TT>, right: Operand<TT>) -> Operand<TT>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensorflow.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "e797a6590c3ac3fda8f0507a1d5693a9eb2e038ec4b910dd007aabfbf7beef60"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'operateInPlace' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensorflow/src/main/kotlin/space/kscience/kmath/tensorflow/TensorFlowAlgebra.kt",
      "language": "kotlin",
      "line": 127,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 125,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public fun Tensor<T>.operateInPlace(\n        other: StructureND<T>,\n        operation: (left: Operand<TT>, right: Operand<TT>) -> Operand<TT>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensorflow.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "fd72cd60aa2217a57079c2a536a8a604e59f12b11864e93473cc04d57791438b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'tensor' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensorflow/src/main/kotlin/space/kscience/kmath/tensorflow/TensorFlowAlgebra.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 39,
      "length": 6,
      "code": {
        "startLine": 33,
        "length": 6,
        "offset": 53,
        "surroundingCode": " */\n@JvmInline\npublic value class TensorFlowArray<T>(public val tensor: NdArray<T>) : Tensor<T> {\n    override val shape: Shape get() = tensor.shape().asArray().toIntArray()\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensorflow.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "c0973a51b7e83648440b0a09774511c3c4dada61bad1c28d6affd23f9ec24055"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'operate' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensorflow/src/main/kotlin/space/kscience/kmath/tensorflow/TensorFlowAlgebra.kt",
      "language": "kotlin",
      "line": 118,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 116,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public fun StructureND<T>.operate(\n        value: T,\n        operation: (left: Operand<TT>, right: Operand<TT>) -> Operand<TT>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensorflow.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "56e9a97f8cfc5c30ade4c14c57e2ef72bfba6f2be4f35d6b0734ee955bccd677"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'graph' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensorflow/src/main/kotlin/space/kscience/kmath/tensorflow/TensorFlowAlgebra.kt",
      "language": "kotlin",
      "line": 53,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 51,
        "length": 9,
        "offset": 63,
        "surroundingCode": " */\npublic abstract class TensorFlowOutput<T, TT : TType>(\n    protected val graph: Graph,\n    output: Output<TT>,\n) : TensorFlowTensor<T> {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensorflow.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "2f817f8186d95c03255d705b6c03d522d224a6cd04f17f297552f4f9f876f1f1"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'operate' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensorflow/src/main/kotlin/space/kscience/kmath/tensorflow/TensorFlowAlgebra.kt",
      "language": "kotlin",
      "line": 109,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 107,
        "length": 6,
        "offset": 11,
        "surroundingCode": "    }\n\n    public fun T.operate(\n        other: StructureND<T>,\n        operation: (left: Operand<TT>, right: Operand<TT>) -> Operand<TT>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensorflow.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "64f085852e6d564d4c8629fb6e0805f08443b808b39ae2316d7ba632a87cfd1b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'bySigma' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-optimization/src/commonMain/kotlin/space/kscience/kmath/optimization/XYFit.kt",
      "language": "kotlin",
      "line": 58,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 56,
        "length": 6,
        "offset": 39,
        "surroundingCode": "\n    public companion object {\n        public fun bySigma(sigmaSymbol: Symbol): PointWeight = object : PointWeight {\n            override fun weight(problem: XYFit, index: Int): DifferentiableExpression<Double> =\n                object : DifferentiableExpression<Double> {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-optimization.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "0e1dce3c8c0e6d73bb8c036e1db9509c6f88c6c795479011040a654db416c1ef"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'model' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-optimization/src/commonMain/kotlin/space/kscience/kmath/optimization/OptimizationBuilder.kt",
      "language": "kotlin",
      "line": 74,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 72,
        "length": 6,
        "offset": 101,
        "surroundingCode": "public class XYOptimizationBuilder(\n    public val data: XYColumnarData<Double, Double, Double>,\n    public val model: DifferentiableExpression<Double>,\n) : OptimizationBuilder<Double, XYFit>() {\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-optimization.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "2205ce97df95abac13cc0877ff38dcc592163a1d671541c7cf9d4bcf76b8ddab"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'pointToCurveDistance' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-optimization/src/commonMain/kotlin/space/kscience/kmath/optimization/OptimizationBuilder.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 75,
        "length": 6,
        "offset": 48,
        "surroundingCode": ") : OptimizationBuilder<Double, XYFit>() {\n\n    public var pointToCurveDistance: PointToCurveDistance = PointToCurveDistance.byY\n    public var pointWeight: PointWeight = PointWeight.byYSigma\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-optimization.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "4c49048f574d1bba65ffba2f241bfaf6fd884df82fbc7ed27db44445395bc8e1"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'pointWeight' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-optimization/src/commonMain/kotlin/space/kscience/kmath/optimization/OptimizationBuilder.kt",
      "language": "kotlin",
      "line": 78,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 76,
        "length": 6,
        "offset": 90,
        "surroundingCode": "\n    public var pointToCurveDistance: PointToCurveDistance = PointToCurveDistance.byY\n    public var pointWeight: PointWeight = PointWeight.byYSigma\n\n    override fun build(): XYFit = XYFit("
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-optimization.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "5a7ce532a621725ed00d919a1920833d245f1d7d832d6370239f55a47733f77e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "Reports redundant `import` statements.\n\nDefault and unused imports can be safely removed.\n\n**Example:**\n\n\n      import kotlin.*\n      import kotlin.collections.*\n      import kotlin.comparisons.*\n      import kotlin.io.*\n      import kotlin.ranges.*\n      import kotlin.sequences.*\n      import kotlin.text.*\n\n      // jvm specific\n      import java.lang.*\n      import kotlin.jvm.*\n\n      // js specific\n      import kotlin.js.*\n\n      import java.io.* // this import is unused and could be removed\n      import java.util.*\n\n      fun foo(list: ArrayList<String>) {\n          list.add(\"\")\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/codegenUtils.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 1,
      "length": 43,
      "code": {
        "startLine": 9,
        "length": 43,
        "offset": 103,
        "surroundingCode": "import org.objectweb.asm.commons.InstructionAdapter\nimport space.kscience.kmath.expressions.Expression\nimport space.kscience.kmath.expressions.MST\nimport kotlin.contracts.InvocationKind\nimport kotlin.contracts.contract"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": "4e5b906e1463e19b4c52ae7d1a5ed9b952c105e92ec0c54faa5682daa433df47"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "Reports redundant `import` statements.\n\nDefault and unused imports can be safely removed.\n\n**Example:**\n\n\n      import kotlin.*\n      import kotlin.collections.*\n      import kotlin.comparisons.*\n      import kotlin.io.*\n      import kotlin.ranges.*\n      import kotlin.sequences.*\n      import kotlin.text.*\n\n      // jvm specific\n      import java.lang.*\n      import kotlin.jvm.*\n\n      // js specific\n      import kotlin.js.*\n\n      import java.io.* // this import is unused and could be removed\n      import java.util.*\n\n      fun foo(list: ArrayList<String>) {\n          list.add(\"\")\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/GenericAsmBuilder.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 1,
      "length": 40,
      "code": {
        "startLine": 14,
        "length": 40,
        "offset": 62,
        "surroundingCode": "import java.lang.invoke.MethodType\nimport java.nio.file.Paths\nimport java.util.stream.Collectors.toMap\nimport kotlin.contracts.InvocationKind\nimport kotlin.contracts.contract"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": "a3380d5058c1cc61f6cdd40b643b95a55958a32ee61ba8fed64fdf694e158b3c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "Reports redundant `import` statements.\n\nDefault and unused imports can be safely removed.\n\n**Example:**\n\n\n      import kotlin.*\n      import kotlin.collections.*\n      import kotlin.comparisons.*\n      import kotlin.io.*\n      import kotlin.ranges.*\n      import kotlin.sequences.*\n      import kotlin.text.*\n\n      // jvm specific\n      import java.lang.*\n      import kotlin.jvm.*\n\n      // js specific\n      import kotlin.js.*\n\n      import java.io.* // this import is unused and could be removed\n      import java.util.*\n\n      fun foo(list: ArrayList<String>) {\n          list.add(\"\")\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jsMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 1,
      "length": 46,
      "code": {
        "startLine": 11,
        "length": 46,
        "offset": 73,
        "surroundingCode": "import kotlinx.benchmark.State\nimport space.kscience.kmath.expressions.*\nimport space.kscience.kmath.operations.Algebra\nimport space.kscience.kmath.operations.DoubleField\nimport space.kscience.kmath.operations.bindSymbol"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jsMain",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": "7c1ea7cc3416fcd6f876e51d6d5428d70e6324f060702552fe87e612265db335"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "Reports redundant `import` statements.\n\nDefault and unused imports can be safely removed.\n\n**Example:**\n\n\n      import kotlin.*\n      import kotlin.collections.*\n      import kotlin.comparisons.*\n      import kotlin.io.*\n      import kotlin.ranges.*\n      import kotlin.sequences.*\n      import kotlin.text.*\n\n      // jvm specific\n      import java.lang.*\n      import kotlin.jvm.*\n\n      // js specific\n      import kotlin.js.*\n\n      import java.io.* // this import is unused and could be removed\n      import java.util.*\n\n      fun foo(list: ArrayList<String>) {\n          list.add(\"\")\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/DoubleBufferOps.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 1,
      "length": 49,
      "code": {
        "startLine": 7,
        "length": 49,
        "offset": 42,
        "surroundingCode": "\nimport space.kscience.kmath.linear.Point\nimport space.kscience.kmath.misc.UnstableKMathAPI\nimport space.kscience.kmath.structures.Buffer\nimport space.kscience.kmath.structures.BufferFactory"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": "20d4474d362901c03e5ace399f9e97379725913be5ced59bf19979c670c73c12"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "Reports redundant `import` statements.\n\nDefault and unused imports can be safely removed.\n\n**Example:**\n\n\n      import kotlin.*\n      import kotlin.collections.*\n      import kotlin.comparisons.*\n      import kotlin.io.*\n      import kotlin.ranges.*\n      import kotlin.sequences.*\n      import kotlin.text.*\n\n      // jvm specific\n      import java.lang.*\n      import kotlin.jvm.*\n\n      // js specific\n      import kotlin.js.*\n\n      import java.io.* // this import is unused and could be removed\n      import java.util.*\n\n      fun foo(list: ArrayList<String>) {\n          list.add(\"\")\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/DoubleBufferField.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 1,
      "length": 49,
      "code": {
        "startLine": 6,
        "length": 49,
        "offset": 41,
        "surroundingCode": "package space.kscience.kmath.operations\n\nimport space.kscience.kmath.misc.UnstableKMathAPI\nimport space.kscience.kmath.operations.DoubleField.pow\nimport space.kscience.kmath.structures.Buffer"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": "11b01e50d7032993e91624b94906a62d27da9f71db74de0f8d7cb4fa2e50bb66"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "Reports redundant `import` statements.\n\nDefault and unused imports can be safely removed.\n\n**Example:**\n\n\n      import kotlin.*\n      import kotlin.collections.*\n      import kotlin.comparisons.*\n      import kotlin.io.*\n      import kotlin.ranges.*\n      import kotlin.sequences.*\n      import kotlin.text.*\n\n      // jvm specific\n      import java.lang.*\n      import kotlin.jvm.*\n\n      // js specific\n      import kotlin.js.*\n\n      import java.io.* // this import is unused and could be removed\n      import java.util.*\n\n      fun foo(list: ArrayList<String>) {\n          list.add(\"\")\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/samplers/ZigguratNormalizedGaussianSampler.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 1,
      "length": 43,
      "code": {
        "startLine": 7,
        "length": 43,
        "offset": 56,
        "surroundingCode": "\nimport space.kscience.kmath.chains.BlockingDoubleChain\nimport space.kscience.kmath.misc.toIntExact\nimport space.kscience.kmath.stat.RandomGenerator\nimport space.kscience.kmath.structures.DoubleBuffer"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": "9f8268e56e0352b3ed5dfe5b9504598978cc5c6ecfbd734de3078a99f115ed4f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "Reports redundant `import` statements.\n\nDefault and unused imports can be safely removed.\n\n**Example:**\n\n\n      import kotlin.*\n      import kotlin.collections.*\n      import kotlin.comparisons.*\n      import kotlin.io.*\n      import kotlin.ranges.*\n      import kotlin.sequences.*\n      import kotlin.text.*\n\n      // jvm specific\n      import java.lang.*\n      import kotlin.jvm.*\n\n      // js specific\n      import kotlin.js.*\n\n      import java.io.* // this import is unused and could be removed\n      import java.util.*\n\n      fun foo(list: ArrayList<String>) {\n          list.add(\"\")\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/random/CMRandomGeneratorWrapper.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 1,
      "length": 51,
      "code": {
        "startLine": 7,
        "length": 51,
        "offset": 39,
        "surroundingCode": "\nimport kotlinx.coroutines.runBlocking\nimport space.kscience.kmath.misc.PerformancePitfall\nimport space.kscience.kmath.samplers.GaussianSampler\nimport space.kscience.kmath.misc.toIntExact"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": "98408430b12fadee2dabab29c5087809ce6fa50b5d1ab2a23ccdae02d888cf85"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unnecessary local variable",
  "severity": "Moderate",
  "comment": "Variable is same as 'boxed' and can be inlined",
  "detailsInfo": "Reports local variables that used only in the very next `return` statement or exact copies of other variables.\n\nSuch variables can be safely inlined to make the code more clear.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/GenericAsmBuilder.kt",
      "language": "kotlin",
      "line": 237,
      "offset": 17,
      "length": 1,
      "code": {
        "startLine": 235,
        "length": 1,
        "offset": 31,
        "surroundingCode": "            }\n\n            val r = boxed\n\n            invokeMethodVisitor.invokestatic("
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "UnnecessaryVariable"
  },
  "hash": "7c935f2a8eb8737522bf870baa9fd966c7d3a8db6e3addc57e35d620a14486b4"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unnecessary local variable",
  "severity": "Moderate",
  "comment": "Variable used only in following return and can be inlined",
  "detailsInfo": "Reports local variables that used only in the very next `return` statement or exact copies of other variables.\n\nSuch variables can be safely inlined to make the code more clear.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-optimization/src/commonMain/kotlin/space/kscience/kmath/optimization/QowOptimizer.kt",
      "language": "kotlin",
      "line": 241,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 239,
        "length": 5,
        "offset": 23,
        "surroundingCode": "        }\n\n        val covar = solver.inverse(getEqDerivValues())\n        //TODO fix eigenvalues check\n//        val decomposition = EigenDecomposition(covar.matrix)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-optimization.commonMain",
    "inspectionName": "UnnecessaryVariable"
  },
  "hash": "968fe03733957d6e0200df70fc34899b0583a88768def354253c6deeefacffd7"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FFT' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/transform/Transformations.kt",
      "language": "kotlin",
      "line": 82,
      "offset": 34,
      "length": 3,
      "code": {
        "startLine": 80,
        "length": 3,
        "offset": 50,
        "surroundingCode": " */\n@FlowPreview\npublic fun Flow<Buffer<Complex>>.FFT(\n    normalization: DftNormalization = DftNormalization.STANDARD,\n    direction: TransformType = TransformType.FORWARD,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "FunctionName"
  },
  "hash": "24bd9403b187aeb69af0dafb290423dbeb3f4e06440841550f4fdff07f6830cc"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FFT' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/transform/Transformations.kt",
      "language": "kotlin",
      "line": 92,
      "offset": 33,
      "length": 3,
      "code": {
        "startLine": 90,
        "length": 3,
        "offset": 65,
        "surroundingCode": "@FlowPreview\n@JvmName(\"realFFT\")\npublic fun Flow<Buffer<Double>>.FFT(\n    normalization: DftNormalization = DftNormalization.STANDARD,\n    direction: TransformType = TransformType.FORWARD,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "FunctionName"
  },
  "hash": "419df0fdbe06ccc66f72890fceaab16c8b57ad4333be11827059f9e51d819feb"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FFT' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/transform/Transformations.kt",
      "language": "kotlin",
      "line": 105,
      "offset": 25,
      "length": 3,
      "code": {
        "startLine": 103,
        "length": 3,
        "offset": 57,
        "surroundingCode": "@FlowPreview\n@JvmName(\"realFFT\")\npublic fun Flow<Double>.FFT(\n    bufferSize: Int = Int.MAX_VALUE,\n    normalization: DftNormalization = DftNormalization.STANDARD,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "FunctionName"
  },
  "hash": "82059b660145de2069a865d550388ba1f5243b51d5db99294e14c68e865f6fa4"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'PiecewisePolynomial' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-functions/src/commonMain/kotlin/space/kscience/kmath/functions/Piecewise.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 32,
      "length": 19,
      "code": {
        "startLine": 38,
        "length": 19,
        "offset": 106,
        "surroundingCode": " */\n@PerformancePitfall(\"findPiece method of resulting piecewise is slow\")\npublic fun <T : Comparable<T>> PiecewisePolynomial(\n    pieces: Collection<Pair<ClosedRange<T>, Polynomial<T>>>,\n): PiecewisePolynomial<T> = object : PiecewisePolynomial<T> {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-functions.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "265a274cad2649e1614374c145cf6f53ef97703b5756ef3ec56e2ddcd7968935"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'PiecewisePolynomial' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-functions/src/commonMain/kotlin/space/kscience/kmath/functions/Piecewise.kt",
      "language": "kotlin",
      "line": 111,
      "offset": 32,
      "length": 19,
      "code": {
        "startLine": 109,
        "length": 19,
        "offset": 74,
        "surroundingCode": " * A builder for [PiecewisePolynomial]\n */\npublic fun <T : Comparable<T>> PiecewisePolynomial(\n    startingPoint: T,\n    builder: PiecewiseBuilder<T>.() -> Unit,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-functions.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9e33149db72a7c522d1426963d6db6bd024e72d28cf5cf98ef055d43bcbe601b"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FunctionOptimization' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-optimization/src/commonMain/kotlin/space/kscience/kmath/optimization/OptimizationBuilder.kt",
      "language": "kotlin",
      "line": 42,
      "offset": 16,
      "length": 20,
      "code": {
        "startLine": 40,
        "length": 20,
        "offset": 18,
        "surroundingCode": "}\n\npublic fun <T> FunctionOptimization(\n    expression: DifferentiableExpression<T>,\n    builder: FunctionOptimizationBuilder<T>.() -> Unit,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-optimization.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "ae4c2a91a57dd17f6b5a7a93699a77ffa4377ef38406494f92e972481143a64f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'XYOptimization' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-optimization/src/commonMain/kotlin/space/kscience/kmath/optimization/OptimizationBuilder.kt",
      "language": "kotlin",
      "line": 89,
      "offset": 12,
      "length": 14,
      "code": {
        "startLine": 87,
        "length": 14,
        "offset": 14,
        "surroundingCode": "}\n\npublic fun XYOptimization(\n    data: XYColumnarData<Double, Double, Double>,\n    model: DifferentiableExpression<Double>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-optimization.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "f9974beb9596b4299e0542362525e065fe6f03fc6ca96eef56113c020afb6201"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "examples/src/main/kotlin/space/kscience/kmath/structures/NDField.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 19,
        "length": 8,
        "offset": 77,
        "surroundingCode": "\ninternal inline fun measureAndPrint(title: String, block: () -> Unit) {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    val time = measureTimeMillis(block)\n    println(\"$title completed in $time millis\")"
      }
    }
  ],
  "attributes": {
    "module": "kmath.examples.main",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "17d05d85b95158ee6dcf290bc8860008b49ef9b3a79f8a38e1468943275d4cad"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "examples/src/main/kotlin/space/kscience/kmath/structures/NDField.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 16,
      "length": 12,
      "code": {
        "startLine": 19,
        "length": 12,
        "offset": 88,
        "surroundingCode": "\ninternal inline fun measureAndPrint(title: String, block: () -> Unit) {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    val time = measureTimeMillis(block)\n    println(\"$title completed in $time millis\")"
      }
    }
  ],
  "attributes": {
    "module": "kmath.examples.main",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "90149e2264899ba85c3c9e1f40b77e2d32c9f3eeab5db454fc113c74ddd28a57"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "examples/src/main/kotlin/space/kscience/kmath/structures/NDField.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 36,
      "length": 14,
      "code": {
        "startLine": 19,
        "length": 14,
        "offset": 108,
        "surroundingCode": "\ninternal inline fun measureAndPrint(title: String, block: () -> Unit) {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    val time = measureTimeMillis(block)\n    println(\"$title completed in $time millis\")"
      }
    }
  ],
  "attributes": {
    "module": "kmath.examples.main",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "d9b8eb65f9486cf8e787d1d226db8bf7b7b5bfd9aa101b248a08b2d18c1f2f50"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "examples/src/main/kotlin/space/kscience/kmath/structures/NDField.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 51,
      "length": 12,
      "code": {
        "startLine": 19,
        "length": 12,
        "offset": 123,
        "surroundingCode": "\ninternal inline fun measureAndPrint(title: String, block: () -> Unit) {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    val time = measureTimeMillis(block)\n    println(\"$title completed in $time millis\")"
      }
    }
  ],
  "attributes": {
    "module": "kmath.examples.main",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "ab8f5d31434d01826df3e7895ca8116abdfa72b47243fd47e271eddf9f40a8f0"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[UNRESOLVED_REFERENCE] Unresolved reference: emitter",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/stream/stream.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 38,
      "length": 7,
      "code": {
        "startLine": 6,
        "length": 7,
        "offset": 83,
        "surroundingCode": "package space.kscience.kmath.internal.stream\n\nimport space.kscience.kmath.internal.emitter.Emitter\n\ninternal open external class Stream : Emitter {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "a9c4ab902ce2787ebd1eceffa8ea811c83d40fa33eca9d3bc856f1db6c70d9df"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[UNRESOLVED_REFERENCE] Unresolved reference: Emitter",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/stream/stream.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 39,
      "length": 7,
      "code": {
        "startLine": 8,
        "length": 7,
        "offset": 92,
        "surroundingCode": "import space.kscience.kmath.internal.emitter.Emitter\n\ninternal open external class Stream : Emitter {\n    open fun pipe(dest: Any, options: Any): Any\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "93a5ba92caaf6b46901ff1c8155c6fd4e807e10595e1a6e9ececda35bb8daee6"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/codegenUtils.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 44,
        "length": 8,
        "offset": 121,
        "surroundingCode": " */\ninternal inline fun MethodVisitor.instructionAdapter(block: InstructionAdapter.() -> Unit): InstructionAdapter {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return instructionAdapter().apply(block)\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "b59529dfe6a12d9326d8b9789992bd1ca7a1a4a6333b8a5d7cf2dfec40c97ac3"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/codegenUtils.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 16,
      "length": 12,
      "code": {
        "startLine": 44,
        "length": 12,
        "offset": 132,
        "surroundingCode": " */\ninternal inline fun MethodVisitor.instructionAdapter(block: InstructionAdapter.() -> Unit): InstructionAdapter {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return instructionAdapter().apply(block)\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "ea2808a172f557d9e2ea9eb8a6017e8464b472ee720b086ce07581e28547a216"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/codegenUtils.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 36,
      "length": 14,
      "code": {
        "startLine": 44,
        "length": 14,
        "offset": 152,
        "surroundingCode": " */\ninternal inline fun MethodVisitor.instructionAdapter(block: InstructionAdapter.() -> Unit): InstructionAdapter {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return instructionAdapter().apply(block)\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "75b4469aef95c06c37e8e141a1508a668d0a3a0a3f6a15f4397c98f56daf57c7"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/codegenUtils.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 51,
      "length": 12,
      "code": {
        "startLine": 44,
        "length": 12,
        "offset": 167,
        "surroundingCode": " */\ninternal inline fun MethodVisitor.instructionAdapter(block: InstructionAdapter.() -> Unit): InstructionAdapter {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return instructionAdapter().apply(block)\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "bcf9923f403da0559177ae0c001ae4a9f3b6d0fbfc453cb97eaeeef74cb5a4e4"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/codegenUtils.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 27,
        "length": 8,
        "offset": 95,
        "surroundingCode": " */\ninternal inline fun <reified T> T.wrapToArrayIf(predicate: (T) -> Boolean): Array<T> {\n    contract { callsInPlace(predicate, InvocationKind.EXACTLY_ONCE) }\n    return if (predicate(this)) arrayOf(this) else emptyArray()\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "88ec60c94c1a1b9ca1fdd5a08e28cbfc6048c4daf5a6629774ebec79d330e4da"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/codegenUtils.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 16,
      "length": 12,
      "code": {
        "startLine": 27,
        "length": 12,
        "offset": 106,
        "surroundingCode": " */\ninternal inline fun <reified T> T.wrapToArrayIf(predicate: (T) -> Boolean): Array<T> {\n    contract { callsInPlace(predicate, InvocationKind.EXACTLY_ONCE) }\n    return if (predicate(this)) arrayOf(this) else emptyArray()\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "261d781f1c695272b83647b0c33ce7ae5acabc72ec1a19cc7eaf7d766f4b63c3"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/codegenUtils.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 40,
      "length": 14,
      "code": {
        "startLine": 27,
        "length": 14,
        "offset": 130,
        "surroundingCode": " */\ninternal inline fun <reified T> T.wrapToArrayIf(predicate: (T) -> Boolean): Array<T> {\n    contract { callsInPlace(predicate, InvocationKind.EXACTLY_ONCE) }\n    return if (predicate(this)) arrayOf(this) else emptyArray()\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "7f6b8254e95ce8ae4f8662c3dda16e258a72d4be359d5dc6594d83644e70db88"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/codegenUtils.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 55,
      "length": 12,
      "code": {
        "startLine": 27,
        "length": 12,
        "offset": 145,
        "surroundingCode": " */\ninternal inline fun <reified T> T.wrapToArrayIf(predicate: (T) -> Boolean): Array<T> {\n    contract { callsInPlace(predicate, InvocationKind.EXACTLY_ONCE) }\n    return if (predicate(this)) arrayOf(this) else emptyArray()\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "b04e29fe397cbe87363897c55e6a937222f0c0e867afab37113db423bf688826"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/codegenUtils.kt",
      "language": "kotlin",
      "line": 96,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 94,
        "length": 8,
        "offset": 58,
        "surroundingCode": "    block: FieldVisitor.() -> Unit,\n): FieldVisitor {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return visitField(access, name, descriptor, signature, value).apply(block)\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "536430f48265921546d3c7df27f7b50875538175e55f5970cee116da2d930e65"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/codegenUtils.kt",
      "language": "kotlin",
      "line": 96,
      "offset": 16,
      "length": 12,
      "code": {
        "startLine": 94,
        "length": 12,
        "offset": 69,
        "surroundingCode": "    block: FieldVisitor.() -> Unit,\n): FieldVisitor {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return visitField(access, name, descriptor, signature, value).apply(block)\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "449444d8675f251c2fece43e9807f2ed8b6b616737f7ed86372573f63c2e10a6"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/codegenUtils.kt",
      "language": "kotlin",
      "line": 96,
      "offset": 36,
      "length": 14,
      "code": {
        "startLine": 94,
        "length": 14,
        "offset": 89,
        "surroundingCode": "    block: FieldVisitor.() -> Unit,\n): FieldVisitor {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return visitField(access, name, descriptor, signature, value).apply(block)\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "5952eb70c8455d2a8c5d895a63dd7d88f95c253fecb4e7050e91c7b8076e113a"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/codegenUtils.kt",
      "language": "kotlin",
      "line": 96,
      "offset": 51,
      "length": 12,
      "code": {
        "startLine": 94,
        "length": 12,
        "offset": 104,
        "surroundingCode": "    block: FieldVisitor.() -> Unit,\n): FieldVisitor {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return visitField(access, name, descriptor, signature, value).apply(block)\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "3dcdd41c18a19350e71bc7133ffb43f6de6bafa4f2f912f6ec2a18880644bd00"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/codegenUtils.kt",
      "language": "kotlin",
      "line": 79,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 77,
        "length": 8,
        "offset": 120,
        "surroundingCode": "@Suppress(\"FunctionName\")\ninternal inline fun ClassWriter(flags: Int, block: ClassWriter.() -> Unit): ClassWriter {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return ClassWriter(flags).apply(block)\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "39467789c3f01c82461397c11a72e696da718fa2c074746d7acc5b0d13e5c584"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/codegenUtils.kt",
      "language": "kotlin",
      "line": 79,
      "offset": 16,
      "length": 12,
      "code": {
        "startLine": 77,
        "length": 12,
        "offset": 131,
        "surroundingCode": "@Suppress(\"FunctionName\")\ninternal inline fun ClassWriter(flags: Int, block: ClassWriter.() -> Unit): ClassWriter {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return ClassWriter(flags).apply(block)\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "d9d7b10a84a9fa717298c51072910b10909c2b10605685d45536658c68529d00"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/codegenUtils.kt",
      "language": "kotlin",
      "line": 79,
      "offset": 36,
      "length": 14,
      "code": {
        "startLine": 77,
        "length": 14,
        "offset": 151,
        "surroundingCode": "@Suppress(\"FunctionName\")\ninternal inline fun ClassWriter(flags: Int, block: ClassWriter.() -> Unit): ClassWriter {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return ClassWriter(flags).apply(block)\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "e72e3c57568dae94032b6b22ac56178f57f6fea733935a6c2ed2e2d15a60e82c"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/codegenUtils.kt",
      "language": "kotlin",
      "line": 79,
      "offset": 51,
      "length": 12,
      "code": {
        "startLine": 77,
        "length": 12,
        "offset": 166,
        "surroundingCode": "@Suppress(\"FunctionName\")\ninternal inline fun ClassWriter(flags: Int, block: ClassWriter.() -> Unit): ClassWriter {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return ClassWriter(flags).apply(block)\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "9eb6f9366f7a6b54c47d47ae416bc9f36560c655d5ca0cb0880a55e1765cacb7"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/GenericAsmBuilder.kt",
      "language": "kotlin",
      "line": 286,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 284,
        "length": 8,
        "offset": 104,
        "surroundingCode": "\n    inline fun buildCall(function: Function<T>, parameters: GenericAsmBuilder<T>.() -> Unit) {\n        contract { callsInPlace(parameters, InvocationKind.EXACTLY_ONCE) }\n        val `interface` = function.javaClass.interfaces.first { Function::class.java in it.interfaces }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "581c57ef554a776b81278cdf708932805ad08d13fff421a75a304ff7e89d0941"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/GenericAsmBuilder.kt",
      "language": "kotlin",
      "line": 286,
      "offset": 20,
      "length": 12,
      "code": {
        "startLine": 284,
        "length": 12,
        "offset": 115,
        "surroundingCode": "\n    inline fun buildCall(function: Function<T>, parameters: GenericAsmBuilder<T>.() -> Unit) {\n        contract { callsInPlace(parameters, InvocationKind.EXACTLY_ONCE) }\n        val `interface` = function.javaClass.interfaces.first { Function::class.java in it.interfaces }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "85baa7f9d0ed585fd57baa70b7fb1aded1b65dede4985853de142a22407befbd"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/GenericAsmBuilder.kt",
      "language": "kotlin",
      "line": 286,
      "offset": 45,
      "length": 14,
      "code": {
        "startLine": 284,
        "length": 14,
        "offset": 140,
        "surroundingCode": "\n    inline fun buildCall(function: Function<T>, parameters: GenericAsmBuilder<T>.() -> Unit) {\n        contract { callsInPlace(parameters, InvocationKind.EXACTLY_ONCE) }\n        val `interface` = function.javaClass.interfaces.first { Function::class.java in it.interfaces }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "94ae6cb858dd33d3b433f43159b7cd301660ebfdb87bc27c544633ede3631d9b"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jvmMain/kotlin/space/kscience/kmath/asm/internal/GenericAsmBuilder.kt",
      "language": "kotlin",
      "line": 286,
      "offset": 60,
      "length": 12,
      "code": {
        "startLine": 284,
        "length": 12,
        "offset": 155,
        "surroundingCode": "\n    inline fun buildCall(function: Function<T>, parameters: GenericAsmBuilder<T>.() -> Unit) {\n        contract { callsInPlace(parameters, InvocationKind.EXACTLY_ONCE) }\n        val `interface` = function.javaClass.interfaces.first { Function::class.java in it.interfaces }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "ebcb21181e5d8e39d049c251e329ded4234aa442094f1e7de7832f73221bb16e"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/JafamaBenchmark.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 37,
        "length": 8,
        "offset": 91,
        "surroundingCode": "\nprivate inline fun invokeBenchmarks(blackhole: Blackhole, expr: (Double) -> Double) {\n    contract { callsInPlace(expr, InvocationKind.AT_LEAST_ONCE) }\n    val rng = Random(0)\n    repeat(1000000) { blackhole.consume(expr(rng.nextDouble())) }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "dd7212106184d4a3d2854198b1dde362056c5e9fa5e69e86df62d8c99f85352d"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/JafamaBenchmark.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 16,
      "length": 12,
      "code": {
        "startLine": 37,
        "length": 12,
        "offset": 102,
        "surroundingCode": "\nprivate inline fun invokeBenchmarks(blackhole: Blackhole, expr: (Double) -> Double) {\n    contract { callsInPlace(expr, InvocationKind.AT_LEAST_ONCE) }\n    val rng = Random(0)\n    repeat(1000000) { blackhole.consume(expr(rng.nextDouble())) }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "57bc357a11c855a72161737101744e617eb606549829135a6974b4f3279306b9"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/JafamaBenchmark.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 35,
      "length": 14,
      "code": {
        "startLine": 37,
        "length": 14,
        "offset": 121,
        "surroundingCode": "\nprivate inline fun invokeBenchmarks(blackhole: Blackhole, expr: (Double) -> Double) {\n    contract { callsInPlace(expr, InvocationKind.AT_LEAST_ONCE) }\n    val rng = Random(0)\n    repeat(1000000) { blackhole.consume(expr(rng.nextDouble())) }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "6cff98932291a4efdca2e25a9c9b377b40dc077741b80dfff14be99ea873c966"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/JafamaBenchmark.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 50,
      "length": 13,
      "code": {
        "startLine": 37,
        "length": 13,
        "offset": 136,
        "surroundingCode": "\nprivate inline fun invokeBenchmarks(blackhole: Blackhole, expr: (Double) -> Double) {\n    contract { callsInPlace(expr, InvocationKind.AT_LEAST_ONCE) }\n    val rng = Random(0)\n    repeat(1000000) { blackhole.consume(expr(rng.nextDouble())) }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "3b9d3bd60cfbc539a497ad82e9671d558781ac5f2df863deab8040ed12044ed5"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[MISSING_DEPENDENCY_CLASS] Cannot access class 'org.gradle.accessors.dm.RootProjectAccessor'. Check your module classpath for missing or conflicting dependencies",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/build.gradle.kts",
      "language": "kotlin",
      "line": 55,
      "offset": 32,
      "length": 8,
      "code": {
        "startLine": 53,
        "length": 8,
        "offset": 145,
        "surroundingCode": "                implementation(project(\":kmath-jafama\"))\n                implementation(project(\":kmath-multik\"))\n                implementation(projects.kmath.kmathTensorflow)\n                implementation(\"org.tensorflow:tensorflow-core-platform:0.4.0\")\n                implementation(\"org.nd4j:nd4j-native:1.0.0-M1\")"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "a3dceb3562fb4d2185dbfcc5cd19f91dd18062df7a1370789b0922b764feee87"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[UNRESOLVED_REFERENCE] Unresolved reference: kmath",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/build.gradle.kts",
      "language": "kotlin",
      "line": 55,
      "offset": 41,
      "length": 5,
      "code": {
        "startLine": 53,
        "length": 5,
        "offset": 154,
        "surroundingCode": "                implementation(project(\":kmath-jafama\"))\n                implementation(project(\":kmath-multik\"))\n                implementation(projects.kmath.kmathTensorflow)\n                implementation(\"org.tensorflow:tensorflow-core-platform:0.4.0\")\n                implementation(\"org.nd4j:nd4j-native:1.0.0-M1\")"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "837c9281f9f4b459a9ee6fc20dd32fd6c9105e55a2656e6237cc31eed548aa08"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/jvmMain/kotlin/space/kscience/kmath/memory/ByteBufferMemory.kt",
      "language": "kotlin",
      "line": 127,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 125,
        "length": 8,
        "offset": 151,
        "surroundingCode": "@Throws(IOException::class)\npublic inline fun <R> Path.readAsMemory(position: Long = 0, size: Long = Files.size(this), block: Memory.() -> R): R {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n\n    return FileChannel"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "99c3ab500eb4beb4226e48d27e4602c60e8ae22c4a8eb7aef6ab7c35d2bb42d1"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/jvmMain/kotlin/space/kscience/kmath/memory/ByteBufferMemory.kt",
      "language": "kotlin",
      "line": 127,
      "offset": 16,
      "length": 12,
      "code": {
        "startLine": 125,
        "length": 12,
        "offset": 162,
        "surroundingCode": "@Throws(IOException::class)\npublic inline fun <R> Path.readAsMemory(position: Long = 0, size: Long = Files.size(this), block: Memory.() -> R): R {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n\n    return FileChannel"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "e556d003b9ccaf42f3a9e8ab6ac3aba7a142614569ce84fa2e0a2150e9248c13"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/jvmMain/kotlin/space/kscience/kmath/memory/ByteBufferMemory.kt",
      "language": "kotlin",
      "line": 127,
      "offset": 36,
      "length": 14,
      "code": {
        "startLine": 125,
        "length": 14,
        "offset": 182,
        "surroundingCode": "@Throws(IOException::class)\npublic inline fun <R> Path.readAsMemory(position: Long = 0, size: Long = Files.size(this), block: Memory.() -> R): R {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n\n    return FileChannel"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "750b45d7a0ba85fb33e6076e07d154a28622ca3d9908d49804d43ba99c73fbf7"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[EXPERIMENTAL_API_USAGE_ERROR] This declaration is experimental and its usage must be marked with '@kotlin.contracts.ExperimentalContracts' or '@OptIn(kotlin.contracts.ExperimentalContracts::class)'",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/jvmMain/kotlin/space/kscience/kmath/memory/ByteBufferMemory.kt",
      "language": "kotlin",
      "line": 127,
      "offset": 51,
      "length": 12,
      "code": {
        "startLine": 125,
        "length": 12,
        "offset": 197,
        "surroundingCode": "@Throws(IOException::class)\npublic inline fun <R> Path.readAsMemory(position: Long = 0, size: Long = Files.size(this), block: Memory.() -> R): R {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n\n    return FileChannel"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.jvmMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "4631af08f943182291132de158a52f9b03cf85ab74d500bc126571ad5611d725"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[UNRESOLVED_REFERENCE] Unresolved reference: getDoubleAt",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/nativeMain/kotlin/space/kscience/kmath/memory/NativeMemory.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 54,
      "length": 11,
      "code": {
        "startLine": 30,
        "length": 11,
        "offset": 116,
        "surroundingCode": "        override val memory: Memory get() = this@NativeMemory\n\n        override fun readDouble(offset: Int) = array.getDoubleAt(position(offset))\n\n        override fun readFloat(offset: Int) = array.getFloatAt(position(offset))"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.nativeMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "bf37bcf24f2a59f9211761a0007856d8b4cda0b991e4d1a6853c24b8b4d7a801"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[UNRESOLVED_REFERENCE] Unresolved reference: getFloatAt",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/nativeMain/kotlin/space/kscience/kmath/memory/NativeMemory.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 53,
      "length": 10,
      "code": {
        "startLine": 32,
        "length": 10,
        "offset": 136,
        "surroundingCode": "        override fun readDouble(offset: Int) = array.getDoubleAt(position(offset))\n\n        override fun readFloat(offset: Int) = array.getFloatAt(position(offset))\n\n        override fun readByte(offset: Int) = array[position(offset)]"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.nativeMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "a6bdb74822ea1dfd693af45ab9da9e65b5404cff4889c5b3f4804fdb645ddc91"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[UNRESOLVED_REFERENCE] Unresolved reference: getShortAt",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/nativeMain/kotlin/space/kscience/kmath/memory/NativeMemory.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 53,
      "length": 10,
      "code": {
        "startLine": 36,
        "length": 10,
        "offset": 122,
        "surroundingCode": "        override fun readByte(offset: Int) = array[position(offset)]\n\n        override fun readShort(offset: Int) = array.getShortAt(position(offset))\n\n        override fun readInt(offset: Int) = array.getIntAt(position(offset))"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.nativeMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "2a443eff69f14478272ef5abfa83a72f01fc371fd5389cfc638b667f2388844e"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[UNRESOLVED_REFERENCE] Unresolved reference: getIntAt",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/nativeMain/kotlin/space/kscience/kmath/memory/NativeMemory.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 51,
      "length": 8,
      "code": {
        "startLine": 38,
        "length": 8,
        "offset": 132,
        "surroundingCode": "        override fun readShort(offset: Int) = array.getShortAt(position(offset))\n\n        override fun readInt(offset: Int) = array.getIntAt(position(offset))\n\n        override fun readLong(offset: Int) = array.getLongAt(position(offset))"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.nativeMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "a7c952c1be2ca9183ad3a7c4ea9267934f5056583e3d5b21de155167d3710528"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[UNRESOLVED_REFERENCE] Unresolved reference: getLongAt",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/nativeMain/kotlin/space/kscience/kmath/memory/NativeMemory.kt",
      "language": "kotlin",
      "line": 42,
      "offset": 52,
      "length": 9,
      "code": {
        "startLine": 40,
        "length": 9,
        "offset": 129,
        "surroundingCode": "        override fun readInt(offset: Int) = array.getIntAt(position(offset))\n\n        override fun readLong(offset: Int) = array.getLongAt(position(offset))\n\n        override fun release() {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.nativeMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "360347438d1ba0999961d9543096dab20ae421100136bef2216db90dbf2d3b4f"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[UNRESOLVED_REFERENCE] Unresolved reference: setDoubleAt",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/nativeMain/kotlin/space/kscience/kmath/memory/NativeMemory.kt",
      "language": "kotlin",
      "line": 55,
      "offset": 19,
      "length": 11,
      "code": {
        "startLine": 53,
        "length": 11,
        "offset": 82,
        "surroundingCode": "\n        override fun writeDouble(offset: Int, value: Double) {\n            array.setDoubleAt(position(offset), value)\n        }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.nativeMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "5c71a10ea0a0fb9488ce48eed6fd2755ec3d99d7dc904030ce01a16af36c0271"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[UNRESOLVED_REFERENCE] Unresolved reference: setFloatAt",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/nativeMain/kotlin/space/kscience/kmath/memory/NativeMemory.kt",
      "language": "kotlin",
      "line": 59,
      "offset": 19,
      "length": 10,
      "code": {
        "startLine": 57,
        "length": 10,
        "offset": 80,
        "surroundingCode": "\n        override fun writeFloat(offset: Int, value: Float) {\n            array.setFloatAt(position(offset), value)\n        }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.nativeMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "d5cc6c9ddb9a9e7ae92ff9ac85e93b1c88d341420422e1ce477f043018aaa9eb"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[UNRESOLVED_REFERENCE] Unresolved reference: setShortAt",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/nativeMain/kotlin/space/kscience/kmath/memory/NativeMemory.kt",
      "language": "kotlin",
      "line": 67,
      "offset": 19,
      "length": 10,
      "code": {
        "startLine": 65,
        "length": 10,
        "offset": 80,
        "surroundingCode": "\n        override fun writeShort(offset: Int, value: Short) {\n            array.setShortAt(position(offset), value)\n        }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.nativeMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "01c3c9897deaae5527c06bc30e2d6302b2721289ab80fef2b23143e268e2f55f"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[UNRESOLVED_REFERENCE] Unresolved reference: setIntAt",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/nativeMain/kotlin/space/kscience/kmath/memory/NativeMemory.kt",
      "language": "kotlin",
      "line": 71,
      "offset": 19,
      "length": 8,
      "code": {
        "startLine": 69,
        "length": 8,
        "offset": 76,
        "surroundingCode": "\n        override fun writeInt(offset: Int, value: Int) {\n            array.setIntAt(position(offset), value)\n        }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.nativeMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "2fa4e1763ede4893ae8326b8d918646d23fbc1454be5d406b910fd62cead3689"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[UNRESOLVED_REFERENCE] Unresolved reference: setLongAt",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/nativeMain/kotlin/space/kscience/kmath/memory/NativeMemory.kt",
      "language": "kotlin",
      "line": 75,
      "offset": 19,
      "length": 9,
      "code": {
        "startLine": 73,
        "length": 9,
        "offset": 78,
        "surroundingCode": "\n        override fun writeLong(offset: Int, value: Long) {\n            array.setLongAt(position(offset), value)\n        }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.nativeMain",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "e47262b9fb09f39cc5193746c18e02f6ca2ed1fdd0eca5d10d92a00f0d92e9ca"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[MISSING_DEPENDENCY_CLASS] Cannot access class 'org.gradle.accessors.dm.RootProjectAccessor'. Check your module classpath for missing or conflicting dependencies",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-histograms/build.gradle.kts",
      "language": "kotlin",
      "line": 20,
      "offset": 28,
      "length": 8,
      "code": {
        "startLine": 18,
        "length": 8,
        "offset": 105,
        "surroundingCode": "        dependencies {\n            implementation(project(\":kmath-for-real\"))\n            implementation(projects.kmath.kmathStat)\n            implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0\")\n        }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-histograms",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "473d91f93066ecc3b7ba4903e22d88fd9b20c21dd524d2877162fe07bccfc442"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Kotlin annotator",
  "severity": "Critical",
  "comment": "[UNRESOLVED_REFERENCE] Unresolved reference: kmath",
  "detailsInfo": "Allows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-histograms/build.gradle.kts",
      "language": "kotlin",
      "line": 20,
      "offset": 37,
      "length": 5,
      "code": {
        "startLine": 18,
        "length": 5,
        "offset": 114,
        "surroundingCode": "        dependencies {\n            implementation(project(\":kmath-for-real\"))\n            implementation(projects.kmath.kmathStat)\n            implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0\")\n        }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-histograms",
    "inspectionName": "KotlinAnnotator"
  },
  "hash": "db1db84826075199e67d3d3c7525c594f4fda5a3674a2dfeffb717dc422a2825"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Local variable naming convention",
  "severity": "Moderate",
  "comment": "Local variable name 'A_' should start with a lowercase letter",
  "detailsInfo": "Reports local variables that do not follow the naming conventions.\n\nYou can specify the required pattern in the inspection options.\n\n[Recommended naming conventions](https://kotlinlang.org/docs/coding-conventions.html#function-names): it has to start with a lowercase letter, use camel case and no underscores.\n\n**Example:**\n\n\n      fun fibonacciNumber(index: Int): Long = when(index) {\n          0 -> 0\n          else -> {\n              // does not follow naming conventions: contains underscore symbol (`_`)\n              var number_one: Long = 0\n              // does not follow naming conventions: starts with an uppercase letter\n              var NUMBER_TWO: Long = 1\n              // follow naming conventions: starts with a lowercase letter, use camel case and no underscores.\n              var numberThree: Long = number_one + NUMBER_TWO\n\n              for(currentIndex in 2..index) {\n                  numberThree = number_one + NUMBER_TWO\n                  number_one = NUMBER_TWO\n                  NUMBER_TWO = numberThree\n              }\n              numberThree\n          }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/DoubleTensorAlgebra.kt",
      "language": "kotlin",
      "line": 957,
      "offset": 13,
      "length": 2,
      "code": {
        "startLine": 955,
        "length": 2,
        "offset": 98,
        "surroundingCode": "    ): Pair<Structure1D<Double>, Structure2D<Double>> {\n        val n = this.shape[0]\n        val A_ = this.copy()\n        val V = eye(n)\n        val D = DoubleTensor(intArrayOf(n), (0 until this.rowNum).map { this[it, it] }.toDoubleArray()).as1D()"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "LocalVariableName"
  },
  "hash": "e013700b838867cfcc040e94b76de28b16e5b1180536a26bdf28e3639d06fd8e"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Local variable naming convention",
  "severity": "Moderate",
  "comment": "Local variable name 'V' should start with a lowercase letter",
  "detailsInfo": "Reports local variables that do not follow the naming conventions.\n\nYou can specify the required pattern in the inspection options.\n\n[Recommended naming conventions](https://kotlinlang.org/docs/coding-conventions.html#function-names): it has to start with a lowercase letter, use camel case and no underscores.\n\n**Example:**\n\n\n      fun fibonacciNumber(index: Int): Long = when(index) {\n          0 -> 0\n          else -> {\n              // does not follow naming conventions: contains underscore symbol (`_`)\n              var number_one: Long = 0\n              // does not follow naming conventions: starts with an uppercase letter\n              var NUMBER_TWO: Long = 1\n              // follow naming conventions: starts with a lowercase letter, use camel case and no underscores.\n              var numberThree: Long = number_one + NUMBER_TWO\n\n              for(currentIndex in 2..index) {\n                  numberThree = number_one + NUMBER_TWO\n                  number_one = NUMBER_TWO\n                  NUMBER_TWO = numberThree\n              }\n              numberThree\n          }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/DoubleTensorAlgebra.kt",
      "language": "kotlin",
      "line": 958,
      "offset": 13,
      "length": 1,
      "code": {
        "startLine": 956,
        "length": 1,
        "offset": 71,
        "surroundingCode": "        val n = this.shape[0]\n        val A_ = this.copy()\n        val V = eye(n)\n        val D = DoubleTensor(intArrayOf(n), (0 until this.rowNum).map { this[it, it] }.toDoubleArray()).as1D()\n        val B = DoubleTensor(intArrayOf(n), (0 until this.rowNum).map { this[it, it] }.toDoubleArray()).as1D()"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "LocalVariableName"
  },
  "hash": "f0b15525e853ffc968d80f56f6413070de9999c67c5dd6647114439803bc653c"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Local variable naming convention",
  "severity": "Moderate",
  "comment": "Local variable name 'D' should start with a lowercase letter",
  "detailsInfo": "Reports local variables that do not follow the naming conventions.\n\nYou can specify the required pattern in the inspection options.\n\n[Recommended naming conventions](https://kotlinlang.org/docs/coding-conventions.html#function-names): it has to start with a lowercase letter, use camel case and no underscores.\n\n**Example:**\n\n\n      fun fibonacciNumber(index: Int): Long = when(index) {\n          0 -> 0\n          else -> {\n              // does not follow naming conventions: contains underscore symbol (`_`)\n              var number_one: Long = 0\n              // does not follow naming conventions: starts with an uppercase letter\n              var NUMBER_TWO: Long = 1\n              // follow naming conventions: starts with a lowercase letter, use camel case and no underscores.\n              var numberThree: Long = number_one + NUMBER_TWO\n\n              for(currentIndex in 2..index) {\n                  numberThree = number_one + NUMBER_TWO\n                  number_one = NUMBER_TWO\n                  NUMBER_TWO = numberThree\n              }\n              numberThree\n          }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/DoubleTensorAlgebra.kt",
      "language": "kotlin",
      "line": 959,
      "offset": 13,
      "length": 1,
      "code": {
        "startLine": 957,
        "length": 1,
        "offset": 64,
        "surroundingCode": "        val A_ = this.copy()\n        val V = eye(n)\n        val D = DoubleTensor(intArrayOf(n), (0 until this.rowNum).map { this[it, it] }.toDoubleArray()).as1D()\n        val B = DoubleTensor(intArrayOf(n), (0 until this.rowNum).map { this[it, it] }.toDoubleArray()).as1D()\n        val Z = zeros(intArrayOf(n)).as1D()"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "LocalVariableName"
  },
  "hash": "8fb42d4ea0dc10970d37657558f7c1de832780bcae231ae6f2891a78e06bd1c2"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Local variable naming convention",
  "severity": "Moderate",
  "comment": "Local variable name 'B' should start with a lowercase letter",
  "detailsInfo": "Reports local variables that do not follow the naming conventions.\n\nYou can specify the required pattern in the inspection options.\n\n[Recommended naming conventions](https://kotlinlang.org/docs/coding-conventions.html#function-names): it has to start with a lowercase letter, use camel case and no underscores.\n\n**Example:**\n\n\n      fun fibonacciNumber(index: Int): Long = when(index) {\n          0 -> 0\n          else -> {\n              // does not follow naming conventions: contains underscore symbol (`_`)\n              var number_one: Long = 0\n              // does not follow naming conventions: starts with an uppercase letter\n              var NUMBER_TWO: Long = 1\n              // follow naming conventions: starts with a lowercase letter, use camel case and no underscores.\n              var numberThree: Long = number_one + NUMBER_TWO\n\n              for(currentIndex in 2..index) {\n                  numberThree = number_one + NUMBER_TWO\n                  number_one = NUMBER_TWO\n                  NUMBER_TWO = numberThree\n              }\n              numberThree\n          }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/DoubleTensorAlgebra.kt",
      "language": "kotlin",
      "line": 960,
      "offset": 13,
      "length": 1,
      "code": {
        "startLine": 958,
        "length": 1,
        "offset": 146,
        "surroundingCode": "        val V = eye(n)\n        val D = DoubleTensor(intArrayOf(n), (0 until this.rowNum).map { this[it, it] }.toDoubleArray()).as1D()\n        val B = DoubleTensor(intArrayOf(n), (0 until this.rowNum).map { this[it, it] }.toDoubleArray()).as1D()\n        val Z = zeros(intArrayOf(n)).as1D()\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "LocalVariableName"
  },
  "hash": "df07a7bc0a9618c0c4bb59e4a41791cf3f62af3c40a2434488900ba07aaae1a0"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Local variable naming convention",
  "severity": "Moderate",
  "comment": "Local variable name 'Z' should start with a lowercase letter",
  "detailsInfo": "Reports local variables that do not follow the naming conventions.\n\nYou can specify the required pattern in the inspection options.\n\n[Recommended naming conventions](https://kotlinlang.org/docs/coding-conventions.html#function-names): it has to start with a lowercase letter, use camel case and no underscores.\n\n**Example:**\n\n\n      fun fibonacciNumber(index: Int): Long = when(index) {\n          0 -> 0\n          else -> {\n              // does not follow naming conventions: contains underscore symbol (`_`)\n              var number_one: Long = 0\n              // does not follow naming conventions: starts with an uppercase letter\n              var NUMBER_TWO: Long = 1\n              // follow naming conventions: starts with a lowercase letter, use camel case and no underscores.\n              var numberThree: Long = number_one + NUMBER_TWO\n\n              for(currentIndex in 2..index) {\n                  numberThree = number_one + NUMBER_TWO\n                  number_one = NUMBER_TWO\n                  NUMBER_TWO = numberThree\n              }\n              numberThree\n          }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/DoubleTensorAlgebra.kt",
      "language": "kotlin",
      "line": 961,
      "offset": 13,
      "length": 1,
      "code": {
        "startLine": 959,
        "length": 1,
        "offset": 234,
        "surroundingCode": "        val D = DoubleTensor(intArrayOf(n), (0 until this.rowNum).map { this[it, it] }.toDoubleArray()).as1D()\n        val B = DoubleTensor(intArrayOf(n), (0 until this.rowNum).map { this[it, it] }.toDoubleArray()).as1D()\n        val Z = zeros(intArrayOf(n)).as1D()\n\n        // assume that buffered tensor is square matrix"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "LocalVariableName"
  },
  "hash": "3b1e34f1cbfb9c34dabc533b03d737b9432727f77ab2887ec534ea029d0dae14"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Explicit 'get' or 'set' call",
  "severity": "Info",
  "comment": "Should be replaced with indexing",
  "detailsInfo": "Reports explicit calls to `get` or `set` functions which can be replaced by an indexing operator `[]`.\n\n\nKotlin allows custom implementations for the predefined set of operators on types.\nTo overload an operator, you can mark the corresponding function with the `operator` modifier:\n\n\n      operator fun get(index: Int) {}\n      operator fun set(index: Int, value: Int) {}\n        \nThe functions above correspond to the indexing operator.\n\n**Example:**\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test().get(0) // replaceable 'get()'\n      }\n\nAfter the quick-fix is applied:\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test()[0]\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/data/XYColumnarData.kt",
      "language": "kotlin",
      "line": 68,
      "offset": 31,
      "length": 3,
      "code": {
        "startLine": 66,
        "length": 3,
        "offset": 74,
        "surroundingCode": "        Symbol.x -> x\n        Symbol.y -> y\n        else -> this@asXYData.get(symbol)\n    }\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "ReplaceGetOrSet"
  },
  "hash": "f7358e9df1f67d18666dbf2a1b1949275fa8f1394666db3a91e26bdd7a07a682"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Function returning Deferred directly",
  "severity": "Moderate",
  "comment": "Function returning Deferred with a name that does not end with Async",
  "detailsInfo": "Reports functions with the `kotlinx.coroutines.Deferred` return type.\n\n\nFunctions that use `Deferred` as return type should have a name with the `Async` suffix.\nOtherwise, it's recommended to mark a function as `suspend` and unwrap `Deferred` inside it.\n\n**Example:**\n\n\n      fun calcEverything(): Deferred<Int> {\n          return CompletableDeferred(42)\n      }\n\nAfter the quick-fix that adds the `Async` suffix applied:\n\n\n      fun calcEverythingAsync(): Deferred<Int> {\n          return CompletableDeferred(42)\n      }\n\nAfter the quick-fix that converts the function into a `suspend` one applied:\n\n\n      suspend fun calcEverything(): Int {\n          return CompletableDeferred(42).await()\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-coroutines/src/jvmMain/kotlin/space/kscience/kmath/structures/LazyStructureND.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 16,
      "length": 8,
      "code": {
        "startLine": 19,
        "length": 8,
        "offset": 85,
        "surroundingCode": "    private val cache: MutableMap<IntArray, Deferred<T>> = HashMap()\n\n    public fun deferred(index: IntArray): Deferred<T> = cache.getOrPut(index) {\n        scope.async(context = Dispatchers.Math) { function(index) }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-coroutines.jvmMain",
    "inspectionName": "DeferredIsResult"
  },
  "hash": "02a121176c028501545815144cd42336031555776f22f7d85c1bc15edf72b0aa"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Function returning Deferred directly",
  "severity": "Moderate",
  "comment": "Function returning Deferred with a name that does not end with Async",
  "detailsInfo": "Reports functions with the `kotlinx.coroutines.Deferred` return type.\n\n\nFunctions that use `Deferred` as return type should have a name with the `Async` suffix.\nOtherwise, it's recommended to mark a function as `suspend` and unwrap `Deferred` inside it.\n\n**Example:**\n\n\n      fun calcEverything(): Deferred<Int> {\n          return CompletableDeferred(42)\n      }\n\nAfter the quick-fix that adds the `Async` suffix applied:\n\n\n      fun calcEverythingAsync(): Deferred<Int> {\n          return CompletableDeferred(42)\n      }\n\nAfter the quick-fix that converts the function into a `suspend` one applied:\n\n\n      suspend fun calcEverything(): Int {\n          return CompletableDeferred(42).await()\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "kmath-coroutines/src/jvmMain/kotlin/space/kscience/kmath/structures/LazyStructureND.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 31,
      "length": 8,
      "code": {
        "startLine": 34,
        "length": 8,
        "offset": 33,
        "surroundingCode": "}\n\npublic fun <T> StructureND<T>.deferred(index: IntArray): Deferred<T> =\n    if (this is LazyStructureND<T>) deferred(index) else CompletableDeferred(get(index))\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-coroutines.jvmMain",
    "inspectionName": "DeferredIsResult"
  },
  "hash": "fb37223fee72b53d963f34fbe199181a13671d3437ecc971726f5ecefbbb59fe"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"same\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "examples/src/main/kotlin/space/kscience/kmath/structures/buffers.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 54,
      "length": 4,
      "code": {
        "startLine": 11,
        "length": 4,
        "offset": 102,
        "surroundingCode": "import space.kscience.kmath.operations.withSize\n\ninline fun <reified R : Any> MutableBuffer.Companion.same(\n    n: Int,\n    value: R"
      }
    }
  ],
  "attributes": {
    "module": "kmath.examples.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2946f263f7527fa436cad8b10fc3e04bbc89bb1ac0de107e393df3fd22e8f78e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type alias \"Generator\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/estree/internal/astring/astring.typealises.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 20,
      "length": 9,
      "code": {
        "startLine": 6,
        "length": 9,
        "offset": 73,
        "surroundingCode": "package space.kscience.kmath.estree.internal.astring\n\ninternal typealias Generator = Any\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "535a4598c8350e3e3a927c0faa3f3083b087cf86a8754d2fdfbc91d0767f4c95"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"version\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/base64/base64.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 20,
        "length": 7,
        "offset": 59,
        "surroundingCode": "import org.khronos.webgl.Uint8Array\n\ninternal external var version: Any\n\ninternal external var VERSION: Any"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e1a8c71cc80d80aec06bacea52ed7419e1b03b501dcdc71d220c9332af0375c5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"VERSION\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/base64/base64.kt",
      "language": "kotlin",
      "line": 24,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 22,
        "length": 7,
        "offset": 58,
        "surroundingCode": "internal external var version: Any\n\ninternal external var VERSION: Any\n\ninternal external var btoaPolyfill: (bin: String) -> String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1b6a91ab4b1f898eb66b4c512dc5c2cb6ea6fda42058457ef39c049ea103b3e2"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"btoaPolyfill\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/base64/base64.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 23,
      "length": 12,
      "code": {
        "startLine": 24,
        "length": 12,
        "offset": 58,
        "surroundingCode": "internal external var VERSION: Any\n\ninternal external var btoaPolyfill: (bin: String) -> String\n\ninternal external var _btoa: (bin: String) -> String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "33569be261382d0958bac860fa3bfe3fbcf37cdd5c3edb23b8944f2936b2ed7b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"_btoa\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/base64/base64.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 23,
      "length": 5,
      "code": {
        "startLine": 26,
        "length": 5,
        "offset": 83,
        "surroundingCode": "internal external var btoaPolyfill: (bin: String) -> String\n\ninternal external var _btoa: (bin: String) -> String\n\ninternal external var fromUint8Array: (u8a: Uint8Array, urlsafe: Boolean) -> String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "004e5235ab7b8292977ab8d6cfa83ae56e84769dbd3f5aef5b22b54d385d1333"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"fromUint8Array\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/base64/base64.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 23,
      "length": 14,
      "code": {
        "startLine": 28,
        "length": 14,
        "offset": 76,
        "surroundingCode": "internal external var _btoa: (bin: String) -> String\n\ninternal external var fromUint8Array: (u8a: Uint8Array, urlsafe: Boolean) -> String\n\ninternal external var utob: (u: String) -> String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ce14d7dc124bf765785adaef98f2537356722fd810d242ff67253db55b4e96b1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"utob\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/base64/base64.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 23,
      "length": 4,
      "code": {
        "startLine": 30,
        "length": 4,
        "offset": 107,
        "surroundingCode": "internal external var fromUint8Array: (u8a: Uint8Array, urlsafe: Boolean) -> String\n\ninternal external var utob: (u: String) -> String\n\ninternal external var encode: (src: String, urlsafe: Boolean) -> String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "706a2486243dbe35747925956307c215015fbd5ba9a44961f9fc9ae9ae2a4619"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"encode\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/base64/base64.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 32,
        "length": 6,
        "offset": 73,
        "surroundingCode": "internal external var utob: (u: String) -> String\n\ninternal external var encode: (src: String, urlsafe: Boolean) -> String\n\ninternal external var encodeURI: (src: String) -> String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6d2dc9dc156484b09eedfe6710afabfe8b12da4fa7839a388bd028d94856d2b6"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"encodeURI\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/base64/base64.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 23,
      "length": 9,
      "code": {
        "startLine": 34,
        "length": 9,
        "offset": 95,
        "surroundingCode": "internal external var encode: (src: String, urlsafe: Boolean) -> String\n\ninternal external var encodeURI: (src: String) -> String\n\ninternal external var btou: (b: String) -> String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f4c067432481ab5e7b554d67dd664476dc0acb8e00deb9d79a613acf80e1f464"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"btou\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/base64/base64.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 23,
      "length": 4,
      "code": {
        "startLine": 36,
        "length": 4,
        "offset": 80,
        "surroundingCode": "internal external var encodeURI: (src: String) -> String\n\ninternal external var btou: (b: String) -> String\n\ninternal external var atobPolyfill: (asc: String) -> String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "31fd736267a28fccb31bf82172661b4565fd93c87ead7c68ddfdbcfc0eeb1882"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"atobPolyfill\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/base64/base64.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 23,
      "length": 12,
      "code": {
        "startLine": 38,
        "length": 12,
        "offset": 73,
        "surroundingCode": "internal external var btou: (b: String) -> String\n\ninternal external var atobPolyfill: (asc: String) -> String\n\ninternal external var _atob: (asc: String) -> String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "567a1e579f6d38174f298251d623743c28dafbb5496f5fa2f49269475f538f85"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"_atob\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/base64/base64.kt",
      "language": "kotlin",
      "line": 42,
      "offset": 23,
      "length": 5,
      "code": {
        "startLine": 40,
        "length": 5,
        "offset": 83,
        "surroundingCode": "internal external var atobPolyfill: (asc: String) -> String\n\ninternal external var _atob: (asc: String) -> String\n\ninternal external var toUint8Array: (a: String) -> Uint8Array"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "9d353be0849689e3decd62c6bf258625797b94d7b3ab0fd55079141b39456994"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"decode\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/base64/base64.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 44,
        "length": 6,
        "offset": 85,
        "surroundingCode": "internal external var toUint8Array: (a: String) -> Uint8Array\n\ninternal external var decode: (src: String) -> String\n\ninternal external var isValid: (src: Any) -> Boolean"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "71e82be02876ae1584c9ab9e5d28cdedb0f2067770581fda79b9fccebe8ef632"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"isValid\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/base64/base64.kt",
      "language": "kotlin",
      "line": 48,
      "offset": 23,
      "length": 7,
      "code": {
        "startLine": 46,
        "length": 7,
        "offset": 77,
        "surroundingCode": "internal external var decode: (src: String) -> String\n\ninternal external var isValid: (src: Any) -> Boolean\n\ninternal external var extendString: () -> Unit"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e3793df0d0c817f9fc0a7f834f2a19ec47d80c429bf053ce6fcf669cd028acf9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"extendString\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/base64/base64.kt",
      "language": "kotlin",
      "line": 50,
      "offset": 23,
      "length": 12,
      "code": {
        "startLine": 48,
        "length": 12,
        "offset": 76,
        "surroundingCode": "internal external var isValid: (src: Any) -> Boolean\n\ninternal external var extendString: () -> Unit\n\ninternal external var extendUint8Array: () -> Unit"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e81d0459ce450b4521d616859e2ee1fd2831178a0e8917d76cb71dc1c044d2dd"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"extendUint8Array\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/base64/base64.kt",
      "language": "kotlin",
      "line": 52,
      "offset": 23,
      "length": 16,
      "code": {
        "startLine": 50,
        "length": 16,
        "offset": 70,
        "surroundingCode": "internal external var extendString: () -> Unit\n\ninternal external var extendUint8Array: () -> Unit\n\ninternal external var extendBuiltins: () -> Unit"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "9a3aca5a0db20f4f1f5e78301612118bcbadef81a19e778d79009532695d05ca"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"extendBuiltins\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/base64/base64.kt",
      "language": "kotlin",
      "line": 54,
      "offset": 23,
      "length": 14,
      "code": {
        "startLine": 52,
        "length": 14,
        "offset": 74,
        "surroundingCode": "internal external var extendUint8Array: () -> Unit\n\ninternal external var extendBuiltins: () -> Unit\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "453d2ef358351912049a5cfc7e3abe3471fce89f2ac965a6f10d81b25706b34b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"Stream\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/stream/stream.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 30,
      "length": 6,
      "code": {
        "startLine": 8,
        "length": 6,
        "offset": 83,
        "surroundingCode": "import space.kscience.kmath.internal.emitter.Emitter\n\ninternal open external class Stream : Emitter {\n    open fun pipe(dest: Any, options: Any): Any\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "668bbb7416adce89aa15ea248c4df726e6a4b1b50521af4d769cd7a29ebd559d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"pipe\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/stream/stream.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 14,
      "length": 4,
      "code": {
        "startLine": 9,
        "length": 4,
        "offset": 62,
        "surroundingCode": "\ninternal open external class Stream : Emitter {\n    open fun pipe(dest: Any, options: Any): Any\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e3cea71732bceaddafdeb2973b1b30a2848bbefeef26b0fc8bb9f2ce5fc09f5f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type alias \"RegExpMatchArray\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 20,
      "length": 16,
      "code": {
        "startLine": 10,
        "length": 16,
        "offset": 44,
        "surroundingCode": "import kotlin.js.RegExp\n\ninternal typealias RegExpMatchArray = Array<String>\n\ninternal typealias RegExpExecArray = Array<String>"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "bc21b52d75908d48a92f963e94e044b9b0897839270daa6274e73691e8e502e9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type alias \"RegExpExecArray\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 20,
      "length": 15,
      "code": {
        "startLine": 12,
        "length": 15,
        "offset": 72,
        "surroundingCode": "internal typealias RegExpMatchArray = Array<String>\n\ninternal typealias RegExpExecArray = Array<String>\n\ninternal external interface RegExpConstructor {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "de6d809fb0584147d8187798e953512c4d795f68b82eaf91b2ae06001445a047"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Interface \"RegExpConstructor\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 29,
      "length": 17,
      "code": {
        "startLine": 14,
        "length": 17,
        "offset": 80,
        "surroundingCode": "internal typealias RegExpExecArray = Array<String>\n\ninternal external interface RegExpConstructor {\n    @nativeInvoke\n    operator fun invoke(pattern: RegExp, flags: String = definedExternally): RegExp"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "59333c6c145cd031a6e1d25942cd1b7facfe3af87fb95cf68d6c608cf66b711b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"prototype\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 26,
        "length": 9,
        "offset": 75,
        "surroundingCode": "    @nativeInvoke\n    operator fun invoke(pattern: String): RegExp\n    var prototype: RegExp\n    var `$1`: String\n    var `$2`: String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3eb8cd2d9351f8161a5f2a16b5e1662b688d02e2f9544f7657ca6fd141c6fc42"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"$1\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 27,
        "length": 4,
        "offset": 83,
        "surroundingCode": "    operator fun invoke(pattern: String): RegExp\n    var prototype: RegExp\n    var `$1`: String\n    var `$2`: String\n    var `$3`: String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "24203885b85b042791a53f81ee733850e11dc277ef779c3dd7c917dd021e5efb"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"$2\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 28,
        "length": 4,
        "offset": 55,
        "surroundingCode": "    var prototype: RegExp\n    var `$1`: String\n    var `$2`: String\n    var `$3`: String\n    var `$4`: String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "9d5b27123b2c3990f877388a066c1698b244c8cd2a09b78de69206dcad06ac8b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"$3\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 29,
        "length": 4,
        "offset": 50,
        "surroundingCode": "    var `$1`: String\n    var `$2`: String\n    var `$3`: String\n    var `$4`: String\n    var `$5`: String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "bab865f96f09d563d5d7ff3f372539b27300c14fe56fb66ed67680c2fd40b682"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"$4\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 30,
        "length": 4,
        "offset": 50,
        "surroundingCode": "    var `$2`: String\n    var `$3`: String\n    var `$4`: String\n    var `$5`: String\n    var `$6`: String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d599ef6dbfd04c5a428859aaeac9575bdc6088235f377a0d2628b454b5bb32fc"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"$5\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 31,
        "length": 4,
        "offset": 50,
        "surroundingCode": "    var `$3`: String\n    var `$4`: String\n    var `$5`: String\n    var `$6`: String\n    var `$7`: String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "7d65fe0b9fb7ec06afba64697923fe2a044286093f4e28d59366f1ae7a53d174"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"$6\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 32,
        "length": 4,
        "offset": 50,
        "surroundingCode": "    var `$4`: String\n    var `$5`: String\n    var `$6`: String\n    var `$7`: String\n    var `$8`: String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "98c8aeb4793f2fdeb34a345dcc197f171ae5127d4446d0a3d436af84dd68e3c8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"$7\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 33,
        "length": 4,
        "offset": 50,
        "surroundingCode": "    var `$5`: String\n    var `$6`: String\n    var `$7`: String\n    var `$8`: String\n    var `$9`: String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0d55f7439642e4fe0ea78da9e59a49939ed3673e9bbcea06a971e3897e9c6f70"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"$8\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 34,
        "length": 4,
        "offset": 50,
        "surroundingCode": "    var `$6`: String\n    var `$7`: String\n    var `$8`: String\n    var `$9`: String\n    var lastMatch: String"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "26e2710dd3dea3a70ce5484fcf7b9cf09e10acb8600086a791eea4265a6e04d4"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"$9\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 35,
        "length": 4,
        "offset": 50,
        "surroundingCode": "    var `$7`: String\n    var `$8`: String\n    var `$9`: String\n    var lastMatch: String\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e8b95809bad1d228014791184ded74eee4fb0273000cfdf2d5d24f40d6733876"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"lastMatch\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 36,
        "length": 9,
        "offset": 50,
        "surroundingCode": "    var `$8`: String\n    var `$9`: String\n    var lastMatch: String\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "bbc2ece86fde5530b5b52b80da886366129281e8cabb4505425cd6ce7293685b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type parameter \"K\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 27,
      "length": 1,
      "code": {
        "startLine": 39,
        "length": 1,
        "offset": 29,
        "surroundingCode": "}\n\ninternal typealias Record<K, T> = Any\n\ninternal external interface ConcatArray<T> {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c9df0c5f5eaa97a86261a002d3a51468407f60660bc6fdce7febcce6a286612b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type parameter \"T\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 30,
      "length": 1,
      "code": {
        "startLine": 39,
        "length": 1,
        "offset": 32,
        "surroundingCode": "}\n\ninternal typealias Record<K, T> = Any\n\ninternal external interface ConcatArray<T> {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "030a0192eb01ced7cb22df2f5e5bb99a58daab91437720cb1f8444dc98c5f801"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Interface \"ConcatArray\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 43,
      "offset": 29,
      "length": 11,
      "code": {
        "startLine": 41,
        "length": 11,
        "offset": 67,
        "surroundingCode": "internal typealias Record<K, T> = Any\n\ninternal external interface ConcatArray<T> {\n    var length: Number\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e56ed5894b5bd525c992ac43ccb0aa3a19efffc0fba472ece62a04de70bfd588"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"length\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 44,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 42,
        "length": 6,
        "offset": 54,
        "surroundingCode": "\ninternal external interface ConcatArray<T> {\n    var length: Number\n\n    @nativeGetter"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b72af8a5846c32fcde6f5e79cff1f9ad1d62b581aab2be11f86fe613318cb48e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"join\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 51,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 49,
        "length": 4,
        "offset": 68,
        "surroundingCode": "    @nativeSetter\n    operator fun set(n: Number, value: T)\n    fun join(separator: String = definedExternally): String\n    fun slice(start: Number = definedExternally, end: Number = definedExternally): Array<T>\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "442e0cd5ba5445fc50ead23a11a85d51bc5a2140e3f926af19c79be3140d5648"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"slice\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 52,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 50,
        "length": 5,
        "offset": 110,
        "surroundingCode": "    operator fun set(n: Number, value: T)\n    fun join(separator: String = definedExternally): String\n    fun slice(start: Number = definedExternally, end: Number = definedExternally): Array<T>\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3945bee111163d4950d174226b150560db344aa741afb37c1ce2293e8a97cef3"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Interface \"ArrayConstructor\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 55,
      "offset": 29,
      "length": 16,
      "code": {
        "startLine": 53,
        "length": 16,
        "offset": 31,
        "surroundingCode": "}\n\ninternal external interface ArrayConstructor {\n    fun <T> from(iterable: Iterable<T>): Array<T>\n    fun <T> from(iterable: ArrayLike<T>): Array<T>"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "90437201d0d9730d68c13b94bd842dbcd1107bf745807d3694a72ede7f64a652"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"from\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 56,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 54,
        "length": 4,
        "offset": 60,
        "surroundingCode": "\ninternal external interface ArrayConstructor {\n    fun <T> from(iterable: Iterable<T>): Array<T>\n    fun <T> from(iterable: ArrayLike<T>): Array<T>\n    fun <T, U> from(iterable: Iterable<T>, mapfn: (v: T, k: Number) -> U, thisArg: Any = definedExternally): Array<U>"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1566dd2bb58887dab186a75b23fb2c8a310a6e3dcb84550fe0c5c68ea7195a0d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"from\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 57,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 55,
        "length": 4,
        "offset": 109,
        "surroundingCode": "internal external interface ArrayConstructor {\n    fun <T> from(iterable: Iterable<T>): Array<T>\n    fun <T> from(iterable: ArrayLike<T>): Array<T>\n    fun <T, U> from(iterable: Iterable<T>, mapfn: (v: T, k: Number) -> U, thisArg: Any = definedExternally): Array<U>\n    fun <T, U> from(iterable: Iterable<T>, mapfn: (v: T, k: Number) -> U): Array<U>"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "23a5d8b37550f440b635125c2b310782bf5dfc31b480644e84303c2d35682d20"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"from\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 58,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 56,
        "length": 4,
        "offset": 116,
        "surroundingCode": "    fun <T> from(iterable: Iterable<T>): Array<T>\n    fun <T> from(iterable: ArrayLike<T>): Array<T>\n    fun <T, U> from(iterable: Iterable<T>, mapfn: (v: T, k: Number) -> U, thisArg: Any = definedExternally): Array<U>\n    fun <T, U> from(iterable: Iterable<T>, mapfn: (v: T, k: Number) -> U): Array<U>\n    fun <T, U> from(iterable: ArrayLike<T>, mapfn: (v: T, k: Number) -> U, thisArg: Any = definedExternally): Array<U>"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c487df8f62e87fe861eefb45671e89bb38410700ee64aebde842d39091bcace3"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"from\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 59,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 57,
        "length": 4,
        "offset": 184,
        "surroundingCode": "    fun <T> from(iterable: ArrayLike<T>): Array<T>\n    fun <T, U> from(iterable: Iterable<T>, mapfn: (v: T, k: Number) -> U, thisArg: Any = definedExternally): Array<U>\n    fun <T, U> from(iterable: Iterable<T>, mapfn: (v: T, k: Number) -> U): Array<U>\n    fun <T, U> from(iterable: ArrayLike<T>, mapfn: (v: T, k: Number) -> U, thisArg: Any = definedExternally): Array<U>\n    fun <T, U> from(iterable: ArrayLike<T>, mapfn: (v: T, k: Number) -> U): Array<U>"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "fdae52e1d94aebed398baf419b1d1101e37993bb8848ea7940e220d3a3431dc8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"from\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 60,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 58,
        "length": 4,
        "offset": 217,
        "surroundingCode": "    fun <T, U> from(iterable: Iterable<T>, mapfn: (v: T, k: Number) -> U, thisArg: Any = definedExternally): Array<U>\n    fun <T, U> from(iterable: Iterable<T>, mapfn: (v: T, k: Number) -> U): Array<U>\n    fun <T, U> from(iterable: ArrayLike<T>, mapfn: (v: T, k: Number) -> U, thisArg: Any = definedExternally): Array<U>\n    fun <T, U> from(iterable: ArrayLike<T>, mapfn: (v: T, k: Number) -> U): Array<U>\n    fun <T> of(vararg items: T): Array<T>"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "915254ea81df755e35708049638f381abcb38e7a04de0a438144c964aea1f694"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"from\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 61,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 59,
        "length": 4,
        "offset": 218,
        "surroundingCode": "    fun <T, U> from(iterable: Iterable<T>, mapfn: (v: T, k: Number) -> U): Array<U>\n    fun <T, U> from(iterable: ArrayLike<T>, mapfn: (v: T, k: Number) -> U, thisArg: Any = definedExternally): Array<U>\n    fun <T, U> from(iterable: ArrayLike<T>, mapfn: (v: T, k: Number) -> U): Array<U>\n    fun <T> of(vararg items: T): Array<T>\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "994a8dbc8c2ea3d9265fc018c6d9c80f6ae9572cbc7ae00befa1781b07af4dda"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"isArray\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 75,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 73,
        "length": 7,
        "offset": 81,
        "surroundingCode": "    @nativeInvoke\n    operator fun <T> invoke(vararg items: T): Array<T>\n    fun isArray(arg: Any): Boolean\n    var prototype: Array<Any>\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2389a142c7e3cb4e59771fb9c836ffa45dc9d4d0906815aabe49c15aa83fee32"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"prototype\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 76,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 74,
        "length": 9,
        "offset": 98,
        "surroundingCode": "    operator fun <T> invoke(vararg items: T): Array<T>\n    fun isArray(arg: Any): Boolean\n    var prototype: Array<Any>\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "19556fa38f65e9fcbebc186ef782c98379c933ba56cd2457ddfbf9e9c2e0dd14"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"length\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 80,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 78,
        "length": 6,
        "offset": 52,
        "surroundingCode": "\ninternal external interface ArrayLike<T> {\n    var length: Number\n\n    @nativeGetter"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e3dc67e1be56f51512d470eadf371f340f250ac7138375a2312a440b9f6d42e8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type alias \"Extract\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 89,
      "offset": 20,
      "length": 7,
      "code": {
        "startLine": 87,
        "length": 7,
        "offset": 22,
        "surroundingCode": "}\n\ninternal typealias Extract<T, U> = Any\n\ninternal external interface PromiseLike<T> {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2989eb02b7024706f62859263cb5b0d38ef131f83399e5c7291e87fdfcceb2b9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type parameter \"T\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 89,
      "offset": 28,
      "length": 1,
      "code": {
        "startLine": 87,
        "length": 1,
        "offset": 30,
        "surroundingCode": "}\n\ninternal typealias Extract<T, U> = Any\n\ninternal external interface PromiseLike<T> {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4dcb03b40f4169bcfae31f930461e224bb70c5cd37abada971f393e2174ec2c8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type parameter \"U\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 89,
      "offset": 31,
      "length": 1,
      "code": {
        "startLine": 87,
        "length": 1,
        "offset": 33,
        "surroundingCode": "}\n\ninternal typealias Extract<T, U> = Any\n\ninternal external interface PromiseLike<T> {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "9431e3232dbe992d7e610db200fb18d9342bf0e970a1c9a1830b8039f8471849"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"then\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/tsstdlib/lib.es5.kt",
      "language": "kotlin",
      "line": 92,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 90,
        "length": 4,
        "offset": 54,
        "surroundingCode": "\ninternal external interface PromiseLike<T> {\n    fun then(\n        onfulfilled: ((value: T) -> Any?)? = definedExternally,\n        onrejected: ((reason: Any) -> Any?)? = definedExternally"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "83811be6d4e0a458698ea492ee7f2d728c214de296656464082620ba0e78c53a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type alias \"CompileError1\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/webassembly/nonDeclarations.WebAssembly.kt",
      "language": "kotlin",
      "line": 24,
      "offset": 20,
      "length": 13,
      "code": {
        "startLine": 22,
        "length": 13,
        "offset": 79,
        "surroundingCode": "internal typealias Imports = Record<String, ModuleImports>\n\ninternal typealias CompileError1 = Error\n\ninternal typealias LinkError1 = Error"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2c7374e133c1624d4a3b0e37cbb2000f84003ac16f406ed08732f4ad505e41b3"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type alias \"LinkError1\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/webassembly/nonDeclarations.WebAssembly.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 20,
      "length": 10,
      "code": {
        "startLine": 24,
        "length": 10,
        "offset": 61,
        "surroundingCode": "internal typealias CompileError1 = Error\n\ninternal typealias LinkError1 = Error\n\ninternal typealias RuntimeError1 = Error"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "21ed9fb345d80252a0cc8db75661d96aa3da1a3eee68eac95cdffe83bbc72391"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type alias \"RuntimeError1\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/jsMain/kotlin/space/kscience/kmath/internal/webassembly/nonDeclarations.WebAssembly.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 20,
      "length": 13,
      "code": {
        "startLine": 26,
        "length": 13,
        "offset": 58,
        "surroundingCode": "internal typealias LinkError1 = Error\n\ninternal typealias RuntimeError1 = Error\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "68f7c9bfe381b8bec7147144f84df61b5dbb9d1c2a3ba622ab06b36a8ed5a3a1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"tryParseMath\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/commonMain/kotlin/space/kscience/kmath/ast/parser.kt",
      "language": "kotlin",
      "line": 114,
      "offset": 19,
      "length": 12,
      "code": {
        "startLine": 112,
        "length": 12,
        "offset": 49,
        "surroundingCode": " * @return the [MST] node.\n */\npublic fun String.tryParseMath(): ParseResult<MST> = ArithmeticsEvaluator.tryParseToEnd(this)\n\n/**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "769ae235442b2b6a2410574dee39dd26a8b0854d8d41e59f0ad1a0e873253379"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"interpret\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/commonMain/kotlin/space/kscience/kmath/ast/TypedMst.kt",
      "language": "kotlin",
      "line": 162,
      "offset": 28,
      "length": 9,
      "code": {
        "startLine": 160,
        "length": 9,
        "offset": 49,
        "surroundingCode": " */\n@UnstableKMathAPI\npublic fun <T> TypedMst<T>.interpret(algebra: Algebra<T>, vararg arguments: Pair<Symbol, T>): T = interpret(\n    algebra,\n    when (arguments.size) {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d25e67b14966512d2740a403973a4d96de934ddb123a5eda491f683eee7bdf0c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toExpression\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ast/src/commonMain/kotlin/space/kscience/kmath/ast/TypedMst.kt",
      "language": "kotlin",
      "line": 175,
      "offset": 34,
      "length": 12,
      "code": {
        "startLine": 173,
        "length": 12,
        "offset": 55,
        "surroundingCode": " */\n@UnstableKMathAPI\npublic fun <T : Any> TypedMst<T>.toExpression(algebra: Algebra<T>): Expression<T> = Expression { arguments ->\n    interpret(algebra, arguments)\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ast.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "68b61f78e1014ea8222a01344c3e5be126944818a23440869599f30c39724cf9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ExpressionsInterpretersBenchmark\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jsMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 23,
      "offset": 7,
      "length": 32,
      "code": {
        "startLine": 21,
        "length": 32,
        "offset": 31,
        "surroundingCode": "\n@State(Scope.Benchmark)\nclass ExpressionsInterpretersBenchmark {\n    /**\n     * Benchmark case for [Expression] created with [expressionInExtendedField]."
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ed4b2d44fecc3c9b1ff35df1552863eafcff44b5bb6c16efbe483288617aa870"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"functionalExpression\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jsMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 9,
      "length": 20,
      "code": {
        "startLine": 26,
        "length": 20,
        "offset": 31,
        "surroundingCode": "     */\n    @Benchmark\n    fun functionalExpression(blackhole: Blackhole) = invokeAndSum(functional, blackhole)\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "96916170b0b2d69c1f35e095fccbd24145e6c322a7ba8c20e0e8a80ef7abb9d6"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"mstExpression\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jsMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 32,
        "length": 13,
        "offset": 31,
        "surroundingCode": "     */\n    @Benchmark\n    fun mstExpression(blackhole: Blackhole) = invokeAndSum(mst, blackhole)\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "db0705455abf66eecebd489914236396136138bbdb7ce5452b36b1afdeca5780"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"wasmExpression\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jsMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 38,
        "length": 14,
        "offset": 31,
        "surroundingCode": "     */\n    @Benchmark\n    fun wasmExpression(blackhole: Blackhole) = invokeAndSum(wasm, blackhole)\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0c6fc2a00bd0a14c101f833e8e7ae380836d1b94bf6afc55160dfabc38b143be"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"estreeExpression\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jsMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 44,
        "length": 16,
        "offset": 31,
        "surroundingCode": "     */\n    @Benchmark\n    fun estreeExpression(blackhole: Blackhole) = invokeAndSum(estree, blackhole)\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "72b25b8eb809865a5dd394b3508df806978c36b5392f7cce429465b459a355d1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"rawExpression\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jsMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 52,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 50,
        "length": 13,
        "offset": 31,
        "surroundingCode": "     */\n    @Benchmark\n    fun rawExpression(blackhole: Blackhole) = invokeAndSum(raw, blackhole)\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "59eab667e9ed3d344e96b0969e8f71b7beea60008d1ef0bf0fbe65c7f106cb7c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"justCalculate\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jsMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 58,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 56,
        "length": 13,
        "offset": 31,
        "surroundingCode": "     */\n    @Benchmark\n    fun justCalculate(blackhole: Blackhole) {\n        val random = Random(0)\n        var sum = 0.0"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "26dbcd89303c71da91a3b263d16b122ed578d7880f4d37c9b6f4b928421360f0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"cmDotWithConversion\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/DotBenchmark.kt",
      "language": "kotlin",
      "line": 57,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 55,
        "length": 19,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun cmDotWithConversion(blackhole: Blackhole) = CMLinearSpace {\n        blackhole.consume(matrix1 dot matrix2)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "53cb274ed5bf30d47352b66bf253a0da89cb9295025020d97d7f3e88cdf521b8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"DotBenchmark\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/DotBenchmark.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 16,
      "length": 12,
      "code": {
        "startLine": 24,
        "length": 12,
        "offset": 40,
        "surroundingCode": "\n@State(Scope.Benchmark)\ninternal class DotBenchmark {\n    companion object {\n        val random = Random(12224)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "feabb6b62b793c708cadf44ae1e4d159e6e4b3d259fa426487a59cb74d0f71d3"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"doubleDot\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/DotBenchmark.kt",
      "language": "kotlin",
      "line": 92,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 90,
        "length": 9,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun doubleDot(blackhole: Blackhole) = with(DoubleField.linearSpace) {\n        blackhole.consume(matrix1 dot matrix2)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "59f0f659eba0234cb7a69fb080516ee7382e6460549d3302512cde6c6d1a5727"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"tfDot\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/DotBenchmark.kt",
      "language": "kotlin",
      "line": 48,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 46,
        "length": 5,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun tfDot(blackhole: Blackhole) {\n        blackhole.consume(\n            DoubleField.produceWithTF {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "42f3510c4df31ae0bb2b472855a37589a36e5b2d712866b950e0894debecabb5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"ejmlDotWithConversion\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/DotBenchmark.kt",
      "language": "kotlin",
      "line": 72,
      "offset": 9,
      "length": 21,
      "code": {
        "startLine": 70,
        "length": 21,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun ejmlDotWithConversion(blackhole: Blackhole) = EjmlLinearSpaceDDRM {\n        blackhole.consume(matrix1 dot matrix2)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "89ff82cf59922a7d5d8f378e8568685647d53b3c3a25f212dffb90016dd05116"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"bufferedDot\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/DotBenchmark.kt",
      "language": "kotlin",
      "line": 87,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 85,
        "length": 11,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun bufferedDot(blackhole: Blackhole) = with(DoubleField.linearSpace(Buffer.Companion::auto)) {\n        blackhole.consume(matrix1 dot matrix2)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0a5abdf7041f1de5aa7ebdcd61cb76a5c3cb72af217c061ddbc5a994571ef864"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"multikDot\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/DotBenchmark.kt",
      "language": "kotlin",
      "line": 82,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 80,
        "length": 9,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun multikDot(blackhole: Blackhole) = with(DoubleField.multikAlgebra) {\n        blackhole.consume(matrix1 dot matrix2)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f42fa4e638d9858a21345d346181ee7b8ab89ef9604f0cfb4c31eaf333d771cf"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"doubleTensorDot\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/DotBenchmark.kt",
      "language": "kotlin",
      "line": 97,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 95,
        "length": 15,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun doubleTensorDot(blackhole: Blackhole) = DoubleTensorAlgebra.invoke {\n        blackhole.consume(matrix1 dot matrix2)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3a9571f2e01ce63c79eb2a02f2a03023da42ae1ee90a85fe764b40ec69913961"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"cmDot\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/DotBenchmark.kt",
      "language": "kotlin",
      "line": 62,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 60,
        "length": 5,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun cmDot(blackhole: Blackhole) = CMLinearSpace {\n        blackhole.consume(cmMatrix1 dot cmMatrix2)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "dbd601baeec7dc6aa21e042d2961013cba841727fab262cfa248afaf487d7b3a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"tensorDot\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/DotBenchmark.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 75,
        "length": 9,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun tensorDot(blackhole: Blackhole) = with(DoubleField.tensorAlgebra) {\n        blackhole.consume(matrix1 dot matrix2)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a891d78bc047ca2ca3502c99f31df6100c8d8a8ede9783f79a90ccb4966494d2"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"ejmlDot\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/DotBenchmark.kt",
      "language": "kotlin",
      "line": 67,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 65,
        "length": 7,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun ejmlDot(blackhole: Blackhole) = EjmlLinearSpaceDDRM {\n        blackhole.consume(ejmlMatrix1 dot ejmlMatrix2)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0a4294e2aab6acfc59cb35808f4ff9355006002098681744da085790c567163c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"benchmarkBufferRead\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ArrayBenchmark.kt",
      "language": "kotlin",
      "line": 24,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 22,
        "length": 19,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun benchmarkBufferRead(blackhole: Blackhole) {\n        var res = 0\n        for (i in 1..size) res += arrayBuffer[size - i]"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "569884ae056421a9f4dc0f076530a4c3e2d656edee374d50d8498f66f4b9a38e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"benchmarkArrayRead\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ArrayBenchmark.kt",
      "language": "kotlin",
      "line": 17,
      "offset": 9,
      "length": 18,
      "code": {
        "startLine": 15,
        "length": 18,
        "offset": 55,
        "surroundingCode": "internal class ArrayBenchmark {\n    @Benchmark\n    fun benchmarkArrayRead(blackhole: Blackhole) {\n        var res = 0\n        for (i in 1..size) res += array[size - i]"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c983deab829f98ed553d431ed261f4a36846a1a2d260746caa9b7dab1078a81e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ArrayBenchmark\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ArrayBenchmark.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 16,
      "length": 14,
      "code": {
        "startLine": 13,
        "length": 14,
        "offset": 40,
        "surroundingCode": "\n@State(Scope.Benchmark)\ninternal class ArrayBenchmark {\n    @Benchmark\n    fun benchmarkArrayRead(blackhole: Blackhole) {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "17d72c08fae146ddab9862790d5d55d61a8cda3bffcdf4acb90872294781d028"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"nativeBufferRead\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ArrayBenchmark.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 29,
        "length": 16,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun nativeBufferRead(blackhole: Blackhole) {\n        var res = 0\n        for (i in 1..size) res += nativeBuffer[size - i]"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "184791852a185d8c6f21f080e434d2240f63305326624a4b19e476581107df5d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"BigIntBenchmark\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BigIntBenchmark.kt",
      "language": "kotlin",
      "line": 23,
      "offset": 16,
      "length": 15,
      "code": {
        "startLine": 21,
        "length": 15,
        "offset": 57,
        "surroundingCode": "@UnstableKMathAPI\n@State(Scope.Benchmark)\ninternal class BigIntBenchmark {\n\n    val kmSmallNumber = BigIntField.number(100)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d225f8a0b81cd3c8f2d283f12c67d0c1e544c533cf1d9c5599b08fd5a8bd2161"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"kmParsing10\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BigIntBenchmark.kt",
      "language": "kotlin",
      "line": 99,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 97,
        "length": 11,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun kmParsing10(blackhole: Blackhole) = JBigIntegerField {\n        blackhole.consume(\"236656783929183747565738292847574838922010\".parseBigInteger())\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ae5a2aa43bf549da0d9259a073238514967b7314f76460914f95f7703b136144"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"kmPower\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BigIntBenchmark.kt",
      "language": "kotlin",
      "line": 84,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 82,
        "length": 7,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun kmPower(blackhole: Blackhole) = BigIntField {\n        blackhole.consume(kmNumber.pow(bigExponent.toUInt()))\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "646317ec04b488d1d172364cad7e6f1d3f2b811362b3976f5721d28ddc041c36"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"kmAdd\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BigIntBenchmark.kt",
      "language": "kotlin",
      "line": 44,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 42,
        "length": 5,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun kmAdd(blackhole: Blackhole) = BigIntField {\n        blackhole.consume(kmNumber + kmNumber + kmNumber)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4fd3f0c68f8049bac1f31e8c1fdb509185c93d89577b45fd92272e2abb758e38"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"kmSmallAdd\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BigIntBenchmark.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 32,
        "length": 10,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun kmSmallAdd(blackhole: Blackhole) = BigIntField {\n        blackhole.consume(kmSmallNumber + kmSmallNumber + kmSmallNumber)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3e5180559974e8381e3d6e03e705414e8a8f857405b4ddc53b22adb746b6e559"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"jvmParsing10\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BigIntBenchmark.kt",
      "language": "kotlin",
      "line": 104,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 102,
        "length": 12,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun jvmParsing10(blackhole: Blackhole) = JBigIntegerField {\n        blackhole.consume(\"236656783929183747565738292847574838922010\".toBigInteger(10))\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e1832ed6a0e53fff6a063d7b3344202d7cd09435eb43ea508371c37f0168a023"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"kmMultiplyLarge\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BigIntBenchmark.kt",
      "language": "kotlin",
      "line": 69,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 67,
        "length": 15,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun kmMultiplyLarge(blackhole: Blackhole) = BigIntField {\n        blackhole.consume(kmLargeNumber*kmLargeNumber)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "08adaae15032c8191b9fe208f19de014321c28d0b4e8f53119915f5b7b55e6dc"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"kmParsing16\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BigIntBenchmark.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 92,
        "length": 11,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun kmParsing16(blackhole: Blackhole) = JBigIntegerField {\n        blackhole.consume(\"0x7f57ed8b89c29a3b9a85c7a5b84ca3929c7b7488593\".parseBigInteger())\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6875f1b7d77a5e6a31f0567a8f356e29479727396c2da7e82fdc7dcf59984322"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"kmMultiply\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BigIntBenchmark.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 62,
        "length": 10,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun kmMultiply(blackhole: Blackhole) = BigIntField {\n        blackhole.consume(kmNumber * kmNumber * kmNumber)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "88994414e6ed639e81c609b04c20cf8ac0791f5056a46591efb2c8d34617aa41"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"jvmAddLarge\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BigIntBenchmark.kt",
      "language": "kotlin",
      "line": 59,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 57,
        "length": 11,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun jvmAddLarge(blackhole: Blackhole) = JBigIntegerField {\n        blackhole.consume(jvmLargeNumber + jvmLargeNumber + jvmLargeNumber)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ddc9984ea144d3a19d20bc28eeb694debbfe17be2a16dc3d35573fe497024363"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"jvmParsing16\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BigIntBenchmark.kt",
      "language": "kotlin",
      "line": 109,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 107,
        "length": 12,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun jvmParsing16(blackhole: Blackhole) = JBigIntegerField {\n        blackhole.consume(\"7f57ed8b89c29a3b9a85c7a5b84ca3929c7b7488593\".toBigInteger(16))\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b52878321dd24b2047309b56162056b5a2f161af095355313baff41dd7ba30cd"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"jvmAdd\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BigIntBenchmark.kt",
      "language": "kotlin",
      "line": 49,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 47,
        "length": 6,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun jvmAdd(blackhole: Blackhole) = JBigIntegerField {\n        blackhole.consume(jvmNumber + jvmNumber + jvmNumber)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ee72e89b851ec57a79a028be15ba5673b8e417669bc90ef7ce1b56ea9dc52e81"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"jvmPower\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BigIntBenchmark.kt",
      "language": "kotlin",
      "line": 89,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 87,
        "length": 8,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun jvmPower(blackhole: Blackhole) = JBigIntegerField {\n        blackhole.consume(jvmNumber.pow(bigExponent))\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ff2d0c7b227e97f7aaf39669df5256b7c365549b552f52ab1f2d72d75aff6760"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"jvmMultiplyLarge\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BigIntBenchmark.kt",
      "language": "kotlin",
      "line": 79,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 77,
        "length": 16,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun jvmMultiplyLarge(blackhole: Blackhole) = JBigIntegerField {\n        blackhole.consume(jvmLargeNumber*jvmLargeNumber)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4ae557d09708e8c7d458f1748b8f4003ee4b5b16bd136d7ac0b50219ef0e348d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"kmAddLarge\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BigIntBenchmark.kt",
      "language": "kotlin",
      "line": 54,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 52,
        "length": 10,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun kmAddLarge(blackhole: Blackhole) = BigIntField {\n        blackhole.consume(kmLargeNumber + kmLargeNumber + kmLargeNumber)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "bb38d722c4a32e682e8e82dc52d16c64199f0c8c7926902050a1c98530aa3e71"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"jvmMultiply\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BigIntBenchmark.kt",
      "language": "kotlin",
      "line": 74,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 72,
        "length": 11,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun jvmMultiply(blackhole: Blackhole) = JBigIntegerField {\n        blackhole.consume(jvmNumber * jvmNumber * jvmNumber)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "810511943760eba2871ecb3af920801768d6014c3ecd076f259c10f6c205d017"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"jvmSmallAdd\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BigIntBenchmark.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 37,
        "length": 11,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun jvmSmallAdd(blackhole: Blackhole) = JBigIntegerField {\n        blackhole.consume(jvmSmallNumber + jvmSmallNumber + jvmSmallNumber)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "47e889905da45f2172b92d10aa37821bafa460ca35116346c6914760a30065ee"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"complexBufferReadWrite\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BufferBenchmark.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 9,
      "length": 22,
      "code": {
        "startLine": 26,
        "length": 22,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun complexBufferReadWrite() {\n        val buffer = MutableBuffer.complex(size / 2) { Complex(it.toDouble(), -it.toDouble()) }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "912289768ae94d6737636dbb9396feacbc82ae8230d7dbde00efbe2376794e34"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"genericDoubleBufferReadWrite\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BufferBenchmark.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 9,
      "length": 28,
      "code": {
        "startLine": 17,
        "length": 28,
        "offset": 56,
        "surroundingCode": "internal class BufferBenchmark {\n    @Benchmark\n    fun genericDoubleBufferReadWrite() {\n        val buffer = DoubleBuffer(size) { it.toDouble() }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "26b165da32e27f3cb1dd2ab7d88fc4556c575b6b6839c05867d4b913c046ca16"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"BufferBenchmark\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/BufferBenchmark.kt",
      "language": "kotlin",
      "line": 17,
      "offset": 16,
      "length": 15,
      "code": {
        "startLine": 15,
        "length": 15,
        "offset": 40,
        "surroundingCode": "\n@State(Scope.Benchmark)\ninternal class BufferBenchmark {\n    @Benchmark\n    fun genericDoubleBufferReadWrite() {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4f0ebeb7d1dd61903c4d759b41c7001442fa062787fc75050d3e13e93108c00d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"strictJafama\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/JafamaBenchmark.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 31,
        "length": 12,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun strictJafama(blackhole: Blackhole) = invokeBenchmarks(blackhole) { x ->\n        StrictJafamaDoubleField { x * power(x, 4) * exp(x) / cos(x) + sin(x) }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "28513bf7d32d51280c365c96f9bf9ce1ee224d9c09d9530aa0601165916be58e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"JafamaBenchmark\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/JafamaBenchmark.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 16,
      "length": 15,
      "code": {
        "startLine": 19,
        "length": 15,
        "offset": 40,
        "surroundingCode": "\n@State(Scope.Benchmark)\ninternal class JafamaBenchmark {\n    @Benchmark\n    fun jafama(blackhole: Blackhole) = invokeBenchmarks(blackhole) { x ->"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a9595bf7390a5b8dc0eeb982e625d0320eb321350323942bfe7fff426d4ff5a9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"core\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/JafamaBenchmark.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 26,
        "length": 4,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun core(blackhole: Blackhole) = invokeBenchmarks(blackhole) { x ->\n        DoubleField { x * power(x, 4) * exp(x) / cos(x) + sin(x) }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c3ce0bc73d217cabdbe661bdddfc9efacb2b655867c43ab66a896219a3c287ff"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"jafama\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/JafamaBenchmark.kt",
      "language": "kotlin",
      "line": 23,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 21,
        "length": 6,
        "offset": 56,
        "surroundingCode": "internal class JafamaBenchmark {\n    @Benchmark\n    fun jafama(blackhole: Blackhole) = invokeBenchmarks(blackhole) { x ->\n        JafamaDoubleField { x * power(x, 4) * exp(x) / cos(x) + sin(x) }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "7b230dad9251a75a497153aea660ee74e8098bf0439a7bd1e528277167eac7f6"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"automaticFieldAddition\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ViktorBenchmark.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 9,
      "length": 22,
      "code": {
        "startLine": 19,
        "length": 22,
        "offset": 56,
        "surroundingCode": "internal class ViktorBenchmark {\n    @Benchmark\n    fun automaticFieldAddition(blackhole: Blackhole) {\n        with(autoField) {\n            var res: StructureND<Double> = one(shape)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e250093ebac7c78b5fa58a913344e5b79a7e5173d00c1ab5eb328f2ddb488f1c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"realFieldAddition\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ViktorBenchmark.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 28,
        "length": 17,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun realFieldAddition(blackhole: Blackhole) {\n        with(realField) {\n            var res: StructureND<Double> = one(shape)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a987b4631f02b4e8b578e41c0118077e8ab799a9d828dc920c6bae0f684a45cf"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"viktorFieldAddition\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ViktorBenchmark.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 37,
        "length": 19,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun viktorFieldAddition(blackhole: Blackhole) {\n        with(viktorField) {\n            var res = one(shape)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b3007658e056fdaf78b5f87deba437b1728a423e9bb0de31e98fec171d4b6037"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ViktorBenchmark\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ViktorBenchmark.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 16,
      "length": 15,
      "code": {
        "startLine": 17,
        "length": 15,
        "offset": 40,
        "surroundingCode": "\n@State(Scope.Benchmark)\ninternal class ViktorBenchmark {\n    @Benchmark\n    fun automaticFieldAddition(blackhole: Blackhole) {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b593f12db04b739ddb9d975df72a8836c9082e465dbdb163a3b495660d0b18a5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"rawViktor\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ViktorBenchmark.kt",
      "language": "kotlin",
      "line": 48,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 46,
        "length": 9,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun rawViktor(blackhole: Blackhole) {\n        val one = F64Array.full(init = 1.0, shape = intArrayOf(dim, dim))\n        var res = one"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "739de6eae921ed7b2722c56f5f2ecf80431446852c549d3cd391a5914a5f282d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"multikInPlaceAdd\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/NDFieldBenchmark.kt",
      "language": "kotlin",
      "line": 81,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 79,
        "length": 16,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun multikInPlaceAdd(blackhole: Blackhole) = with(DoubleField.multikAlgebra) {\n        val res = Multik.ones<Double, DN>(shape, DataType.DoubleDataType).wrap()\n        repeat(n) { res += 1.0 }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5aecc3e87fd6e4578e52e6b39b75394c08125c2375aaf63ef2876030e37b017d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"multikAdd\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/NDFieldBenchmark.kt",
      "language": "kotlin",
      "line": 53,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 51,
        "length": 9,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun multikAdd(blackhole: Blackhole) = with(multikField) {\n        var res: StructureND<Double> = one(shape)\n        repeat(n) { res += 1.0 }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "59af59df4d4a182b77d55bb720d6bdac5c5bbc21174d6c6cab9af50aa177bafd"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"specializedFieldAdd\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/NDFieldBenchmark.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 37,
        "length": 19,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun specializedFieldAdd(blackhole: Blackhole) = with(specializedField) {\n        var res: StructureND<Double> = one(shape)\n        repeat(n) { res += 1.0 }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "9ff9bda7c3fa803b5b7d02087495db66b2744d75ce77e0994a0d55e24cf966a7"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"viktorAdd\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/NDFieldBenchmark.kt",
      "language": "kotlin",
      "line": 60,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 58,
        "length": 9,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun viktorAdd(blackhole: Blackhole) = with(viktorField) {\n        var res: StructureND<Double> = one(shape)\n        repeat(n) { res += 1.0 }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "9aa8eb80a463c4c671ac83df9795c5ee8850ac167504599aff83952be6a73866"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"NDFieldBenchmark\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/NDFieldBenchmark.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 16,
      "length": 16,
      "code": {
        "startLine": 28,
        "length": 16,
        "offset": 40,
        "surroundingCode": "\n@State(Scope.Benchmark)\ninternal class NDFieldBenchmark {\n    @Benchmark\n    fun autoFieldAdd(blackhole: Blackhole) = with(autoField) {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "36533a80c0f56e30a36f0d5ae47dd78082099280e34622f5b66e23c84faac6eb"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"boxingFieldAdd\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/NDFieldBenchmark.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 44,
        "length": 14,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun boxingFieldAdd(blackhole: Blackhole) = with(genericField) {\n        var res: StructureND<Double> = one(shape)\n        repeat(n) { res += 1.0 }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f1fa42141512b0a410deb1291aceb7b530ce536d1aff635b22e739aaa3b60a7d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"autoFieldAdd\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/NDFieldBenchmark.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 30,
        "length": 12,
        "offset": 57,
        "surroundingCode": "internal class NDFieldBenchmark {\n    @Benchmark\n    fun autoFieldAdd(blackhole: Blackhole) = with(autoField) {\n        var res: StructureND<Double> = one(shape)\n        repeat(n) { res += 1.0 }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e3ad1ef1e23385dd2789526c7aec3c81e897b6f0d9e5a3190fd3172232997c9f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"tensorInPlaceAdd\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/NDFieldBenchmark.kt",
      "language": "kotlin",
      "line": 74,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 72,
        "length": 16,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun tensorInPlaceAdd(blackhole: Blackhole) = with(Double.tensorAlgebra) {\n        val res: DoubleTensor = one(shape)\n        repeat(n) { res += 1.0 }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c432d05281d390763b1cdf553c6f26d5bbce91c51d3f44c7d7c18df08bc4053f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"tensorAdd\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/NDFieldBenchmark.kt",
      "language": "kotlin",
      "line": 67,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 65,
        "length": 9,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun tensorAdd(blackhole: Blackhole) = with(Double.tensorAlgebra) {\n        var res: DoubleTensor = one(shape)\n        repeat(n) { res = res + 1.0 }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4ae69f6a81c4d6d940567c5597d6651cf806de3104291aa6334bf7e56335059f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"nd4jField\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/NDFieldBenchmark.kt",
      "language": "kotlin",
      "line": 101,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 99,
        "length": 9,
        "offset": 174,
        "surroundingCode": "        private val specializedField = DoubleField.ndAlgebra\n        private val genericField = BufferedFieldOpsND(DoubleField, Buffer.Companion::boxing)\n        private val nd4jField = DoubleField.nd4j\n        private val multikField = DoubleField.multikAlgebra\n        private val viktorField = DoubleField.viktorAlgebra"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e6694d698d58f7fb4a90634670654f37fb87144bacea4a57048a147e62631bc4"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"autoField\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ViktorLogBenchmark.kt",
      "language": "kotlin",
      "line": 57,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 55,
        "length": 9,
        "offset": 88,
        "surroundingCode": "\n        // automatically build context most suited for given type.\n        private val autoField = BufferedFieldOpsND(DoubleField, Buffer.Companion::auto)\n        private val realField = DoubleField.ndAlgebra\n        private val viktorField = ViktorFieldND(dim, dim)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "10432a266163dcb6e92e22060fb6fb08d55f2d01dcbcf56c5211631791cec40b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"rawViktorLog\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ViktorLogBenchmark.kt",
      "language": "kotlin",
      "line": 44,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 42,
        "length": 12,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun rawViktorLog(blackhole: Blackhole) {\n        val fortyTwo = F64Array.full(dim, dim, init = 42.0)\n        lateinit var res: F64Array"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "22bb410016579f91d6cb452ad90b14bb3bedd5e5fce4eb71b342568b462fbc12"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"realFieldLog\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ViktorLogBenchmark.kt",
      "language": "kotlin",
      "line": 24,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 22,
        "length": 12,
        "offset": 59,
        "surroundingCode": "internal class ViktorLogBenchmark {\n    @Benchmark\n    fun realFieldLog(blackhole: Blackhole) {\n        with(realField) {\n            val fortyTwo = structureND(shape) { 42.0 }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4c1dc5e8c16adbe7cd48936d7b338b86d8bb2389784250debc10e1750cf0d8aa"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"viktorFieldLog\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ViktorLogBenchmark.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 32,
        "length": 14,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun viktorFieldLog(blackhole: Blackhole) {\n        with(viktorField) {\n            val fortyTwo = structureND(shape) { 42.0 }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3fc0908540395223775c85a1b93e16d5e5b77e96de6bbfdc820c1e139dfc6bfc"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ViktorLogBenchmark\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ViktorLogBenchmark.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 16,
      "length": 18,
      "code": {
        "startLine": 20,
        "length": 18,
        "offset": 40,
        "surroundingCode": "\n@State(Scope.Benchmark)\ninternal class ViktorLogBenchmark {\n    @Benchmark\n    fun realFieldLog(blackhole: Blackhole) {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0dc11f2108105a0e1a52fcb9806bee942e8d8f5f61627c12361a112cb74fefa0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"MatrixInverseBenchmark\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/MatrixInverseBenchmark.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 16,
      "length": 22,
      "code": {
        "startLine": 20,
        "length": 22,
        "offset": 40,
        "surroundingCode": "\n@State(Scope.Benchmark)\ninternal class MatrixInverseBenchmark {\n    private companion object {\n        private val random = Random(1224)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5dd43951aeb7f6e7f78a39ef143bc36a86122c6d8de8b7fb5e0e85d095583b0d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"ejmlInverse\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/MatrixInverseBenchmark.kt",
      "language": "kotlin",
      "line": 48,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 46,
        "length": 11,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun ejmlInverse(blackhole: Blackhole) {\n        EjmlLinearSpaceDDRM {\n            blackhole.consume(matrix.toEjml().inverse())"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "71f9d8e38b4a24ccc497af3dbaab129ef795797842db0e0eaa2bd3cda7ff7d62"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"cmLUPInversion\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/MatrixInverseBenchmark.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 39,
        "length": 14,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun cmLUPInversion(blackhole: Blackhole) {\n        CMLinearSpace {\n            blackhole.consume(lupSolver().inverse(matrix))"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a7e3439a0178886a188c11a3d58ae1548e7fcc047995ac0611cfcd9a9041be26"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"kmathLupInversion\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/MatrixInverseBenchmark.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 34,
        "length": 17,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun kmathLupInversion(blackhole: Blackhole) {\n        blackhole.consume(Double.algebra.linearSpace.lupSolver().inverse(matrix))\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ce3f103b96b6e8798c27b3fc6e8bf14817b037fca260fea85518cc44c2d40e29"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"tensorSymEigSvd\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/TensorAlgebraBenchmark.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 27,
        "length": 15,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun tensorSymEigSvd(blackhole: Blackhole) = with(Double.tensorAlgebra) {\n        blackhole.consume(matrix.symEigSvd(1e-10))\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "90ec5d60cb188c2a249ee15ceba582101b300f29479de8aa17e9d38bed51f5ef"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"tensorSymEigJacobi\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/TensorAlgebraBenchmark.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 9,
      "length": 18,
      "code": {
        "startLine": 32,
        "length": 18,
        "offset": 24,
        "surroundingCode": "\n    @Benchmark\n    fun tensorSymEigJacobi(blackhole: Blackhole) = with(Double.tensorAlgebra) {\n        blackhole.consume(matrix.symEigJacobi(50, 1e-10))\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ebbed3b10320c6d397315032aa030e88be1ff045a23f589b2fd7988462f3f4ae"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"TensorAlgebraBenchmark\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/TensorAlgebraBenchmark.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 16,
      "length": 22,
      "code": {
        "startLine": 18,
        "length": 22,
        "offset": 40,
        "surroundingCode": "\n@State(Scope.Benchmark)\ninternal class TensorAlgebraBenchmark {\n    companion object {\n        private val random = Random(12224)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3c40b48efc3a8ed7ec9f0ececa4137f04d386adf7b49f99cb9f2ff0d6f3cd457"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"rawExpression\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 68,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 66,
        "length": 13,
        "offset": 31,
        "surroundingCode": "     */\n    @Benchmark\n    fun rawExpression(blackhole: Blackhole) = invokeAndSum(raw, blackhole)\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "381e05654bc0f7749d9c5b68fd38c71b8c9cab1d95cfcc0f6637c4d880c41652"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"justCalculate\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 74,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 72,
        "length": 13,
        "offset": 31,
        "surroundingCode": "     */\n    @Benchmark\n    fun justCalculate(blackhole: Blackhole) {\n        val random = Random(0)\n        var sum = 0.0"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2a000c277830a652521f0be3664f015d444b819e0db4582f67bd1c8f31c927ac"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"mstExpression\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 31,
        "length": 13,
        "offset": 31,
        "surroundingCode": "     */\n    @Benchmark\n    fun mstExpression(blackhole: Blackhole) = invokeAndSum(mst, blackhole)\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4c1e51694b8cc1f2aaf2cc0fb81e7a1f09726d97902b12c4405b3706606c8efb"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"functionalExpression\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 27,
      "offset": 9,
      "length": 20,
      "code": {
        "startLine": 25,
        "length": 20,
        "offset": 31,
        "surroundingCode": "     */\n    @Benchmark\n    fun functionalExpression(blackhole: Blackhole) = invokeAndSum(functional, blackhole)\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "bf4dfcb3b8de524be99c10a7f6158cc4f08bd7e9c2344efdbce9f16414405bef"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"asmPrimitiveExpressionArray\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 45,
      "offset": 9,
      "length": 27,
      "code": {
        "startLine": 43,
        "length": 27,
        "offset": 31,
        "surroundingCode": "     */\n    @Benchmark\n    fun asmPrimitiveExpressionArray(blackhole: Blackhole) {\n        val random = Random(0)\n        var sum = 0.0"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "32cf7bb31c730a7ef53945eff3ad6a0260a112ccc226ab5a204c95a2701c17b6"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"asmGenericExpression\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 9,
      "length": 20,
      "code": {
        "startLine": 37,
        "length": 20,
        "offset": 31,
        "surroundingCode": "     */\n    @Benchmark\n    fun asmGenericExpression(blackhole: Blackhole) = invokeAndSum(asmGeneric, blackhole)\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "43ab4671553cdd00acbfc97b6e2a5ee10b75e574fc676fea586b262d36d9dba3"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ExpressionsInterpretersBenchmark\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 16,
      "length": 32,
      "code": {
        "startLine": 20,
        "length": 32,
        "offset": 40,
        "surroundingCode": "\n@State(Scope.Benchmark)\ninternal class ExpressionsInterpretersBenchmark {\n    /**\n     * Benchmark case for [Expression] created with [expressionInExtendedField]."
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c5a18dbe6a4febac34203cd3dae7bc16d703c83bc4eeca618ccb8de40c7aedba"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"asmPrimitiveExpression\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "benchmarks/src/jvmMain/kotlin/space/kscience/kmath/benchmarks/ExpressionsInterpretersBenchmark.kt",
      "language": "kotlin",
      "line": 62,
      "offset": 9,
      "length": 22,
      "code": {
        "startLine": 60,
        "length": 22,
        "offset": 31,
        "surroundingCode": "     */\n    @Benchmark\n    fun asmPrimitiveExpression(blackhole: Blackhole) = invokeAndSum(asmPrimitive, blackhole)\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.benchmarks.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "061932b8d38c399d05f65489cef977f4c7f5e0ae00b1f88d04f2c22f69c9b944"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"JBigDecimalField\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/jvmMain/kotlin/space/kscience/kmath/operations/BigNumbers.kt",
      "language": "kotlin",
      "line": 59,
      "offset": 14,
      "length": 16,
      "code": {
        "startLine": 57,
        "length": 16,
        "offset": 47,
        "surroundingCode": " * A field over [BigDecimal].\n */\npublic class JBigDecimalField(mathContext: MathContext = MathContext.DECIMAL64) : JBigDecimalFieldBase(mathContext) {\n    public companion object : JBigDecimalFieldBase()\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "23c889ec6809325fa65da553b720e763c779ca262ebf05513f3446465754d108"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"mapToMutableBuffer\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/nd/BufferND.kt",
      "language": "kotlin",
      "line": 71,
      "offset": 62,
      "length": 18,
      "code": {
        "startLine": 69,
        "length": 18,
        "offset": 193,
        "surroundingCode": " * Transform structure to a new structure using provided [MutableBufferFactory] and optimizing if argument is [MutableBufferND]\n */\npublic inline fun <T, reified R : Any> MutableStructureND<T>.mapToMutableBuffer(\n    factory: MutableBufferFactory<R> = MutableBuffer.Companion::auto,\n    crossinline transform: (T) -> R,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c6ba22b7e454a124d32a0f01d3ce3b1763223f7974f86fda32c3bdeb48f70ed8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"withNdAlgebra\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/nd/ShortRingND.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 33,
      "length": 13,
      "code": {
        "startLine": 28,
        "length": 13,
        "offset": 35,
        "surroundingCode": "}\n\npublic inline fun <R> ShortRing.withNdAlgebra(vararg shape: Int, action: ShortRingND.() -> R): R {\n    contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n    return ShortRingND(shape).run(action)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "94976a37b040de6d7a55e0f4baf125f00cd693c77159304dc1566671933e3f01"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"asND\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/nd/Structure1D.kt",
      "language": "kotlin",
      "line": 134,
      "offset": 26,
      "length": 4,
      "code": {
        "startLine": 132,
        "length": 4,
        "offset": 70,
        "surroundingCode": " * Represent this buffer as 1D structure\n */\npublic fun <T> Buffer<T>.asND(): Structure1D<T> = Buffer1DWrapper(this)\n\n/**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ab76f89418dfa854b477552646ee9a78704e612fc44860d16980cc8285c513be"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"asND\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/nd/Structure1D.kt",
      "language": "kotlin",
      "line": 139,
      "offset": 39,
      "length": 4,
      "code": {
        "startLine": 137,
        "length": 4,
        "offset": 99,
        "surroundingCode": " * Expose inner buffer of this [Structure1D] if possible\n */\ninternal fun <T : Any> Structure1D<T>.asND(): Buffer<T> = when {\n    this is Buffer1DWrapper<T> -> buffer\n    this is Structure1DWrapper && structure is BufferND<T> -> structure.buffer"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "459fd084ca4cf8fd906dc14eccf3b83d5765164c9f9cec953a47b3451db9fc6a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"asND\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/nd/Structure2D.kt",
      "language": "kotlin",
      "line": 167,
      "offset": 40,
      "length": 4,
      "code": {
        "startLine": 165,
        "length": 4,
        "offset": 54,
        "surroundingCode": "    else this\n\ninternal fun <T> MutableStructure2D<T>.asND(): MutableStructureND<T> =\n    if (this is MutableStructure2DWrapper) structure else this\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2f2202746674cca1baf40f9b3105ccb04dce3e30777af44eabac5f1e0e165903"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"asColumnarData\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/data/ColumnarData.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 31,
      "length": 14,
      "code": {
        "startLine": 35,
        "length": 14,
        "offset": 82,
        "surroundingCode": "@OptIn(PerformancePitfall::class)\n@UnstableKMathAPI\npublic fun <T> Structure2D<T>.asColumnarData(mapping: Map<Symbol, Int>): ColumnarData<T> {\n    require(shape[1] >= mapping.maxOf { it.value }) { \"Column index out of bounds\" }\n    return object : ColumnarData<T> {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ae3875b9eec2d047a9cff85886a55ea36366852859657c4a4c44139d152e5022"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"asXYData\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/data/XYColumnarData.kt",
      "language": "kotlin",
      "line": 54,
      "offset": 32,
      "length": 8,
      "code": {
        "startLine": 52,
        "length": 8,
        "offset": 53,
        "surroundingCode": " */\n@UnstableKMathAPI\npublic fun <T> ColumnarData<T>.asXYData(\n    xSymbol: Symbol,\n    ySymbol: Symbol,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "119773325431224d54ff0d0b91c87b5b157a7048928a24008646323fceac3041"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"asXYData\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/data/XYColumnarData.kt",
      "language": "kotlin",
      "line": 78,
      "offset": 31,
      "length": 8,
      "code": {
        "startLine": 76,
        "length": 8,
        "offset": 82,
        "surroundingCode": "@OptIn(PerformancePitfall::class)\n@UnstableKMathAPI\npublic fun <T> Structure2D<T>.asXYData(xIndex: Int = 0, yIndex: Int = 1): XYColumnarData<T, T, T> {\n    require(shape[1] >= max(xIndex, yIndex)) { \"Column index out of bounds\" }\n    return object : XYColumnarData<T, T, T> {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b006e38847b2b216b4b82a4dd23f5cab56d62c9053236fcd28ab470b30eefdc3"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Interface \"XYZColumnarData\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/data/XYZColumnarData.kt",
      "language": "kotlin",
      "line": 17,
      "offset": 18,
      "length": 15,
      "code": {
        "startLine": 15,
        "length": 15,
        "offset": 39,
        "surroundingCode": " */\n@UnstableKMathAPI\npublic interface XYZColumnarData<out T, out X : T, out Y : T, out Z : T> : XYColumnarData<T, X, Y> {\n    public val z: Buffer<Z>\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4264bc01c88e56e39b0042da5890ab33527376aea637061535f77744d7252142"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"sortedDescending\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/misc/sorting.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 42,
      "length": 16,
      "code": {
        "startLine": 36,
        "length": 16,
        "offset": 77,
        "surroundingCode": " */\n@OptIn(UnstableKMathAPI::class)\npublic fun <V : Comparable<V>> Buffer<V>.sortedDescending(): Buffer<V> {\n    val permutations = indicesSortedDescending()\n    return VirtualBuffer(size) { this[permutations[it]] }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "441cb8cedcaa953ba4c3fb9eeb980e532adc14bb944a27b41e050f27ffe60d26"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"sortedBy\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/misc/sorting.kt",
      "language": "kotlin",
      "line": 48,
      "offset": 45,
      "length": 8,
      "code": {
        "startLine": 46,
        "length": 8,
        "offset": 77,
        "surroundingCode": "\n@OptIn(UnstableKMathAPI::class)\npublic fun <V, C : Comparable<C>> Buffer<V>.sortedBy(selector: (V) -> C): Buffer<V> {\n    val permutations = indicesSortedBy(selector)\n    return VirtualBuffer(size) { this[permutations[it]] }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3cb4deaff702429e7a67d28de85c69c9301c6469d5ae2bdd1def5379e2acc07e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"sortedByDescending\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/misc/sorting.kt",
      "language": "kotlin",
      "line": 58,
      "offset": 45,
      "length": 18,
      "code": {
        "startLine": 56,
        "length": 18,
        "offset": 77,
        "surroundingCode": "\n@OptIn(UnstableKMathAPI::class)\npublic fun <V, C : Comparable<C>> Buffer<V>.sortedByDescending(selector: (V) -> C): Buffer<V> {\n    val permutations = indicesSortedByDescending(selector)\n    return VirtualBuffer(size) { this[permutations[it]] }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4c14a1f4383c7e7f4c4a1cf1831d827a7354944150e994ddcfea5c9971719b51"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"requireSorted\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/misc/sorting.kt",
      "language": "kotlin",
      "line": 88,
      "offset": 42,
      "length": 13,
      "code": {
        "startLine": 86,
        "length": 13,
        "offset": 147,
        "surroundingCode": " * Checks that the [Buffer] is sorted (ascending) and throws [IllegalArgumentException] if it is not.\n */\npublic fun <T : Comparable<T>> Buffer<T>.requireSorted() {\n    for (i in 0..(size - 2)) {\n        require(get(i + 1) >= get(i)) { \"The buffer is not sorted at index $i\" }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "38b6ab6acba6cf3e38cefac72398062446186998e2025a5a71fa2ebc6a79809a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"cumulativeSum\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/misc/cumulative.kt",
      "language": "kotlin",
      "line": 45,
      "offset": 28,
      "length": 13,
      "code": {
        "startLine": 43,
        "length": 13,
        "offset": 67,
        "surroundingCode": " * Cumulative sum with custom space\n */\npublic fun <T> Iterable<T>.cumulativeSum(group: Ring<T>): Iterable<T> =\n    group { cumulative(zero) { element: T, sum: T -> sum + element } }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0948c71aeae80523882b3c7ae4d4b254f694e079c202209a5310aeed7926d04e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"cumulativeSum\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/misc/cumulative.kt",
      "language": "kotlin",
      "line": 49,
      "offset": 29,
      "length": 13,
      "code": {
        "startLine": 47,
        "length": 13,
        "offset": 63,
        "surroundingCode": "\n@JvmName(\"cumulativeSumOfDouble\")\npublic fun Iterable<Double>.cumulativeSum(): Iterable<Double> = cumulative(0.0) { element, sum -> sum + element }\n\n@JvmName(\"cumulativeSumOfInt\")"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a6ce312f4988bc7f63a4d1ec74da9490535570c964e15dc3cd1c0f09615fc4db"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"cumulativeSum\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/misc/cumulative.kt",
      "language": "kotlin",
      "line": 52,
      "offset": 26,
      "length": 13,
      "code": {
        "startLine": 50,
        "length": 13,
        "offset": 57,
        "surroundingCode": "\n@JvmName(\"cumulativeSumOfInt\")\npublic fun Iterable<Int>.cumulativeSum(): Iterable<Int> = cumulative(0) { element, sum -> sum + element }\n\n@JvmName(\"cumulativeSumOfLong\")"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0b98e7ee85444021c60bfb5795ca235f28b3dc156680aecc81c9830c912aea6b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"cumulativeSum\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/misc/cumulative.kt",
      "language": "kotlin",
      "line": 55,
      "offset": 27,
      "length": 13,
      "code": {
        "startLine": 53,
        "length": 13,
        "offset": 59,
        "surroundingCode": "\n@JvmName(\"cumulativeSumOfLong\")\npublic fun Iterable<Long>.cumulativeSum(): Iterable<Long> = cumulative(0L) { element, sum -> sum + element }\n\npublic fun <T> Sequence<T>.cumulativeSum(group: Ring<T>): Sequence<T> ="
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1670de58ce5f5d71241f75448dd09aae94435a233a36ef11646cee55b2f8d897"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"cumulativeSum\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/misc/cumulative.kt",
      "language": "kotlin",
      "line": 57,
      "offset": 28,
      "length": 13,
      "code": {
        "startLine": 55,
        "length": 13,
        "offset": 137,
        "surroundingCode": "public fun Iterable<Long>.cumulativeSum(): Iterable<Long> = cumulative(0L) { element, sum -> sum + element }\n\npublic fun <T> Sequence<T>.cumulativeSum(group: Ring<T>): Sequence<T> =\n    group { cumulative(zero) { element: T, sum: T -> sum + element } }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "7aea56ebd5293cf4f844fcccff6e866382ba149523c4fe61a6aa38c3524d6c7d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"cumulativeSum\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/misc/cumulative.kt",
      "language": "kotlin",
      "line": 61,
      "offset": 29,
      "length": 13,
      "code": {
        "startLine": 59,
        "length": 13,
        "offset": 63,
        "surroundingCode": "\n@JvmName(\"cumulativeSumOfDouble\")\npublic fun Sequence<Double>.cumulativeSum(): Sequence<Double> = cumulative(0.0) { element, sum -> sum + element }\n\n@JvmName(\"cumulativeSumOfInt\")"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d54c65211df139e32b5d583e6cb14e24752fccae694e16651949070b578dc6c6"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"cumulativeSum\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/misc/cumulative.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 26,
      "length": 13,
      "code": {
        "startLine": 62,
        "length": 13,
        "offset": 57,
        "surroundingCode": "\n@JvmName(\"cumulativeSumOfInt\")\npublic fun Sequence<Int>.cumulativeSum(): Sequence<Int> = cumulative(0) { element, sum -> sum + element }\n\n@JvmName(\"cumulativeSumOfLong\")"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "577027f6f466f1aca7bd70d718d6e3dbbf16cfd6d70e085cca67a56272b4c1e8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"cumulativeSum\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/misc/cumulative.kt",
      "language": "kotlin",
      "line": 67,
      "offset": 27,
      "length": 13,
      "code": {
        "startLine": 65,
        "length": 13,
        "offset": 59,
        "surroundingCode": "\n@JvmName(\"cumulativeSumOfLong\")\npublic fun Sequence<Long>.cumulativeSum(): Sequence<Long> = cumulative(0L) { element, sum -> sum + element }\n\npublic fun <T> List<T>.cumulativeSum(group: Ring<T>): List<T> ="
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6e495a86c87cfd89a8a09d83997b21ddce60e450f0a921454b713b7cc09ff454"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"cumulativeSum\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/misc/cumulative.kt",
      "language": "kotlin",
      "line": 69,
      "offset": 24,
      "length": 13,
      "code": {
        "startLine": 67,
        "length": 13,
        "offset": 133,
        "surroundingCode": "public fun Sequence<Long>.cumulativeSum(): Sequence<Long> = cumulative(0L) { element, sum -> sum + element }\n\npublic fun <T> List<T>.cumulativeSum(group: Ring<T>): List<T> =\n    group { cumulative(zero) { element: T, sum: T -> sum + element } }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c995cb6dd58ab2674e85b0a255254401dc4cb8cee15c9bf2a8bc2768d735ec5b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"cumulativeSum\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/misc/cumulative.kt",
      "language": "kotlin",
      "line": 76,
      "offset": 22,
      "length": 13,
      "code": {
        "startLine": 74,
        "length": 13,
        "offset": 53,
        "surroundingCode": "\n@JvmName(\"cumulativeSumOfInt\")\npublic fun List<Int>.cumulativeSum(): List<Int> = cumulative(0) { element, sum -> sum + element }\n\n@JvmName(\"cumulativeSumOfLong\")"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "72efd1667649ad390858462946818999daeca999b2c6ec7fa6a03d46da2ba74e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"cumulativeSum\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/misc/cumulative.kt",
      "language": "kotlin",
      "line": 79,
      "offset": 23,
      "length": 13,
      "code": {
        "startLine": 77,
        "length": 13,
        "offset": 55,
        "surroundingCode": "\n@JvmName(\"cumulativeSumOfLong\")\npublic fun List<Long>.cumulativeSum(): List<Long> = cumulative(0L) { element, sum -> sum + element }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1b3c12d23540bddb6a48847d8b76b0d859ac4f6efa1dcfb1076d3e5c6049b6d1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"message\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/misc/annotations.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 28,
        "length": 7,
        "offset": 54,
        "surroundingCode": ")\npublic annotation class PerformancePitfall(\n    val message: String = \"Potential performance problem\"\n)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1e44e133a57d0e1e5a0b38e49d750aec83abe7b57c3c69d047dcc01eefb90dcd"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type alias \"MutableMatrix\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/linear/LinearSpace.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 18,
      "length": 13,
      "code": {
        "startLine": 26,
        "length": 13,
        "offset": 65,
        "surroundingCode": " */\npublic typealias Matrix<T> = Structure2D<T>\npublic typealias MutableMatrix<T> = MutableStructure2D<T>\n\n/**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4012e93e62dc99647a00b0eaccad9783ec128c3a9b41c831ab4143827c98cd12"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"withFeatures\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/linear/MatrixWrapper.kt",
      "language": "kotlin",
      "line": 58,
      "offset": 32,
      "length": 12,
      "code": {
        "startLine": 56,
        "length": 12,
        "offset": 81,
        "surroundingCode": " * Add a collection of features to a [Matrix]\n */\npublic fun <T : Any> Matrix<T>.withFeatures(newFeatures: Iterable<MatrixFeature>): MatrixWrapper<T> =\n    if (this is MatrixWrapper) {\n        MatrixWrapper(origin, features.with(newFeatures))"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e8242fdb81718dbb032255166605c262d18266952798617d82ae7cfbd6fd2f85"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"virtual\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/linear/VirtualMatrix.kt",
      "language": "kotlin",
      "line": 24,
      "offset": 42,
      "length": 7,
      "code": {
        "startLine": 22,
        "length": 7,
        "offset": 44,
        "surroundingCode": "}\n\npublic fun <T : Any> MatrixBuilder<T, *>.virtual(generator: (i: Int, j: Int) -> T): VirtualMatrix<T> =\n    VirtualMatrix(rows, columns, generator)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "89d5e6b10cc9eaeeb6369076e7e5fd631f242ab629a5f76470c0f3e70def6d08"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"DeterminantFeature\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/linear/MatrixFeatures.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 22,
      "length": 18,
      "code": {
        "startLine": 62,
        "length": 18,
        "offset": 51,
        "surroundingCode": " */\n@Suppress(\"FunctionName\")\npublic fun <T : Any> DeterminantFeature(determinant: T): DeterminantFeature<T> = object : DeterminantFeature<T> {\n    override val determinant: T = determinant\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "25cf5d3049907dad245c3ee067b29004cbddcf4dc11318106593d47dfa5dd82e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"center\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/domains/HyperSquareDomain.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 16,
      "length": 6,
      "code": {
        "startLine": 28,
        "length": 6,
        "offset": 67,
        "surroundingCode": "    override val dimension: Int get() = lower.size\n\n    public val center: DoubleBuffer get() = DoubleBuffer(dimension) { (lower[it] + upper[it]) / 2.0 }\n\n    override operator fun contains(point: Point<Double>): Boolean = point.indices.all { i ->"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5c0ba815568f80a20e2662e1bf4d92e12fafe1788b7656009578ebe5532a8ad0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"UnconstrainedDomain\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/domains/UnconstrainedDomain.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 14,
      "length": 19,
      "code": {
        "startLine": 9,
        "length": 19,
        "offset": 32,
        "surroundingCode": "\n@UnstableKMathAPI\npublic class UnconstrainedDomain(override val dimension: Int) : DoubleDomain {\n    override operator fun contains(point: Point<Double>): Boolean = true\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "7e966715161ebccd95257099dee08f8c7ff0ab735225e7813de240dc7687d4f2"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type alias \"TBase\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/BigInt.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 19,
      "length": 5,
      "code": {
        "startLine": 18,
        "length": 5,
        "offset": 59,
        "surroundingCode": "\nprivate typealias Magnitude = UIntArray\nprivate typealias TBase = ULong\n\n/**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f9de40ce1f3a8c5183e1042ed638d2442dbee862c0617e46fe3741484f044775"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"KMathContext\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/Algebra.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 25,
      "length": 12,
      "code": {
        "startLine": 14,
        "length": 12,
        "offset": 39,
        "surroundingCode": " */\n@DslMarker\npublic annotation class KMathContext\n\n/**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b88a6eb8eadad4ef7d7eac4a9b09415613cb1b9563ec20401dc1a7c546667416"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type alias \"BufferTransform\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/bufferOperation.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 18,
      "length": 15,
      "code": {
        "startLine": 12,
        "length": 15,
        "offset": 62,
        "surroundingCode": " * Typealias for buffer transformations.\n */\npublic typealias BufferTransform<T, R> = (Buffer<T>) -> Buffer<R>\n\n/**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "917ba0080cc73f75a306adb5ea4876a80a51d33cd28cdfd123765387cdb8975a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toTypedArray\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/bufferOperation.kt",
      "language": "kotlin",
      "line": 59,
      "offset": 41,
      "length": 12,
      "code": {
        "startLine": 57,
        "length": 12,
        "offset": 62,
        "surroundingCode": " */\n@UnstableKMathAPI\npublic inline fun <reified T> Buffer<T>.toTypedArray(): Array<T> = Array(size, ::get)\n\n/**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "eb595ff3df6ba7f46af9df449110940d27941e0788891841d02b6b0b7f63b179"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"DoubleBufferField\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/DoubleBufferField.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 14,
      "length": 17,
      "code": {
        "startLine": 16,
        "length": 17,
        "offset": 70,
        "surroundingCode": " * @property size the size of buffers to operate on.\n */\npublic class DoubleBufferField(public val size: Int) : ExtendedField<Buffer<Double>>, DoubleBufferOps() {\n    override val zero: Buffer<Double> by lazy { DoubleBuffer(size) { 0.0 } }\n    override val one: Buffer<Double> by lazy { DoubleBuffer(size) { 1.0 } }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "83d3d4383edbaa1476dfaa98b0ef1328df6c9dd14364583f27d588b5d8e3db4b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"sumWith\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/algebraExtensions.kt",
      "language": "kotlin",
      "line": 66,
      "offset": 28,
      "length": 7,
      "code": {
        "startLine": 64,
        "length": 7,
        "offset": 51,
        "surroundingCode": " * @return the sum.\n */\npublic fun <T> Iterable<T>.sumWith(group: Group<T>): T = group.sum(this)\n\n/**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c55354c06c57f17d9423afcbc6c75a597f2c215c0ac7cfdb780d01da80eba674"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"sumWith\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/algebraExtensions.kt",
      "language": "kotlin",
      "line": 75,
      "offset": 28,
      "length": 7,
      "code": {
        "startLine": 73,
        "length": 7,
        "offset": 51,
        "surroundingCode": " * @return the sum.\n */\npublic fun <T> Sequence<T>.sumWith(group: Group<T>): T = group.sum(this)\n\n/**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "44c4070473eadd1c8b52603d50007b281d6379fb2d899ce7255d9efd89fd6ab3"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"averageWith\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/algebraExtensions.kt",
      "language": "kotlin",
      "line": 85,
      "offset": 31,
      "length": 11,
      "code": {
        "startLine": 83,
        "length": 11,
        "offset": 65,
        "surroundingCode": " * @author Iaroslav Postovalov\n */\npublic fun <T, S> Iterable<T>.averageWith(space: S): T where S : Group<T>, S : ScaleOperations<T> =\n    space.average(this)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "68778de2d55cbcb77281cefdecd8662675692b325f8b72d78d9d59233fbb9c1e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"averageWith\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/operations/algebraExtensions.kt",
      "language": "kotlin",
      "line": 96,
      "offset": 31,
      "length": 11,
      "code": {
        "startLine": 94,
        "length": 11,
        "offset": 65,
        "surroundingCode": " * @author Iaroslav Postovalov\n */\npublic fun <T, S> Sequence<T>.averageWith(space: S): T where S : Group<T>, S : ScaleOperations<T> =\n    space.average(this)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "73563e81cace6ed99679f08333f43c452a5c4c1dae912ee261a6a768b0a153fe"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"asReadOnly\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/structures/Buffer.kt",
      "language": "kotlin",
      "line": 153,
      "offset": 26,
      "length": 10,
      "code": {
        "startLine": 151,
        "length": 10,
        "offset": 73,
        "surroundingCode": " * Convert this buffer to read-only buffer.\n */\npublic fun <T> Buffer<T>.asReadOnly(): Buffer<T> = if (this is MutableBuffer) ReadOnlyBuffer(this) else this"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "918aa3b1ff27873a3543a41ff26ecfe88ce8f6f7508a7dc92bcaf256ee1b646a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/structures/ListBuffer.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 16,
        "length": 11,
        "offset": 79,
        "surroundingCode": "public class ListBuffer<T>(public val list: List<T>) : Buffer<T> {\n\n    public constructor(size: Int, initializer: (Int) -> T) : this(List(size, initializer))\n\n    override val size: Int get() = list.size"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d6d38dfc1049535a57a4c7c86c632e10a39b290d50c7bf54c259ba87de328ec6"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toLongArray\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/structures/LongBuffer.kt",
      "language": "kotlin",
      "line": 48,
      "offset": 25,
      "length": 11,
      "code": {
        "startLine": 46,
        "length": 11,
        "offset": 103,
        "surroundingCode": " * Returns a new [LongArray] containing all the elements of this [Buffer].\n */\npublic fun Buffer<Long>.toLongArray(): LongArray = when (this) {\n    is LongBuffer -> array.copyOf()\n    else -> LongArray(size, ::get)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6d8ec396a2e69cd1d684d305835830ded6462040d7c6d5b4907b4ce668288b5a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toFloatArray\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/structures/FloatBuffer.kt",
      "language": "kotlin",
      "line": 49,
      "offset": 26,
      "length": 12,
      "code": {
        "startLine": 47,
        "length": 12,
        "offset": 105,
        "surroundingCode": " * Returns a new [FloatArray] containing all the elements of this [Buffer].\n */\npublic fun Buffer<Float>.toFloatArray(): FloatArray = when (this) {\n    is FloatBuffer -> array.copyOf()\n    else -> FloatArray(size, ::get)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "59c03a0dcccde61b8f2a715ad13587aa92885e9526a2309a8bc6ddcb665f3c08"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toShortArray\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/structures/ShortBuffer.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 26,
      "length": 12,
      "code": {
        "startLine": 44,
        "length": 12,
        "offset": 105,
        "surroundingCode": " * Returns a new [ShortArray] containing all the elements of this [Buffer].\n */\npublic fun Buffer<Short>.toShortArray(): ShortArray = when (this) {\n    is ShortBuffer -> array.copyOf()\n    else -> ShortArray(size, ::get)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "712fb9fc8b9c55e236306aa5714f10b5a53e111cdd3317c2c8464efe49a7e28e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"NAN\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/structures/FlaggedBuffer.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 17,
        "length": 3,
        "offset": 45,
        "surroundingCode": "     * Reports the value is NaN.\n     */\n    NAN(0b0000_0001),\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a502a9c7e57ead39667e5d5afc0b27bf5b4b588e53084ddc3eeaeba33deaae85"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"NEGATIVE_INFINITY\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/structures/FlaggedBuffer.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 5,
      "length": 17,
      "code": {
        "startLine": 27,
        "length": 17,
        "offset": 59,
        "surroundingCode": "     * Reports the value is negative infinity.\n     */\n    NEGATIVE_INFINITY(0b0000_0100),\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "192a4d88e923fa35f25cbe936670142361a4d72302dcfaa3dc2d373bb09bc067"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"isMissing\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/structures/FlaggedBuffer.kt",
      "language": "kotlin",
      "line": 51,
      "offset": 29,
      "length": 9,
      "code": {
        "startLine": 49,
        "length": 9,
        "offset": 150,
        "surroundingCode": "public fun FlaggedBuffer<*>.hasFlag(index: Int, flag: ValueFlag): Boolean = (getFlag(index) and flag.mask) != 0.toByte()\n\npublic fun FlaggedBuffer<*>.isMissing(index: Int): Boolean = hasFlag(index, ValueFlag.MISSING)\n\n/**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "79d3bfc73c586bd4882c543e16702f525c18988a2911eefcbae3f2472e214522"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"forEachValid\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/structures/FlaggedBuffer.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 39,
      "length": 12,
      "code": {
        "startLine": 75,
        "length": 12,
        "offset": 41,
        "surroundingCode": "}\n\npublic inline fun FlaggedDoubleBuffer.forEachValid(block: (Double) -> Unit) {\n    indices\n        .asSequence()"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "dd42f256db1f573f0bdf25f5e36ec815346d9450ea697c25b2e7bb44c09f1136"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"xError\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/expressions/Symbol.kt",
      "language": "kotlin",
      "line": 23,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 21,
        "length": 6,
        "offset": 92,
        "surroundingCode": "    public companion object {\n        public val x: Symbol = Symbol(\"x\")\n        public val xError: Symbol = Symbol(\"x.error\")\n        public val y: Symbol = Symbol(\"y\")\n        public val yError: Symbol = Symbol(\"y.error\")"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "37bbd33d74a448eb21a91295d048642b1ea749ad834aeaba1f8841fdec8a1a01"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"zError\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/expressions/Symbol.kt",
      "language": "kotlin",
      "line": 27,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 25,
        "length": 6,
        "offset": 116,
        "surroundingCode": "        public val yError: Symbol = Symbol(\"y.error\")\n        public val z: Symbol = Symbol(\"z\")\n        public val zError: Symbol = Symbol(\"z.error\")\n    }\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f2c18e8f9b4305088b3e19121efa7e6827f8b03b80618267a70371e9205942c2"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toPoint\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/expressions/SymbolIndexer.kt",
      "language": "kotlin",
      "line": 62,
      "offset": 35,
      "length": 7,
      "code": {
        "startLine": 60,
        "length": 7,
        "offset": 118,
        "surroundingCode": "    public fun <T> Map<Symbol, T>.toList(): List<T> = symbols.map { getValue(it) }\n\n    public fun <T> Map<Symbol, T>.toPoint(bufferFactory: BufferFactory<T>): Point<T> =\n        bufferFactory(symbols.size) { getValue(symbols[it]) }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ed7aee1c6dee96c4e9455a9cccad950e765274a97bae000c700e286b27043351"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"withSymbols\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/expressions/SymbolIndexer.kt",
      "language": "kotlin",
      "line": 80,
      "offset": 23,
      "length": 11,
      "code": {
        "startLine": 78,
        "length": 11,
        "offset": 44,
        "surroundingCode": " */\n@UnstableKMathAPI\npublic inline fun <R> withSymbols(vararg symbols: Symbol, block: SymbolIndexer.() -> R): R {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return with(SimpleSymbolIndexer(symbols.toList()), block)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3cb98c8d1fda6425e8d774e9a31c1bc27dc6f3c24cf2cbbb25093efb5683cfce"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"SimpleAutoDiffExtendedField\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/expressions/SimpleAutoDiff.kt",
      "language": "kotlin",
      "line": 343,
      "offset": 14,
      "length": 27,
      "code": {
        "startLine": 341,
        "length": 27,
        "offset": 99,
        "surroundingCode": "    derive(const { atanh(x.value) }) { z -> x.d += z.d / (one - x.value * x.value) }\n\npublic class SimpleAutoDiffExtendedField<T : Any, F : ExtendedField<T>>(\n    context: F,\n    bindings: Map<Symbol, T>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "222e6a74028972d3f176593fa93f2a104ccd35f9472084f9aef46832e5466597"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"sqr\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/expressions/SimpleAutoDiff.kt",
      "language": "kotlin",
      "line": 353,
      "offset": 16,
      "length": 3,
      "code": {
        "startLine": 351,
        "length": 3,
        "offset": 29,
        "surroundingCode": "\n    // x ^ 2\n    public fun sqr(x: AutoDiffValue<T>): AutoDiffValue<T> =\n        (this as SimpleAutoDiffField<T, F>).sqr(x)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "35fe7a9831eb3b78c4b70419aa35a28506b1a0abaa64468bda8bc040d2d69c67"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"expressionInGroup\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/expressions/FunctionalExpressionAlgebra.kt",
      "language": "kotlin",
      "line": 169,
      "offset": 39,
      "length": 17,
      "code": {
        "startLine": 167,
        "length": 17,
        "offset": 41,
        "surroundingCode": "}\n\npublic inline fun <T, A : Group<T>> A.expressionInGroup(\n    block: FunctionalExpressionGroup<T, A>.() -> Expression<T>,\n): Expression<T> {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "02e2edc0cfdc78dc234086b0e7a5e1ae91a28a1021a8ff7fa03709f5a9a8e90c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"expressionInRing\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/expressions/FunctionalExpressionAlgebra.kt",
      "language": "kotlin",
      "line": 176,
      "offset": 38,
      "length": 16,
      "code": {
        "startLine": 174,
        "length": 16,
        "offset": 40,
        "surroundingCode": "}\n\npublic inline fun <T, A : Ring<T>> A.expressionInRing(\n    block: FunctionalExpressionRing<T, A>.() -> Expression<T>,\n): Expression<T> {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3042fb2c8f43676fe1d4370c3ee9ab76a3d367025c956dd107eca9db9a779dd3"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"expressionInField\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-core/src/commonMain/kotlin/space/kscience/kmath/expressions/FunctionalExpressionAlgebra.kt",
      "language": "kotlin",
      "line": 183,
      "offset": 39,
      "length": 17,
      "code": {
        "startLine": 181,
        "length": 17,
        "offset": 41,
        "surroundingCode": "}\n\npublic inline fun <T, A : Field<T>> A.expressionInField(\n    block: FunctionalExpressionField<T, A>.() -> Expression<T>,\n): Expression<T> {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-core.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "10b25226b7be38af18b473c84bbff32f78ba3b2d3d578b3db0d2c79e85283c1d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"solve\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ejml/src/main/kotlin/space/kscience/kmath/ejml/_generated.kt",
      "language": "kotlin",
      "line": 976,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 974,
        "length": 5,
        "offset": 75,
        "surroundingCode": "     * @return the solution for *x* that is n by p.\n     */\n    public fun solve(a: Matrix<Float>, b: Matrix<Float>): EjmlFloatMatrix<FMatrixSparseCSC> {\n        val res = FMatrixSparseCSC(1, 1)\n        CommonOps_FSCC.solve(FMatrixSparseCSC(a.toEjml().origin), FMatrixSparseCSC(b.toEjml().origin), res)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ejml.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "35f9b8bfd7c432feed40bc86f4ba669541347943707de007adca1ca5b61c132a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Object \"EjmlLinearSpaceFDRM\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ejml/src/main/kotlin/space/kscience/kmath/ejml/_generated.kt",
      "language": "kotlin",
      "line": 308,
      "offset": 15,
      "length": 19,
      "code": {
        "startLine": 306,
        "length": 19,
        "offset": 45,
        "surroundingCode": " * [FMatrixRMaj] matrices.\n */\npublic object EjmlLinearSpaceFDRM : EjmlLinearSpace<Float, FloatField, FMatrixRMaj>() {\n    /**\n     * The [FloatField] reference."
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ejml.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0bc6eb95e908963d1eb3935cd0704b5a519416fc98cf3428bae594fb38b6289d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"solve\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ejml/src/main/kotlin/space/kscience/kmath/ejml/_generated.kt",
      "language": "kotlin",
      "line": 747,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 745,
        "length": 5,
        "offset": 75,
        "surroundingCode": "     * @return the solution for *x* that is n by p.\n     */\n    public fun solve(a: Matrix<Double>, b: Matrix<Double>): EjmlDoubleMatrix<DMatrixSparseCSC> {\n        val res = DMatrixSparseCSC(1, 1)\n        CommonOps_DSCC.solve(DMatrixSparseCSC(a.toEjml().origin), DMatrixSparseCSC(b.toEjml().origin), res)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ejml.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "718c7077cf7d27f25f7d9c6168658eb3eb704e5b9713f5ef06e38fe2dea37663"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"solve\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ejml/src/main/kotlin/space/kscience/kmath/ejml/_generated.kt",
      "language": "kotlin",
      "line": 989,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 987,
        "length": 5,
        "offset": 75,
        "surroundingCode": "     * @return the solution for *x* that is n by p.\n     */\n    public fun solve(a: Matrix<Float>, b: Point<Float>): EjmlFloatVector<FMatrixSparseCSC> {\n        val res = FMatrixSparseCSC(1, 1)\n        CommonOps_FSCC.solve(FMatrixSparseCSC(a.toEjml().origin), FMatrixSparseCSC(b.toEjml().origin), res)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ejml.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1af0b04f59302eb33465351eb0a87e6bbd10fee3c1db7f93c4aa33dd55fed267"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"solve\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ejml/src/main/kotlin/space/kscience/kmath/ejml/_generated.kt",
      "language": "kotlin",
      "line": 284,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 282,
        "length": 5,
        "offset": 75,
        "surroundingCode": "     * @return the solution for *x* that is n by p.\n     */\n    public fun solve(a: Matrix<Double>, b: Matrix<Double>): EjmlDoubleMatrix<DMatrixRMaj> {\n        val res = DMatrixRMaj(1, 1)\n        CommonOps_DDRM.solve(DMatrixRMaj(a.toEjml().origin), DMatrixRMaj(b.toEjml().origin), res)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ejml.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b2e32b854998d915c6175397623b83e054520f5770673f4d80f445d2b0bc6ec9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Object \"EjmlLinearSpaceDSCC\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ejml/src/main/kotlin/space/kscience/kmath/ejml/_generated.kt",
      "language": "kotlin",
      "line": 542,
      "offset": 15,
      "length": 19,
      "code": {
        "startLine": 540,
        "length": 19,
        "offset": 50,
        "surroundingCode": " * [DMatrixSparseCSC] matrices.\n */\npublic object EjmlLinearSpaceDSCC : EjmlLinearSpace<Double, DoubleField, DMatrixSparseCSC>() {\n    /**\n     * The [DoubleField] reference."
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ejml.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "df1d716dca8174e1a82079fd10c92cc966160dbf5d42f7cac1480112f1ab90af"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"solve\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ejml/src/main/kotlin/space/kscience/kmath/ejml/_generated.kt",
      "language": "kotlin",
      "line": 531,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 529,
        "length": 5,
        "offset": 75,
        "surroundingCode": "     * @return the solution for *x* that is n by p.\n     */\n    public fun solve(a: Matrix<Float>, b: Point<Float>): EjmlFloatVector<FMatrixRMaj> {\n        val res = FMatrixRMaj(1, 1)\n        CommonOps_FDRM.solve(FMatrixRMaj(a.toEjml().origin), FMatrixRMaj(b.toEjml().origin), res)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ejml.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "64f082f2e4d0422251aa46ad013555d1e56805929e3c4b9ed802e776faad8167"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Object \"EjmlLinearSpaceFSCC\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ejml/src/main/kotlin/space/kscience/kmath/ejml/_generated.kt",
      "language": "kotlin",
      "line": 771,
      "offset": 15,
      "length": 19,
      "code": {
        "startLine": 769,
        "length": 19,
        "offset": 50,
        "surroundingCode": " * [FMatrixSparseCSC] matrices.\n */\npublic object EjmlLinearSpaceFSCC : EjmlLinearSpace<Float, FloatField, FMatrixSparseCSC>() {\n    /**\n     * The [FloatField] reference."
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ejml.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d40fed732adc5a23551e078877f36cbc5788cd6324817d3e33b430244ff8ac14"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"solve\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ejml/src/main/kotlin/space/kscience/kmath/ejml/_generated.kt",
      "language": "kotlin",
      "line": 518,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 516,
        "length": 5,
        "offset": 75,
        "surroundingCode": "     * @return the solution for *x* that is n by p.\n     */\n    public fun solve(a: Matrix<Float>, b: Matrix<Float>): EjmlFloatMatrix<FMatrixRMaj> {\n        val res = FMatrixRMaj(1, 1)\n        CommonOps_FDRM.solve(FMatrixRMaj(a.toEjml().origin), FMatrixRMaj(b.toEjml().origin), res)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ejml.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d09f2d54eade0b36e32fdfa65edd95e7a2458cae016664ee7123d74fadda22d6"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"solve\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ejml/src/main/kotlin/space/kscience/kmath/ejml/_generated.kt",
      "language": "kotlin",
      "line": 760,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 758,
        "length": 5,
        "offset": 75,
        "surroundingCode": "     * @return the solution for *x* that is n by p.\n     */\n    public fun solve(a: Matrix<Double>, b: Point<Double>): EjmlDoubleVector<DMatrixSparseCSC> {\n        val res = DMatrixSparseCSC(1, 1)\n        CommonOps_DSCC.solve(DMatrixSparseCSC(a.toEjml().origin), DMatrixSparseCSC(b.toEjml().origin), res)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ejml.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "304ebe7c3ea657dc8f7b9681f238fc56151184a5de78a6398058c114df5ed214"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"solve\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-ejml/src/main/kotlin/space/kscience/kmath/ejml/_generated.kt",
      "language": "kotlin",
      "line": 297,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 295,
        "length": 5,
        "offset": 75,
        "surroundingCode": "     * @return the solution for *x* that is n by p.\n     */\n    public fun solve(a: Matrix<Double>, b: Point<Double>): EjmlDoubleVector<DMatrixRMaj> {\n        val res = DMatrixRMaj(1, 1)\n        CommonOps_DDRM.solve(DMatrixRMaj(a.toEjml().origin), DMatrixRMaj(b.toEjml().origin), res)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-ejml.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "031f52477b4ff958fca4a28e73cd0e01e1b0956446bd728c8a2686233147a1d5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"multiply\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-nd4j/src/main/kotlin/space/kscience/kmath/nd4j/Nd4jArrayAlgebra.kt",
      "language": "kotlin",
      "line": 85,
      "offset": 16,
      "length": 8,
      "code": {
        "startLine": 83,
        "length": 8,
        "offset": 45,
        "surroundingCode": "        ndArray.neg().wrap()\n\n    public fun multiply(a: StructureND<T>, k: Number): Nd4jArrayStructure<T> =\n        a.ndArray.mul(k).wrap()\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-nd4j.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f9eadf958dbb6c6f7f868246ca6492bdbfbd1ab577b7fad9976fe58dd936e1eb"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"nd4j\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-nd4j/src/main/kotlin/space/kscience/kmath/nd4j/Nd4jArrayAlgebra.kt",
      "language": "kotlin",
      "line": 313,
      "offset": 20,
      "length": 4,
      "code": {
        "startLine": 311,
        "length": 4,
        "offset": 123,
        "surroundingCode": "public class IntNd4jArrayRing(override val shape: Shape) : IntNd4jArrayRingOps(), RingND<Int, IntRing>\n\npublic fun IntRing.nd4j(shapeFirst: Int, vararg shapeRest: Int): IntNd4jArrayRing =\n    IntNd4jArrayRing(intArrayOf(shapeFirst, * shapeRest))"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-nd4j.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b1d4e8d2d05e2056d21ba597445afb833851c31e590f1e87452ffda7e20542b1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"nd4j\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-nd4j/src/main/kotlin/space/kscience/kmath/nd4j/Nd4jArrayAlgebra.kt",
      "language": "kotlin",
      "line": 225,
      "offset": 24,
      "length": 4,
      "code": {
        "startLine": 223,
        "length": 4,
        "offset": 143,
        "surroundingCode": "public class DoubleNd4jArrayField(override val shape: Shape) : DoubleNd4jArrayFieldOps(), FieldND<Double, DoubleField>\n\npublic fun DoubleField.nd4j(shapeFirst: Int, vararg shapeRest: Int): DoubleNd4jArrayField =\n    DoubleNd4jArrayField(intArrayOf(shapeFirst, * shapeRest))\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-nd4j.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ee83b2e88860606dac5e4b638710858d6631f06d22727feb82eddf6e8182a0e8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"nd4j\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-nd4j/src/main/kotlin/space/kscience/kmath/nd4j/Nd4jArrayAlgebra.kt",
      "language": "kotlin",
      "line": 274,
      "offset": 23,
      "length": 4,
      "code": {
        "startLine": 272,
        "length": 4,
        "offset": 105,
        "surroundingCode": "public val FloatField.nd4j: FloatNd4jArrayFieldOps get() = FloatNd4jArrayFieldOps\n\npublic fun FloatField.nd4j(shapeFirst: Int, vararg shapeRest: Int): FloatNd4jArrayField =\n    FloatNd4jArrayField(intArrayOf(shapeFirst, * shapeRest))\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-nd4j.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "7cb1ce20ab003c8c0191498a201913f56bf05ddd54cda72d467c195222ac7b1a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Object \"DoubleNd4jTensorAlgebra\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-nd4j/src/main/kotlin/space/kscience/kmath/nd4j/Nd4jTensorAlgebra.kt",
      "language": "kotlin",
      "line": 166,
      "offset": 15,
      "length": 23,
      "code": {
        "startLine": 164,
        "length": 23,
        "offset": 69,
        "surroundingCode": " * [Double] specialization of [Nd4jTensorAlgebra].\n */\npublic object DoubleNd4jTensorAlgebra : Nd4jTensorAlgebra<Double, DoubleField> {\n\n    override val elementAlgebra: DoubleField get() = DoubleField"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-nd4j.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0a25b9b3fe5128df431fda2184783190f7a3c6f6ac0369fd7d922dc02376ba15"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"mersenneTwister\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/jvmMain/kotlin/space/kscience/kmath/stat/RandomSourceGenerator.kt",
      "language": "kotlin",
      "line": 134,
      "offset": 38,
      "length": 15,
      "code": {
        "startLine": 132,
        "length": 15,
        "offset": 127,
        "surroundingCode": " * Returns [RandomSourceGenerator] with [RandomSource.MT] algorithm and given [seed].\n */\npublic fun RandomGenerator.Companion.mersenneTwister(seed: Long? = null): RandomSourceGenerator =\n    fromSource(RandomSource.MT, seed)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "beba025664f7082f5877a6c025b510227759f765dcb4722893de80b9eeb008c9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"asUniformRandomProvider\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/jvmMain/kotlin/space/kscience/kmath/stat/RandomSourceGenerator.kt",
      "language": "kotlin",
      "line": 120,
      "offset": 28,
      "length": 23,
      "code": {
        "startLine": 118,
        "length": 23,
        "offset": 100,
        "surroundingCode": " * Getting new value from one of those changes the state of another.\n */\npublic fun RandomGenerator.asUniformRandomProvider(): UniformRandomProvider = if (this is RandomSourceGenerator)\n    random\nelse"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "8945eb23425f992aa206de0275a1199450bf0eb4b276687d148086322354b5da"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"evaluate\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/stat/Mean.kt",
      "language": "kotlin",
      "line": 54,
      "offset": 20,
      "length": 8,
      "code": {
        "startLine": 52,
        "length": 8,
        "offset": 119,
        "surroundingCode": "\n        public fun evaluate(buffer: Buffer<Double>): Double = Double.mean.evaluateBlocking(buffer)\n        public fun evaluate(buffer: Buffer<Int>): Int = Int.mean.evaluateBlocking(buffer)\n        public fun evaluate(buffer: Buffer<Long>): Long = Long.mean.evaluateBlocking(buffer)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d776b07cff5427a078da2aa257e7df5888286068da8b1919a23faf57d30d350a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"evaluate\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/stat/Mean.kt",
      "language": "kotlin",
      "line": 55,
      "offset": 20,
      "length": 8,
      "code": {
        "startLine": 53,
        "length": 8,
        "offset": 208,
        "surroundingCode": "        public fun evaluate(buffer: Buffer<Double>): Double = Double.mean.evaluateBlocking(buffer)\n        public fun evaluate(buffer: Buffer<Int>): Int = Int.mean.evaluateBlocking(buffer)\n        public fun evaluate(buffer: Buffer<Long>): Long = Long.mean.evaluateBlocking(buffer)\n    }\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c04344fb62208b08400d3dcfaf49b5481f9018eaac2f4c987c7e54bf5d8bd1e1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"Median\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/stat/Median.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 14,
      "length": 6,
      "code": {
        "startLine": 12,
        "length": 6,
        "offset": 42,
        "surroundingCode": " * Non-composable median\n */\npublic class Median<T>(private val comparator: Comparator<T>) : BlockingStatistic<T, T> {\n    override fun evaluateBlocking(data: Buffer<T>): T =\n        data.asSequence().sortedWith(comparator).toList()[data.size / 2] //TODO check if this is correct"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b0837661b286286ce072313f1a654c05539f95cd5983d9a5ba38643936755ee5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"sampleBuffer\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/stat/Sampler.kt",
      "language": "kotlin",
      "line": 68,
      "offset": 25,
      "length": 12,
      "code": {
        "startLine": 66,
        "length": 12,
        "offset": 56,
        "surroundingCode": " */\n@JvmName(\"sampleIntBuffer\")\npublic fun Sampler<Int>.sampleBuffer(generator: RandomGenerator, size: Int): Chain<Buffer<Int>> =\n    sampleBuffer(generator, size, ::IntBuffer)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "db959a507ea7823357dc7eb34fb4ac525b52a4710fbb155ad53c53d80302dd17"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"UniformDoubleChain\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/stat/RandomChain.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 14,
      "length": 18,
      "code": {
        "startLine": 31,
        "length": 18,
        "offset": 62,
        "surroundingCode": " * A type-specific double chunk random chain\n */\npublic class UniformDoubleChain(public val generator: RandomGenerator) : BlockingDoubleChain {\n    override fun nextBufferBlocking(size: Int): DoubleBuffer = generator.nextDoubleBuffer(size)\n    override suspend fun nextBuffer(size: Int): DoubleBuffer = nextBufferBlocking(size)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "721af8f681793e06e20170288e8f4efd6271755babf47dbf5d7058d706199c72"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"SamplerSpace\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/stat/SamplerAlgebra.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 14,
      "length": 12,
      "code": {
        "startLine": 37,
        "length": 12,
        "offset": 103,
        "surroundingCode": " * @property algebra the space to provide addition and scalar multiplication for [T].\n */\npublic class SamplerSpace<T : Any, out S>(public val algebra: S) : Group<Sampler<T>>,\n    ScaleOperations<Sampler<T>> where S : Group<T>, S : ScaleOperations<T> {\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ebf3b1e414fade8decd8a2e3ad0705226cab1b23d707d04c80c243bfa24b6805"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"error\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/stat/ValueAndErrorField.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 20,
        "length": 5,
        "offset": 15,
        "surroundingCode": "    }\n\n    val error: Double get() = sqrt(dispersion)\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "485810f599977a511de1aee21037cd9015f50e2422579f518a9127751691a481"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Object \"ValueAndErrorField\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/stat/ValueAndErrorField.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 15,
      "length": 18,
      "code": {
        "startLine": 26,
        "length": 18,
        "offset": 126,
        "surroundingCode": " * An algebra for double value + its error combination. The multiplication assumes linear error propagation\n */\npublic object ValueAndErrorField : Field<ValueAndError> {\n\n    override val zero: ValueAndError = ValueAndError(0.0, 0.0)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "15adadfb0420decb6df6c89b9499483465a88933ffba05aaffaef2e7057877ad"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"uniform\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/stat/UniformDistribution.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 35,
      "length": 7,
      "code": {
        "startLine": 26,
        "length": 7,
        "offset": 37,
        "surroundingCode": "}\n\npublic fun Distribution.Companion.uniform(range: ClosedFloatingPointRange<Double>): UniformDistribution =\n    UniformDistribution(range)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "783af22aa6c0b248b12fe1cbc88e662b24e82d3da5ad72325aaf4adc81700056"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"PoissonSampler\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/samplers/PoissonSampler.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 12,
      "length": 14,
      "code": {
        "startLine": 30,
        "length": 14,
        "offset": 41,
        "surroundingCode": " */\n@Suppress(\"FunctionName\")\npublic fun PoissonSampler(mean: Double): Sampler<Int> {\n    return if (mean < PIVOT) SmallMeanPoissonSampler(mean) else LargeMeanPoissonSampler(mean)\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "abcae241057722b538b5a315cf83886ff53b69233e43953bf23e6e08e88fdda8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"AliasMethodDiscreteSampler\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/samplers/AliasMethodDiscreteSampler.kt",
      "language": "kotlin",
      "line": 189,
      "offset": 16,
      "length": 26,
      "code": {
        "startLine": 187,
        "length": 26,
        "offset": 46,
        "surroundingCode": "\n    @Suppress(\"FunctionName\")\n    public fun AliasMethodDiscreteSampler(\n        probabilities: DoubleArray,\n        alpha: Int = DEFAULT_ALPHA,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "104f78a6ece2c11e54168c24ca10728e2beeff6f19df5cbe206f6a29c6e2d012"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Object \"MarsagliaNormalizedGaussianSampler\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/samplers/MarsagliaNormalizedGaussianSampler.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 15,
      "length": 34,
      "code": {
        "startLine": 20,
        "length": 34,
        "offset": 187,
        "surroundingCode": " * See [https://commons.apache.org/proper/commons-rng/commons-rng-sampling/apidocs/org/apache/commons/rng/sampling/distribution/MarsagliaNormalizedGaussianSampler.html]\n */\npublic object MarsagliaNormalizedGaussianSampler : NormalizedGaussianSampler {\n\n    override fun sample(generator: RandomGenerator): BlockingDoubleChain = object : BlockingDoubleChain {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "51446c2af59fa932e59963662604c36f710e249665b734ad61905c035779376a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"AhrensDieterMarsagliaTsangGammaSampler\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/samplers/AhrensDieterMarsagliaTsangGammaSampler.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 14,
      "length": 38,
      "code": {
        "startLine": 24,
        "length": 38,
        "offset": 191,
        "surroundingCode": " * See [https://commons.apache.org/proper/commons-rng/commons-rng-sampling/apidocs/org/apache/commons/rng/sampling/distribution/AhrensDieterMarsagliaTsangGammaSampler.html].\n */\npublic class AhrensDieterMarsagliaTsangGammaSampler private constructor(\n    alpha: Double,\n    theta: Double"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ea8dc7408bb8df3f2891bd4d152c16ea230d102c46100c3c66b75cdcf7d21fb0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"integral\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/distributions/Distribution.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 50,
      "length": 8,
      "code": {
        "startLine": 38,
        "length": 8,
        "offset": 100,
        "surroundingCode": " * Compute probability integral in an interval\n */\npublic fun <T : Comparable<T>> Distribution1D<T>.integral(from: T, to: T): Double {\n    require(to > from)\n    return cumulative(to) - cumulative(from)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4fec476dd9e247001d512d744e8d1a960167e4704178daa603c6674c9393da39"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"FactorizedDistribution\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/distributions/FactorizedDistribution.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 14,
      "length": 22,
      "code": {
        "startLine": 18,
        "length": 22,
        "offset": 102,
        "surroundingCode": " * A multivariate distribution that has independent distributions for separate axis.\n */\npublic class FactorizedDistribution<T>(public val distributions: Collection<NamedDistribution<T>>) :\n    NamedDistribution<T> {\n    override fun probability(arg: Map<String, T>): Double ="
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "99f24b234932d915cad096fa0c5e6003c9ebc60d43f334ce2e20413e7a8e88f0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"DistributionBuilder\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/distributions/FactorizedDistribution.kt",
      "language": "kotlin",
      "line": 43,
      "offset": 14,
      "length": 19,
      "code": {
        "startLine": 41,
        "length": 19,
        "offset": 16,
        "surroundingCode": "}\n\npublic class DistributionBuilder<T : Any> {\n    private val distributions = ArrayList<NamedDistribution<T>>()\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "9de2e4e3755291897881d94354d61ecf8b4af27b953d933cea40a6dc1aaf15c1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"wrap\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/jsMain/kotlin/space/kscience/kmath/memory/DataViewMemory.kt",
      "language": "kotlin",
      "line": 100,
      "offset": 36,
      "length": 4,
      "code": {
        "startLine": 98,
        "length": 4,
        "offset": 104,
        "surroundingCode": " * and could be mutated independently of the resulting [Memory].\n */\npublic actual fun Memory.Companion.wrap(array: ByteArray): Memory {\n    @Suppress(\"CAST_NEVER_SUCCEEDS\") val int8Array = array as Int8Array\n    return DataViewMemory(DataView(int8Array.buffer, int8Array.byteOffset, int8Array.length))"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c2cf07897d9c8ca943f2892538cf4e5dc5398a119ca7d747fff10264a6ab1f9c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"asMemory\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/jvmMain/kotlin/space/kscience/kmath/memory/ByteBufferMemory.kt",
      "language": "kotlin",
      "line": 119,
      "offset": 23,
      "length": 8,
      "code": {
        "startLine": 117,
        "length": 8,
        "offset": 58,
        "surroundingCode": " * @return the [Memory] object.\n */\npublic fun ByteBuffer.asMemory(startOffset: Int = 0, size: Int = limit()): Memory =\n    ByteBufferMemory(this, startOffset, size)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3bc37af0cc604bf2cf967d40c681ced9e70ae978c7f36ee098c12342e3ed99c5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"readAsMemory\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/jvmMain/kotlin/space/kscience/kmath/memory/ByteBufferMemory.kt",
      "language": "kotlin",
      "line": 126,
      "offset": 28,
      "length": 12,
      "code": {
        "startLine": 124,
        "length": 12,
        "offset": 59,
        "surroundingCode": " */\n@Throws(IOException::class)\npublic inline fun <R> Path.readAsMemory(position: Long = 0, size: Long = Files.size(this), block: Memory.() -> R): R {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a3680748101cd8dc7ec073cbf5384fa2c3eec2ad57da0f47afbb82f8ce08ff75"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"read\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/commonMain/kotlin/space/kscience/kmath/memory/Memory.kt",
      "language": "kotlin",
      "line": 91,
      "offset": 30,
      "length": 4,
      "code": {
        "startLine": 89,
        "length": 4,
        "offset": 87,
        "surroundingCode": " * Uses the memory for read then releases the reader.\n */\npublic inline fun <R> Memory.read(block: MemoryReader.() -> R): R {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    val reader = reader()"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "906c99843b8afe839c4767833f2c43164c41a06e7fc16531ce75e115f04f7bcd"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"readArray\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/commonMain/kotlin/space/kscience/kmath/memory/MemorySpec.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 50,
      "length": 9,
      "code": {
        "startLine": 44,
        "length": 9,
        "offset": 124,
        "surroundingCode": " * Reads array of [size] objects mapped by [spec] at certain [offset].\n */\npublic inline fun <reified T : Any> MemoryReader.readArray(spec: MemorySpec<T>, offset: Int, size: Int): Array<T> =\n    Array(size) { i -> with(spec) { read(offset + i * objectSize) } }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "7b1ea47f5f82985eb0eb1439cbe91f280242443de7afa75ef0733a74f503dbec"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"writeArray\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/commonMain/kotlin/space/kscience/kmath/memory/MemorySpec.kt",
      "language": "kotlin",
      "line": 52,
      "offset": 35,
      "length": 10,
      "code": {
        "startLine": 50,
        "length": 10,
        "offset": 105,
        "surroundingCode": " * Writes [array] of objects mapped by [spec] at certain [offset].\n */\npublic fun <T : Any> MemoryWriter.writeArray(spec: MemorySpec<T>, offset: Int, array: Array<T>): Unit =\n    with(spec) { array.indices.forEach { i -> write(offset + i * objectSize, array[i]) } }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "8994c3fee324034accffcaf9cdf12b154da7fd0f328f29d0a36b9600f0750896"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"wrap\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-memory/src/nativeMain/kotlin/space/kscience/kmath/memory/NativeMemory.kt",
      "language": "kotlin",
      "line": 90,
      "offset": 36,
      "length": 4,
      "code": {
        "startLine": 88,
        "length": 4,
        "offset": 104,
        "surroundingCode": " * and could be mutated independently of the resulting [Memory].\n */\npublic actual fun Memory.Companion.wrap(array: ByteArray): Memory = NativeMemory(array)\n\n/**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-memory.nativeMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2a2be28828d452c41798a9b7a5044d1ab55350f040b93d9100aca76eed44498c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"multikAlgebra\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-multik/src/main/kotlin/space/kscience/kmath/multik/MultikDoubleAlgebra.kt",
      "language": "kotlin",
      "line": 52,
      "offset": 29,
      "length": 13,
      "code": {
        "startLine": 50,
        "length": 13,
        "offset": 31,
        "surroundingCode": "}\n\npublic val Double.Companion.multikAlgebra: MultikTensorAlgebra<Double, DoubleField> get() = MultikDoubleAlgebra\npublic val DoubleField.multikAlgebra: MultikTensorAlgebra<Double, DoubleField> get() = MultikDoubleAlgebra\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-multik.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "83589dd4e37e1759cd4d807b3a6719913c91360311770372ca004e99ebf15710"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ViktorBuffer\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-viktor/src/main/kotlin/space/kscience/kmath/viktor/ViktorBuffer.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 20,
      "length": 12,
      "code": {
        "startLine": 12,
        "length": 12,
        "offset": 83,
        "surroundingCode": "@Suppress(\"NOTHING_TO_INLINE\", \"OVERRIDE_BY_INLINE\")\n@JvmInline\npublic value class ViktorBuffer(public val flatArray: F64FlatArray) : MutableBuffer<Double> {\n    override val size: Int\n        get() = flatArray.size"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-viktor.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "8ee48c7bfb8fdd8446123591a3cb8a9588c007af1a6f389f602bd2a337e937a8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"viktorAlgebra\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-viktor/src/main/kotlin/space/kscience/kmath/viktor/ViktorFieldOpsND.kt",
      "language": "kotlin",
      "line": 130,
      "offset": 24,
      "length": 13,
      "code": {
        "startLine": 128,
        "length": 13,
        "offset": 26,
        "surroundingCode": "}\n\npublic fun DoubleField.viktorAlgebra(vararg shape: Int): ViktorFieldND = ViktorFieldND(shape)\n\npublic fun ViktorFieldND(vararg shape: Int): ViktorFieldND = ViktorFieldND(shape)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-viktor.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2ba2da417e5bd92c0cf3a23fe2c6994345e1adfa7f160d364bc67b01b187ae30"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"dot\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/linear/CMMatrix.kt",
      "language": "kotlin",
      "line": 150,
      "offset": 27,
      "length": 3,
      "code": {
        "startLine": 148,
        "length": 3,
        "offset": 131,
        "surroundingCode": "public operator fun CMMatrix.minus(other: CMMatrix): CMMatrix = CMMatrix(origin.subtract(other.origin))\n\npublic infix fun CMMatrix.dot(other: CMMatrix): CMMatrix = CMMatrix(origin.multiply(other.origin))\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3915bf37a740190036b95946637ff6fae0b06a1b6f4cd2bfc079ddf6f672c315"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"solve\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/linear/CMSolver.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 26,
      "length": 5,
      "code": {
        "startLine": 36,
        "length": 5,
        "offset": 95,
        "surroundingCode": "): CMMatrix = solver(a, decomposition).solve(b.toCM().origin).wrap()\n\npublic fun CMLinearSpace.solve(\n    a: Matrix<Double>,\n    b: Point<Double>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c564371dd5602f50371343aa2cbfce9e328b0ee71ce9fd9cd3bdd8af29bda4a8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"inverse\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/linear/CMSolver.kt",
      "language": "kotlin",
      "line": 44,
      "offset": 26,
      "length": 7,
      "code": {
        "startLine": 42,
        "length": 7,
        "offset": 98,
        "surroundingCode": "): CMVector = solver(a, decomposition).solve(b.toCM().origin).toPoint()\n\npublic fun CMLinearSpace.inverse(\n    a: Matrix<Double>,\n    decomposition: CMDecomposition = CMDecomposition.LUP,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "77233d709e816d2069f567b6d6cefbab888bb66af775658589c06ee172ff6b1f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"solve\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/linear/CMSolver.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 26,
      "length": 5,
      "code": {
        "startLine": 30,
        "length": 5,
        "offset": 28,
        "surroundingCode": "}\n\npublic fun CMLinearSpace.solve(\n    a: Matrix<Double>,\n    b: Matrix<Double>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c3174e63c25f6585945f204283a44c5c6ca6e913758fdb785f555e9cff802399"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"CMRandomGeneratorWrapper\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/random/CMRandomGeneratorWrapper.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 14,
      "length": 24,
      "code": {
        "startLine": 13,
        "length": 24,
        "offset": 52,
        "surroundingCode": "import space.kscience.kmath.stat.next\n\npublic class CMRandomGeneratorWrapper(\n    public val factory: (IntArray) -> RandomGenerator,\n) : org.apache.commons.math3.random.RandomGenerator {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e7ea3768e4b38e5022eb63df428bdb796a9fba93a6e706375dba1cfc858ef837"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"FFT\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/transform/Transformations.kt",
      "language": "kotlin",
      "line": 82,
      "offset": 34,
      "length": 3,
      "code": {
        "startLine": 80,
        "length": 3,
        "offset": 50,
        "surroundingCode": " */\n@FlowPreview\npublic fun Flow<Buffer<Complex>>.FFT(\n    normalization: DftNormalization = DftNormalization.STANDARD,\n    direction: TransformType = TransformType.FORWARD,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "fa4800cc790897245b9eb3dde33971a5fa65713d175ff1d084dc0d04bf67444e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"hadamard\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/transform/Transformations.kt",
      "language": "kotlin",
      "line": 71,
      "offset": 16,
      "length": 8,
      "code": {
        "startLine": 69,
        "length": 8,
        "offset": 22,
        "surroundingCode": "    }\n\n    public fun hadamard(\n        direction: TransformType = TransformType.FORWARD,\n    ): SuspendBufferTransform<Double, Double> = {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "48a9fa3d3858f44110b95626b022bbd7edf5001ec146259ae85dbc1cf3b52dde"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"real\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/transform/Transformations.kt",
      "language": "kotlin",
      "line": 115,
      "offset": 26,
      "length": 4,
      "code": {
        "startLine": 113,
        "length": 4,
        "offset": 42,
        "surroundingCode": " */\n@FlowPreview\npublic fun Flow<Complex>.real(): Flow<Double> = map { it.re }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6d5840d5041ebda542a69d82ba85b4eedcdbfe9bcf686091befff7f3e2f78395"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"cosine\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/transform/Transformations.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 16,
      "length": 6,
      "code": {
        "startLine": 62,
        "length": 6,
        "offset": 22,
        "surroundingCode": "    }\n\n    public fun cosine(\n        normalization: DctNormalization = DctNormalization.STANDARD_DCT_I,\n        direction: TransformType = TransformType.FORWARD,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "9617f90a462f7f99c941d155c656ce9a4c89709f326ab7a7a4859f9f819d9d0f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"FFT\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/transform/Transformations.kt",
      "language": "kotlin",
      "line": 105,
      "offset": 25,
      "length": 3,
      "code": {
        "startLine": 103,
        "length": 3,
        "offset": 57,
        "surroundingCode": "@FlowPreview\n@JvmName(\"realFFT\")\npublic fun Flow<Double>.FFT(\n    bufferSize: Int = Int.MAX_VALUE,\n    normalization: DftNormalization = DftNormalization.STANDARD,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c1661a1a75ae83a63ef83fc4c43998994157ecdc2056449d88be659f6d86b7ba"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"sine\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/transform/Transformations.kt",
      "language": "kotlin",
      "line": 57,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 55,
        "length": 4,
        "offset": 22,
        "surroundingCode": "    }\n\n    public fun sine(\n        normalization: DstNormalization = DstNormalization.STANDARD_DST_I,\n        direction: TransformType = TransformType.FORWARD,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "259906946c365c69eb36749b4f0b72e51aa42af936f70e3740c2c380b62b69af"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"power\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/expressions/DerivativeStructureExpression.kt",
      "language": "kotlin",
      "line": 98,
      "offset": 16,
      "length": 5,
      "code": {
        "startLine": 96,
        "length": 5,
        "offset": 22,
        "surroundingCode": "    }\n\n    public fun power(arg: DerivativeStructure, pow: DerivativeStructure): DerivativeStructure = arg.pow(pow)\n    override fun exp(arg: DerivativeStructure): DerivativeStructure = arg.exp()\n    override fun ln(arg: DerivativeStructure): DerivativeStructure = arg.log()"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "105f3fa7da6dadad7b3c5f48f59aff9db7226c13f7a0cae696399f86f79cbcca"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"legandre\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/integration/CMIntegrator.kt",
      "language": "kotlin",
      "line": 56,
      "offset": 20,
      "length": 8,
      "code": {
        "startLine": 54,
        "length": 8,
        "offset": 121,
        "surroundingCode": "         * Create a Gauss-Legandre integrator based on [IterativeLegendreGaussIntegrator]\n         */\n        public fun legandre(numPoints: Int, defaultMaxCalls: Int = numPoints * 5): CMIntegrator =\n            CMIntegrator(defaultMaxCalls) { integrand ->\n                val absoluteAccuracy = integrand.getFeature<IntegrandAbsoluteAccuracy>()?.accuracy"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4034214102705830edbb227fbe6c18c339f70b9f186ec84bbb54830f3839cbb9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"integrate\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/integration/CMGaussRuleIntegrator.kt",
      "language": "kotlin",
      "line": 74,
      "offset": 20,
      "length": 9,
      "code": {
        "startLine": 72,
        "length": 9,
        "offset": 99,
        "surroundingCode": "        private val factory: GaussIntegratorFactory = GaussIntegratorFactory()\n\n        public fun integrate(\n            range: ClosedRange<Double>,\n            numPoints: Int = 100,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "08ef8a871ec2805d96fc2f3f65ee7d50187ffeb8442f459a5831f83cb55958b8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"CMGaussRuleIntegrator\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/integration/CMGaussRuleIntegrator.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 14,
      "length": 21,
      "code": {
        "startLine": 12,
        "length": 21,
        "offset": 69,
        "surroundingCode": " * A simple one-pass integrator based on Gauss rule\n */\npublic class CMGaussRuleIntegrator(\n    private val numpoints: Int,\n    private var type: GaussRule = GaussRule.LEGANDRE,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "dee13fdfc6de1a9d0db88c15dabeadafda933f64ed03202cbbe8e892d11f3706"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-commons/src/main/kotlin/space/kscience/kmath/commons/optimization/CMOptimizer.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 39,
        "length": 11,
        "offset": 126,
        "surroundingCode": "\npublic class CMOptimizerData(public val data: List<SymbolIndexer.() -> OptimizationData>) : OptimizationFeature {\n    public constructor(vararg data: (SymbolIndexer.() -> OptimizationData)) : this(data.toList())\n\n    override fun toString(): String = \"CMOptimizerData($data)\""
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-commons.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "444f82f3f131dc9395963e9395abcb30b930b36af9d6c7875019d1cc61d4fdab"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"reciprocal\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-complex/src/commonMain/kotlin/space/kscience/kmath/complex/Quaternion.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 23,
      "length": 10,
      "code": {
        "startLine": 26,
        "length": 10,
        "offset": 59,
        "surroundingCode": " * This quaternion's reciprocal.\n */\npublic val Quaternion.reciprocal: Quaternion\n    get() {\n        QuaternionField {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-complex.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e01ee7599aec656a477711e7991c3b160b6bf0e8a61f87c0207c384a1663d9f5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-complex/src/commonMain/kotlin/space/kscience/kmath/complex/Quaternion.kt",
      "language": "kotlin",
      "line": 214,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 212,
        "length": 11,
        "offset": 171,
        "surroundingCode": "    public constructor(w: Number, x: Number) : this(w.toDouble(), x.toDouble(), 0.0, 0.0)\n    public constructor(w: Number) : this(w.toDouble(), 0.0, 0.0, 0.0)\n    public constructor(wx: Complex, yz: Complex) : this(wx.re, wx.im, yz.re, yz.im)\n    public constructor(wx: Complex) : this(wx.re, wx.im, 0, 0)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-complex.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6a523fb9b054d96d80dd3bee8cc21bf5bdc9194d1f41fea67c0b04fd553645c4"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toQuaternion\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-complex/src/commonMain/kotlin/space/kscience/kmath/complex/Quaternion.kt",
      "language": "kotlin",
      "line": 260,
      "offset": 20,
      "length": 12,
      "code": {
        "startLine": 258,
        "length": 12,
        "offset": 52,
        "surroundingCode": " * @return a new quaternion.\n */\npublic fun Complex.toQuaternion(): Quaternion = Quaternion(this)\n\n/**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-complex.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3bb1a788852325ba22f9ce2684356034844c95aef0d3de2ed0e4b1d587e0cac5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"quaternion\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-complex/src/commonMain/kotlin/space/kscience/kmath/complex/Quaternion.kt",
      "language": "kotlin",
      "line": 266,
      "offset": 36,
      "length": 10,
      "code": {
        "startLine": 264,
        "length": 10,
        "offset": 69,
        "surroundingCode": " * specified [init] function.\n */\npublic inline fun Buffer.Companion.quaternion(size: Int, init: (Int) -> Quaternion): Buffer<Quaternion> =\n    MemoryBuffer.create(Quaternion, size, init)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-complex.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b399cf521054ea1d18cb18f245cdba15cb99db17e112a177f4a0d0749fd54582"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"quaternion\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-complex/src/commonMain/kotlin/space/kscience/kmath/complex/Quaternion.kt",
      "language": "kotlin",
      "line": 273,
      "offset": 43,
      "length": 10,
      "code": {
        "startLine": 271,
        "length": 10,
        "offset": 76,
        "surroundingCode": " * specified [init] function.\n */\npublic inline fun MutableBuffer.Companion.quaternion(size: Int, init: (Int) -> Quaternion): MutableBuffer<Quaternion> =\n    MutableMemoryBuffer.create(Quaternion, size, init)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-complex.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ecf333fa07c1ea77884ac1fe20fda078ec1d945542d2316fa60b7af032f1bea6"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"KMathJupyter\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-jupyter/src/main/kotlin/space/kscience/kmath/jupyter/KMathJupyter.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 16,
      "length": 12,
      "code": {
        "startLine": 31,
        "length": 12,
        "offset": 75,
        "surroundingCode": "public fun Number.toMst(): MST.Numeric = MST.Numeric(this)\n\ninternal class KMathJupyter : JupyterIntegration() {\n    private val mathRender = FeaturedMathRendererWithPostProcess.Default\n    private val syntaxRender = MathMLSyntaxRenderer"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-jupyter.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a456b5f36c2dc9d660e9e5eadb57a46ea56970f4a1225674350f02851e53f216"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toMst\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-jupyter/src/main/kotlin/space/kscience/kmath/jupyter/KMathJupyter.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 19,
      "length": 5,
      "code": {
        "startLine": 29,
        "length": 5,
        "offset": 85,
        "surroundingCode": " * A function for conversion of number to MST for pretty print\n */\npublic fun Number.toMst(): MST.Numeric = MST.Numeric(this)\n\ninternal class KMathJupyter : JupyterIntegration() {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-jupyter.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "05b6a04b49e9ba79f01b7236ea3bebddaf0ff1a7592f9b4e51af41df21135f75"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"copyArray\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/tensorCasts.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 22,
      "length": 9,
      "code": {
        "startLine": 32,
        "length": 9,
        "offset": 83,
        "surroundingCode": " * Returns a copy-protected [IntArray] of tensor elements\n */\npublic fun IntTensor.copyArray(): IntArray {\n    return IntArray(numElements) { i ->\n        mutableBuffer[bufferStart + i]"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "71df0f6a1fad7d9643e16e761847880f03a0d506c534b1ddb3232e7b61145f06"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"onesLike\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/DoubleTensorAlgebra.kt",
      "language": "kotlin",
      "line": 183,
      "offset": 31,
      "length": 8,
      "code": {
        "startLine": 181,
        "length": 8,
        "offset": 135,
        "surroundingCode": "     * @return tensor filled with the scalar value `1.0`, with the same shape as `input` tensor.\n     */\n    public fun Tensor<Double>.onesLike(): DoubleTensor = tensor.fullLike(1.0)\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "45757d4626eaa033ee0481c9133f90df90b171c3ff625b638a7ac90d3a6472cd"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"luFactor\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/DoubleTensorAlgebra.kt",
      "language": "kotlin",
      "line": 748,
      "offset": 36,
      "length": 8,
      "code": {
        "startLine": 746,
        "length": 8,
        "offset": 159,
        "surroundingCode": "     * The `pivots`  has the shape ``(∗, min(m, n))``. `pivots` stores all the intermediate transpositions of rows.\n     */\n    public fun StructureND<Double>.luFactor(): Pair<DoubleTensor, IntTensor> = luFactor(1e-9)\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "503f6ede49ff0a40f4990bb0a72b6eddd5db3891b77617d42afcddd02265ae4c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"zero\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/tensorAlgebraExtensions.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 32,
      "length": 4,
      "code": {
        "startLine": 16,
        "length": 4,
        "offset": 131,
        "surroundingCode": "public fun DoubleTensorAlgebra.one(shape: Shape): DoubleTensor = ones(shape)\n@JvmName(\"varArgZero\")\npublic fun DoubleTensorAlgebra.zero(vararg shape: Int): DoubleTensor = zeros(intArrayOf(*shape))\npublic fun DoubleTensorAlgebra.zero(shape: Shape): DoubleTensor = zeros(shape)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "81e3f14327e06ba1d5fc0db5fafd3ad1be7af447ceb1fc0a6c552238e57daaec"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"zero\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensors/src/commonMain/kotlin/space/kscience/kmath/tensors/core/tensorAlgebraExtensions.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 32,
      "length": 4,
      "code": {
        "startLine": 17,
        "length": 4,
        "offset": 151,
        "surroundingCode": "@JvmName(\"varArgZero\")\npublic fun DoubleTensorAlgebra.zero(vararg shape: Int): DoubleTensor = zeros(intArrayOf(*shape))\npublic fun DoubleTensorAlgebra.zero(shape: Shape): DoubleTensor = zeros(shape)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensors.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "de891c47db49a79c3e018c7415cba93285030ecfd283a0d33d8973878d866282"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"fromRange\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-for-real/src/commonMain/kotlin/space/kscience/kmath/real/grids.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 29,
      "length": 9,
      "code": {
        "startLine": 17,
        "length": 9,
        "offset": 134,
        "surroundingCode": " * If range has a zero size, then the buffer consisting of [numberOfPoints] equal values is returned.\n */\npublic fun Buffer.Companion.fromRange(range: ClosedFloatingPointRange<Double>, numberOfPoints: Int): DoubleBuffer {\n    require(numberOfPoints >= 2) { \"Number of points in grid must be more than 1\" }\n    val normalizedRange = when {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-for-real.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6f45531660b0ee643534dbecaed6d4aa166a7471a29e57dea3519c0ca2d5bdc9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"same\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-for-real/src/commonMain/kotlin/space/kscience/kmath/real/DoubleVector.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 29,
      "length": 4,
      "code": {
        "startLine": 24,
        "length": 4,
        "offset": 50,
        "surroundingCode": " */\n@UnstableKMathAPI\npublic fun Buffer.Companion.same(size: Int, value: Number): DoubleVector = double(size) { value.toDouble() }\n\n// Transformation methods"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-for-real.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e1b78c40e037c0383c229efc9e952439dfe1d7c6024da9aaa8b1038b75fefefc"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"exp\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-for-real/src/commonMain/kotlin/space/kscience/kmath/real/DoubleVector.kt",
      "language": "kotlin",
      "line": 80,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 78,
        "length": 3,
        "offset": 82,
        "surroundingCode": "public fun DoubleVector.pow(p: Int): DoubleVector = map { it.pow(p) }\n\npublic fun exp(vector: DoubleVector): DoubleVector = vector.map { kotlin.math.exp(it) }\n\npublic fun sqrt(vector: DoubleVector): DoubleVector = vector.map { kotlin.math.sqrt(it) }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-for-real.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "84e407d94ed58106ce9038e7502a9e19aceb4d49a0f21de2d21ca5354211d30c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"sqrt\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-for-real/src/commonMain/kotlin/space/kscience/kmath/real/DoubleVector.kt",
      "language": "kotlin",
      "line": 82,
      "offset": 12,
      "length": 4,
      "code": {
        "startLine": 80,
        "length": 4,
        "offset": 100,
        "surroundingCode": "public fun exp(vector: DoubleVector): DoubleVector = vector.map { kotlin.math.exp(it) }\n\npublic fun sqrt(vector: DoubleVector): DoubleVector = vector.map { kotlin.math.sqrt(it) }\n\npublic fun DoubleVector.square(): DoubleVector = map { it.pow(2) }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-for-real.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "9a81b35531abf547873e31d15c7ac9596ae3d20cc31db3d576c5cc1fb5e8c8c6"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"sin\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-for-real/src/commonMain/kotlin/space/kscience/kmath/real/DoubleVector.kt",
      "language": "kotlin",
      "line": 86,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 84,
        "length": 3,
        "offset": 79,
        "surroundingCode": "public fun DoubleVector.square(): DoubleVector = map { it.pow(2) }\n\npublic fun sin(vector: DoubleVector): DoubleVector = vector.map { kotlin.math.sin(it) }\n\npublic fun cos(vector: DoubleVector): DoubleVector = vector.map { kotlin.math.cos(it) }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-for-real.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "48b6171aebf9916587828836f62e4581903984929b14a74feba6e694f7f4c910"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"cos\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-for-real/src/commonMain/kotlin/space/kscience/kmath/real/DoubleVector.kt",
      "language": "kotlin",
      "line": 88,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 86,
        "length": 3,
        "offset": 100,
        "surroundingCode": "public fun sin(vector: DoubleVector): DoubleVector = vector.map { kotlin.math.sin(it) }\n\npublic fun cos(vector: DoubleVector): DoubleVector = vector.map { kotlin.math.cos(it) }\n\npublic fun tan(vector: DoubleVector): DoubleVector = vector.map { kotlin.math.tan(it) }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-for-real.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "220e5ebdc7f86ad2192bb7f8c982a0d299778ca77bb72223c148eb3bb78ee3a0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"tan\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-for-real/src/commonMain/kotlin/space/kscience/kmath/real/DoubleVector.kt",
      "language": "kotlin",
      "line": 90,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 88,
        "length": 3,
        "offset": 100,
        "surroundingCode": "public fun cos(vector: DoubleVector): DoubleVector = vector.map { kotlin.math.cos(it) }\n\npublic fun tan(vector: DoubleVector): DoubleVector = vector.map { kotlin.math.tan(it) }\n\npublic fun ln(vector: DoubleVector): DoubleVector = vector.map { kotlin.math.ln(it) }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-for-real.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5a3749f11cae623b73ebdcbe4536b94b4683e190185c6b86a14074ee979cdcc5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"ln\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-for-real/src/commonMain/kotlin/space/kscience/kmath/real/DoubleVector.kt",
      "language": "kotlin",
      "line": 92,
      "offset": 12,
      "length": 2,
      "code": {
        "startLine": 90,
        "length": 2,
        "offset": 100,
        "surroundingCode": "public fun tan(vector: DoubleVector): DoubleVector = vector.map { kotlin.math.tan(it) }\n\npublic fun ln(vector: DoubleVector): DoubleVector = vector.map { kotlin.math.ln(it) }\n\npublic fun log10(vector: DoubleVector): DoubleVector = vector.map { kotlin.math.log10(it) }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-for-real.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "65b25287bd7725d6bf7a22da08bab34287ab0234e86834ccec0194b9bc80a013"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"log10\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-for-real/src/commonMain/kotlin/space/kscience/kmath/real/DoubleVector.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 92,
        "length": 5,
        "offset": 98,
        "surroundingCode": "public fun ln(vector: DoubleVector): DoubleVector = vector.map { kotlin.math.ln(it) }\n\npublic fun log10(vector: DoubleVector): DoubleVector = vector.map { kotlin.math.log10(it) }\n\n// reductions methods"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-for-real.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f2ae8a30fb436395029b46ae6080a999d1ed3fda8e61518868d5162daf804ae0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type alias \"Line2D\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-geometry/src/commonMain/kotlin/space/kscience/kmath/geometry/Line.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 18,
      "length": 6,
      "code": {
        "startLine": 8,
        "length": 6,
        "offset": 88,
        "surroundingCode": "public data class Line<out V : Vector>(val base: V, val direction: V)\n\npublic typealias Line2D = Line<Vector2D>\npublic typealias Line3D = Line<Vector3D>\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-geometry.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5b7e8d6b0e412a70c7dcf8c844e87dda810e7be8b871e0f80e9a27043311968e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Interface \"ReferenceFrame\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-geometry/src/commonMain/kotlin/space/kscience/kmath/geometry/ReferenceFrame.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 18,
      "length": 14,
      "code": {
        "startLine": 6,
        "length": 14,
        "offset": 56,
        "surroundingCode": "package space.kscience.kmath.geometry\n\npublic interface ReferenceFrame\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-geometry.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c42ed68653ad153b6a79f7caca13a896455cb22c3c2c82e3c870a097738dfe73"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"r\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-geometry/src/commonMain/kotlin/space/kscience/kmath/geometry/Euclidean2DSpace.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 21,
      "length": 1,
      "code": {
        "startLine": 27,
        "length": 1,
        "offset": 23,
        "surroundingCode": "}\n\npublic val Vector2D.r: Double\n    get() = Euclidean2DSpace { norm() }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-geometry.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "74a112bf4cb68a65002d6112d9518e20024d3f367e679a2fa41fff57fd09eef0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"r\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-geometry/src/commonMain/kotlin/space/kscience/kmath/geometry/Euclidean3DSpace.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 21,
      "length": 1,
      "code": {
        "startLine": 32,
        "length": 1,
        "offset": 108,
        "surroundingCode": "public fun Vector3D(x: Double, y: Double, z: Double): Vector3D = Vector3DImpl(x, y, z)\n\npublic val Vector3D.r: Double get() = Euclidean3DSpace { norm() }\n\nprivate data class Vector3DImpl("
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-geometry.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6452748188f7533672781213ddff25ce63f07db7413c3f6e2a5712f41ed31456"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"differentiate\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-functions/src/commonMain/kotlin/space/kscience/kmath/functions/Polynomial.kt",
      "language": "kotlin",
      "line": 59,
      "offset": 33,
      "length": 13,
      "code": {
        "startLine": 57,
        "length": 13,
        "offset": 54,
        "surroundingCode": " */\n@UnstableKMathAPI\npublic fun <T, A> Polynomial<T>.differentiate(\n    algebra: A,\n): Polynomial<T> where  A : Ring<T>, A : NumericAlgebra<T> = algebra {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-functions.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4bc15c507f159b52ac3cd082e56a8efd13973711b222427e1fa6003c5201f08b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"asFunction\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-functions/src/commonMain/kotlin/space/kscience/kmath/functions/Polynomial.kt",
      "language": "kotlin",
      "line": 125,
      "offset": 30,
      "length": 10,
      "code": {
        "startLine": 123,
        "length": 10,
        "offset": 105,
        "surroundingCode": "    public operator fun Polynomial<T>.invoke(arg: T): T = value(ring, arg)\n\n    public fun Polynomial<T>.asFunction(): (T) -> T = asFunction(ring)\n\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-functions.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "be5ae89116bf4638aa14b24a9c29b4f0d33e21a75bf35bd278ae77bac6f65dac"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type alias \"FunctionND\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-functions/src/commonMain/kotlin/space/kscience/kmath/functions/functionTypes.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 18,
      "length": 10,
      "code": {
        "startLine": 10,
        "length": 10,
        "offset": 60,
        "surroundingCode": "public typealias Function1D<T> = (T) -> T\n\npublic typealias FunctionND<T> = (Buffer<T>) -> T"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-functions.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ea9483cc19699606fa2501b564743eb394f2f36642409c4506fff7d84938685b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"SplineIntegrator\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-functions/src/commonMain/kotlin/space/kscience/kmath/integration/SplineIntegrator.kt",
      "language": "kotlin",
      "line": 53,
      "offset": 14,
      "length": 16,
      "code": {
        "startLine": 51,
        "length": 16,
        "offset": 35,
        "surroundingCode": " */\n@UnstableKMathAPI\npublic class SplineIntegrator<T : Comparable<T>>(\n    public val algebra: Field<T>,\n    public val bufferFactory: MutableBufferFactory<T>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-functions.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "02d645cb5d8efb807283fa92ba343c287b907e86ed09db9288d18d417aaecf9e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"simpsonIntegrator\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-functions/src/commonMain/kotlin/space/kscience/kmath/integration/SimpsonIntegrator.kt",
      "language": "kotlin",
      "line": 63,
      "offset": 31,
      "length": 17,
      "code": {
        "startLine": 61,
        "length": 17,
        "offset": 49,
        "surroundingCode": "\n@UnstableKMathAPI\npublic val <T : Any> Field<T>.simpsonIntegrator: SimpsonIntegrator<T> get() = SimpsonIntegrator(this)\n\n/**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-functions.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "43330eaa17b00bf8dd388c76729549406035e2cdf97220de613100d0a9a25448"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-functions/src/commonMain/kotlin/space/kscience/kmath/integration/UnivariateIntegrand.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 36,
        "length": 11,
        "offset": 132,
        "surroundingCode": " */\npublic class UnivariateIntegrandRanges(public val ranges: List<Pair<ClosedRange<Double>, Int>>) : IntegrandFeature {\n    public constructor(vararg pairs: Pair<ClosedRange<Double>, Int>) : this(pairs.toList())\n\n    override fun toString(): String {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-functions.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f79130788fde92032dd736fdbfc6206418a27743b335f66dc6e729379f69ad42"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-functions/src/commonMain/kotlin/space/kscience/kmath/integration/UnivariateIntegrand.kt",
      "language": "kotlin",
      "line": 49,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 47,
        "length": 11,
        "offset": 107,
        "surroundingCode": "\npublic class UnivariateIntegrationNodes(public val nodes: Buffer<Double>) : IntegrandFeature {\n    public constructor(vararg nodes: Double) : this(DoubleBuffer(nodes))\n\n    override fun toString(): String = \"UnivariateNodes($nodes)\""
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-functions.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "256c225f798da493b132a5d2220b3e5dbbf6c260d2374dd814ca5a23c2c1af93"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"MultivariateIntegrand\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-functions/src/commonMain/kotlin/space/kscience/kmath/integration/MultivariateIntegrand.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 22,
      "length": 21,
      "code": {
        "startLine": 19,
        "length": 21,
        "offset": 48,
        "surroundingCode": "\n@Suppress(\"FunctionName\")\npublic fun <T : Any> MultivariateIntegrand(\n    vararg features: IntegrandFeature,\n    function: (Point<T>) -> T,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-functions.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5dfc4d9d7d2c6fd318ecd9a239ce58ac8e1f983a6439340f3bda1c5e68b812a5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"interpolate\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-functions/src/commonMain/kotlin/space/kscience/kmath/interpolation/Interpolator.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 58,
      "length": 11,
      "code": {
        "startLine": 62,
        "length": 11,
        "offset": 60,
        "surroundingCode": "}\n\npublic fun <T : Comparable<T>> PolynomialInterpolator<T>.interpolate(\n    x: Buffer<T>,\n    y: Buffer<T>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-functions.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5e2c830fac25b7f98cea48cc237a21d2d4ec18f24d5407102a44a52b446ac0bc"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"interpolate\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-functions/src/commonMain/kotlin/space/kscience/kmath/interpolation/Interpolator.kt",
      "language": "kotlin",
      "line": 69,
      "offset": 58,
      "length": 11,
      "code": {
        "startLine": 67,
        "length": 11,
        "offset": 122,
        "surroundingCode": "): (T) -> T? = interpolatePolynomials(x, y).asFunction(algebra)\n\npublic fun <T : Comparable<T>> PolynomialInterpolator<T>.interpolate(\n    data: Map<T, T>,\n): (T) -> T? = interpolatePolynomials(data).asFunction(algebra)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-functions.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1d6458e01db5439d1da5013efa631d161865c284309801a66e070eb60b9d4c02"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"interpolate\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-functions/src/commonMain/kotlin/space/kscience/kmath/interpolation/Interpolator.kt",
      "language": "kotlin",
      "line": 78,
      "offset": 58,
      "length": 11,
      "code": {
        "startLine": 76,
        "length": 11,
        "offset": 59,
        "surroundingCode": "\n\npublic fun <T : Comparable<T>> PolynomialInterpolator<T>.interpolate(\n    x: Buffer<T>,\n    y: Buffer<T>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-functions.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a00e9097b197b03888299d1622a262a78d0be24876921bb7d5010e455ed901ea"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"interpolate\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-functions/src/commonMain/kotlin/space/kscience/kmath/interpolation/Interpolator.kt",
      "language": "kotlin",
      "line": 84,
      "offset": 58,
      "length": 11,
      "code": {
        "startLine": 82,
        "length": 11,
        "offset": 135,
        "surroundingCode": "): (T) -> T = interpolatePolynomials(x, y).asFunction(algebra, defaultValue)\n\npublic fun <T : Comparable<T>> PolynomialInterpolator<T>.interpolate(\n    data: Map<T, T>,\n    defaultValue: T,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-functions.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d27436bed7f850049c54bd5e0842ccfc5f49484e2814a5bb420236105d9e0eb1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"splineInterpolator\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-functions/src/commonMain/kotlin/space/kscience/kmath/interpolation/SplineInterpolator.kt",
      "language": "kotlin",
      "line": 78,
      "offset": 41,
      "length": 18,
      "code": {
        "startLine": 76,
        "length": 18,
        "offset": 42,
        "surroundingCode": "\n\npublic fun <T : Comparable<T>> Field<T>.splineInterpolator(\n    bufferFactory: MutableBufferFactory<T>,\n): SplineInterpolator<T> = SplineInterpolator(this, bufferFactory)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-functions.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d54b889ca17a518bd6bc4aae0ba51a9e46e952e5e6c6bbbd339a736d5931a9e9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"asSequence\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-coroutines/src/jvmMain/kotlin/space/kscience/kmath/chains/ChainExt.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 19,
        "length": 10,
        "offset": 63,
        "surroundingCode": " * Represent a chain as a sequence\n */\npublic fun <R> Chain<R>.asSequence(): Sequence<R> = Sequence { this@asSequence.iterator() }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-coroutines.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a6749b75b8b1aab3640d0db972c064c88aec195ec8498405f4429efb15e1a419"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"await\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-coroutines/src/jvmMain/kotlin/space/kscience/kmath/structures/LazyStructureND.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 39,
      "length": 5,
      "code": {
        "startLine": 37,
        "length": 5,
        "offset": 128,
        "surroundingCode": "    if (this is LazyStructureND<T>) deferred(index) else CompletableDeferred(get(index))\n\npublic suspend fun <T> StructureND<T>.await(index: IntArray): T =\n    if (this is LazyStructureND<T>) await(index) else get(index)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-coroutines.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "47fdd0cedf6704a1506308968da2678f7b5fa55cc7800ebe913668ce431391ca"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"mapAsyncIndexed\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-coroutines/src/jvmMain/kotlin/space/kscience/kmath/structures/LazyStructureND.kt",
      "language": "kotlin",
      "line": 45,
      "offset": 41,
      "length": 15,
      "code": {
        "startLine": 43,
        "length": 15,
        "offset": 83,
        "surroundingCode": " * PENDING would benefit from KEEP-176\n */\npublic inline fun <T, R> StructureND<T>.mapAsyncIndexed(\n    scope: CoroutineScope,\n    crossinline function: suspend (T, index: IntArray) -> R,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-coroutines.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b77b288301e1ecde47721f7397908ed20de5d0fa1f4950053a2b6c731dda4692"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"deferred\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-coroutines/src/jvmMain/kotlin/space/kscience/kmath/structures/LazyStructureND.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 31,
      "length": 8,
      "code": {
        "startLine": 34,
        "length": 8,
        "offset": 33,
        "surroundingCode": "}\n\npublic fun <T> StructureND<T>.deferred(index: IntArray): Deferred<T> =\n    if (this is LazyStructureND<T>) deferred(index) else CompletableDeferred(get(index))\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-coroutines.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ad6a57e4780671691f42c2569f31ae6c5dfde1383c345f5712b8628d00075dee"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"asChain\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-coroutines/src/commonMain/kotlin/space/kscience/kmath/chains/Chain.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 28,
      "length": 7,
      "code": {
        "startLine": 35,
        "length": 7,
        "offset": 100,
        "surroundingCode": "\npublic fun <T> Iterator<T>.asChain(): Chain<T> = SimpleChain { next() }\npublic fun <T> Sequence<T>.asChain(): Chain<T> = iterator().asChain()\n\n/**"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-coroutines.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d07a50a2f83412fa8b4ef26d0e200deb8175a538bbdcf82d293cdde2703d39f7"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"MarkovChain\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-coroutines/src/commonMain/kotlin/space/kscience/kmath/chains/Chain.kt",
      "language": "kotlin",
      "line": 50,
      "offset": 14,
      "length": 11,
      "code": {
        "startLine": 48,
        "length": 11,
        "offset": 45,
        "surroundingCode": " * A stateless Markov chain\n */\npublic class MarkovChain<out R : Any>(private val seed: suspend () -> R, private val gen: suspend (R) -> R) : Chain<R> {\n    private val mutex: Mutex = Mutex()\n    private var value: R? = null"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-coroutines.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b06e5c4eddf5c4c418b26225f2094c0d63a32a5f3848a5aa96794fa3e0e11826"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"StatefulChain\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-coroutines/src/commonMain/kotlin/space/kscience/kmath/chains/Chain.kt",
      "language": "kotlin",
      "line": 72,
      "offset": 14,
      "length": 13,
      "code": {
        "startLine": 70,
        "length": 13,
        "offset": 94,
        "surroundingCode": " * @param forkState the function to copy current state without modifying it.\n */\npublic class StatefulChain<S, out R>(\n    private val state: S,\n    private val seed: S.() -> R,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-coroutines.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0428f26e02632591f43d87ed2e6ffed5b083649e9b45a96f014949b746f252e3"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"filter\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-coroutines/src/commonMain/kotlin/space/kscience/kmath/chains/Chain.kt",
      "language": "kotlin",
      "line": 112,
      "offset": 25,
      "length": 6,
      "code": {
        "startLine": 110,
        "length": 6,
        "offset": 141,
        "surroundingCode": " * [block] must be a pure function or at least not use external random variables, otherwise fork could be broken\n */\npublic fun <T> Chain<T>.filter(block: (T) -> Boolean): Chain<T> = object : Chain<T> {\n    override suspend fun next(): T {\n        var next: T"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-coroutines.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5f8dda44eb66eee198b948b11c6245b34fa28abc19ca51ee8e13a85957376364"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"cumulativeSum\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-coroutines/src/commonMain/kotlin/space/kscience/kmath/chains/flowExtra.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 24,
      "length": 13,
      "code": {
        "startLine": 16,
        "length": 13,
        "offset": 70,
        "surroundingCode": "import space.kscience.kmath.operations.invoke\n\npublic fun <T> Flow<T>.cumulativeSum(group: GroupOps<T>): Flow<T> =\n    group { runningReduce { sum, element -> sum + element } }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-coroutines.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "bb2b078e62a6dcaa319e374765205e765e87ced5bcea646b0682f177e09a3eea"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"nextBuffer\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-coroutines/src/commonMain/kotlin/space/kscience/kmath/chains/BlockingChain.kt",
      "language": "kotlin",
      "line": 43,
      "offset": 54,
      "length": 10,
      "code": {
        "startLine": 41,
        "length": 10,
        "offset": 55,
        "surroundingCode": "\n\npublic suspend inline fun <reified T : Any> Chain<T>.nextBuffer(size: Int): Buffer<T> = if (this is BufferChain) {\n    nextBuffer(size)\n} else {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-coroutines.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "823a5e8d745950faa59fa197821d2d7aae34859474e9762c676b391299847b52"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"chunked\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-coroutines/src/commonMain/kotlin/space/kscience/kmath/streaming/BufferFlow.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 24,
      "length": 7,
      "code": {
        "startLine": 27,
        "length": 7,
        "offset": 75,
        "surroundingCode": " * Collect incoming flow into fixed size chunks\n */\npublic fun <T> Flow<T>.chunked(bufferSize: Int, bufferFactory: BufferFactory<T>): Flow<Buffer<T>> = flow {\n    require(bufferSize > 0) { \"Resulting chunk size must be more than zero\" }\n    val list = ArrayList<T>(bufferSize)"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-coroutines.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "aa9103bafb1a3810c6f77b4f29f85ac0f2d2323b2c00b9f740fee15ed90cefc0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"of\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-dimensions/src/jsMain/kotlin/space/kscience/kmath/dimensions/Dimension.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 39,
      "length": 2,
      "code": {
        "startLine": 17,
        "length": 2,
        "offset": 85,
        "surroundingCode": "    ?: error(\"Can't resolve dimension $type\")\n\npublic actual fun Dimension.Companion.of(dim: Int): Dimension = dimensionMap.getOrPut(dim) {\n    object : Dimension {\n        override val dim: Int get() = dim"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-dimensions.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f8da098267575593c8918fd41d1132c6a3ae9308ed4cb657d32369b1245b9be2"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"coerce\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-dimensions/src/commonMain/kotlin/space/kscience/kmath/dimensions/Wrappers.kt",
      "language": "kotlin",
      "line": 61,
      "offset": 54,
      "length": 6,
      "code": {
        "startLine": 59,
        "length": 6,
        "offset": 142,
        "surroundingCode": "public interface DPoint<out T, D : Dimension> : Point<T> {\n    public companion object {\n        public inline fun <T, reified D : Dimension> coerce(point: Point<T>): DPoint<T, D> {\n            require(point.size == Dimension.dim<D>()) {\n                \"Vector dimension mismatch: expected ${Dimension.dim<D>()}, but found ${point.size}\""
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-dimensions.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "517fae2d860c5e53bcda6f40202d2622684c1daa12d11dbad4ffb9e8a6980027"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"point\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-dimensions/src/commonMain/kotlin/space/kscience/kmath/dimensions/Wrappers.kt",
      "language": "kotlin",
      "line": 115,
      "offset": 47,
      "length": 5,
      "code": {
        "startLine": 113,
        "length": 5,
        "offset": 53,
        "surroundingCode": "    }\n\n    public inline fun <reified D : Dimension> point(noinline initializer: A.(Int) -> T): DPoint<T, D> {\n        val size = Dimension.dim<D>()\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-dimensions.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1bc83955d8d5433d43898c89a3eb0b250574edbfdff43178ed1cc0c79018932a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"dot\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-dimensions/src/commonMain/kotlin/space/kscience/kmath/dimensions/Wrappers.kt",
      "language": "kotlin",
      "line": 130,
      "offset": 93,
      "length": 3,
      "code": {
        "startLine": 128,
        "length": 3,
        "offset": 165,
        "surroundingCode": "    ): DMatrix<T, R1, C2> = context.run { this@dot dot other }.coerce()\n\n    public inline infix fun <reified R : Dimension, reified C : Dimension> DMatrix<T, R, C>.dot(vector: DPoint<T, C>): DPoint<T, R> =\n        DPoint.coerceUnsafe(context.run { this@dot dot vector })\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-dimensions.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "046d2294e0adeef8f5da29eaff852be9845e3f4e5d9b56eab7fbad9dc7e3c3a4"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"zero\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-dimensions/src/commonMain/kotlin/space/kscience/kmath/dimensions/Wrappers.kt",
      "language": "kotlin",
      "line": 165,
      "offset": 102,
      "length": 4,
      "code": {
        "startLine": 163,
        "length": 4,
        "offset": 108,
        "surroundingCode": "    }\n\npublic inline fun <reified R : Dimension, reified C : Dimension> DMatrixContext<Double, DoubleField>.zero(): DMatrix<Double, R, C> =\n    produce { _, _ ->\n        0.0"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-dimensions.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "241860145ce973fa57bc2f6969f014eaa56b64f697dfb6f68743b28ca7dc6ad8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"of\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-dimensions/src/nativeMain/kotlin/space/kscience/kmath/dimensions/Dimension.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 39,
      "length": 2,
      "code": {
        "startLine": 19,
        "length": 2,
        "offset": 85,
        "surroundingCode": "    ?: error(\"Can't resolve dimension $type\")\n\npublic actual fun Dimension.Companion.of(dim: Int): Dimension = dimensionMap.getOrPut(dim) {\n    object : Dimension {\n        override val dim: Int get() = dim"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-dimensions.nativeMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "146093ada91a71cca65b102990e2df18aa52d5ed9ee601be9c4f29c6d915a595"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"ofDouble\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-histograms/src/commonMain/kotlin/space/kscience/kmath/histogram/Counter.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 20,
      "length": 8,
      "code": {
        "startLine": 19,
        "length": 8,
        "offset": 50,
        "surroundingCode": "\n    public companion object {\n        public fun ofDouble(): ObjectCounter<Double> = ObjectCounter(DoubleField)\n        public fun <T: Any> of(group: Group<T>): ObjectCounter<T> = ObjectCounter(group)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-histograms.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5f8ef9c1ebe3780b9ded99f0949ead4343faad137947704aa2ca43db3934fe48"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"put\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-histograms/src/commonMain/kotlin/space/kscience/kmath/histogram/Histogram.kt",
      "language": "kotlin",
      "line": 66,
      "offset": 45,
      "length": 3,
      "code": {
        "startLine": 64,
        "length": 3,
        "offset": 138,
        "surroundingCode": "public fun <T : Any> HistogramBuilder<T, *>.put(point: Point<out T>): Unit = putValue(point)\n\npublic fun <T : Any> HistogramBuilder<T, *>.put(vararg point: T): Unit = put(point.asBuffer())\n\npublic fun HistogramBuilder<Double, *>.put(vararg point: Number): Unit ="
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-histograms.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2a9221efb6ba9c894510d4967492fc6ca4f73e0e921296c40a942b1f467509d7"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"put\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-histograms/src/commonMain/kotlin/space/kscience/kmath/histogram/Histogram.kt",
      "language": "kotlin",
      "line": 68,
      "offset": 40,
      "length": 3,
      "code": {
        "startLine": 66,
        "length": 3,
        "offset": 135,
        "surroundingCode": "public fun <T : Any> HistogramBuilder<T, *>.put(vararg point: T): Unit = put(point.asBuffer())\n\npublic fun HistogramBuilder<Double, *>.put(vararg point: Number): Unit =\n    put(DoubleBuffer(point.map { it.toDouble() }.toDoubleArray()))\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-histograms.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2426e537afe8fa6e6318d43549494f68dbbbb39a38908033b75b2edaf81f2545"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"fill\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-histograms/src/commonMain/kotlin/space/kscience/kmath/histogram/Histogram.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 45,
      "length": 4,
      "code": {
        "startLine": 75,
        "length": 4,
        "offset": 90,
        "surroundingCode": " * Pass a sequence builder into histogram\n */\npublic fun <T : Any> HistogramBuilder<T, *>.fill(block: suspend SequenceScope<Point<T>>.() -> Unit): Unit =\n    fill(sequence(block).asIterable())\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-histograms.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "93fbfa713cd69d436ef734e2f0d90168a0ceddf2c9ab8b0d0931926eed3020cf"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"fill\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-histograms/src/commonMain/kotlin/space/kscience/kmath/histogram/Histogram1D.kt",
      "language": "kotlin",
      "line": 52,
      "offset": 42,
      "length": 4,
      "code": {
        "startLine": 50,
        "length": 4,
        "offset": 60,
        "surroundingCode": "\n@UnstableKMathAPI\npublic fun Histogram1DBuilder<Double, *>.fill(items: Iterable<Double>): Unit =\n    items.forEach(this::putValue)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-histograms.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "438fd2e9d224d17d7bfa7675d6927cabb225372777784dc3255454b0ee895cba"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"fill\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-histograms/src/commonMain/kotlin/space/kscience/kmath/histogram/Histogram1D.kt",
      "language": "kotlin",
      "line": 56,
      "offset": 42,
      "length": 4,
      "code": {
        "startLine": 54,
        "length": 4,
        "offset": 60,
        "surroundingCode": "\n@UnstableKMathAPI\npublic fun Histogram1DBuilder<Double, *>.fill(array: DoubleArray): Unit =\n    array.forEach(this::putValue)\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-histograms.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c478eda98ab34bdc88803954c180280794e2e86f68e11eda4921e62eeb2a94e8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"binValues\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-histograms/src/commonMain/kotlin/space/kscience/kmath/histogram/UniformHistogram1D.kt",
      "language": "kotlin",
      "line": 144,
      "offset": 44,
      "length": 9,
      "code": {
        "startLine": 142,
        "length": 9,
        "offset": 79,
        "surroundingCode": " */\n@OptIn(UnstableKMathAPI::class)\npublic val <V : Any> UniformHistogram1D<V>.binValues: Map<Double, V>\n    get() = bins.associate { it.center to it.binValue }\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-histograms.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "9f05fc20224ca9dd804f662e62d13ad4d58883b049ab10d35218092dcade21f3"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"uniformDoubleNDFromRanges\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-histograms/src/commonMain/kotlin/space/kscience/kmath/histogram/UniformHistogramGroupND.kt",
      "language": "kotlin",
      "line": 160,
      "offset": 32,
      "length": 25,
      "code": {
        "startLine": 158,
        "length": 25,
        "offset": 34,
        "surroundingCode": ")\n\npublic fun Histogram.Companion.uniformDoubleNDFromRanges(\n    vararg ranges: Pair<ClosedFloatingPointRange<Double>, Int>,\n): UniformHistogramGroupND<Double, DoubleField> ="
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-histograms.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "67fd8ab901dc17aabd833c9a11b074a87592d7ee483dd670b7bf5c3c0075aaa4"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"KotlingradProcessor\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-kotlingrad/src/main/kotlin/space/kscience/kmath/kotlingrad/KotlingradExpression.kt",
      "language": "kotlin",
      "line": 45,
      "offset": 14,
      "length": 19,
      "code": {
        "startLine": 43,
        "length": 19,
        "offset": 73,
        "surroundingCode": " * A diff processor using [MST] to Kotlingrad converter\n */\npublic class KotlingradProcessor<T : Number, A : NumericAlgebra<T>>(\n    public val algebra: A,\n) : AutoDiffProcessor<T, MST, MstExtendedField> {"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-kotlingrad.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "8b9a0b9aca3748bfd428191e6387e124369491290d88fe3aeb43a08e664cabe8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"scalar\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensorflow/src/main/kotlin/space/kscience/kmath/tensorflow/TensorFlowAlgebra.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 29,
      "length": 6,
      "code": {
        "startLine": 24,
        "length": 6,
        "offset": 102,
        "surroundingCode": "internal fun LongArray.toIntArray() = IntArray(size) { get(it).toInt() }\n\ninternal val <T> NdArray<T>.scalar: T get() = getObject()\n\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensorflow.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "7db001d1135bcd7bb7a75a301a7fbd2db615d3044897aa36e7fb402495ad50e0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"LongTensorFlowOutput\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensorflow/src/main/kotlin/space/kscience/kmath/tensorflow/IntTensorFlowAlgebra.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 14,
      "length": 20,
      "code": {
        "startLine": 14,
        "length": 20,
        "offset": 16,
        "surroundingCode": "}\n\npublic class LongTensorFlowOutput(\n    graph: Graph,\n    output: Output<TInt64>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensorflow.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d72256c9adc697c8ba15c102164124f8405f2149ed8d404da62e55e8e68fe113"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"produceMapWithTF\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-tensorflow/src/main/kotlin/space/kscience/kmath/tensorflow/DoubleTensorFlowAlgebra.kt",
      "language": "kotlin",
      "line": 89,
      "offset": 24,
      "length": 16,
      "code": {
        "startLine": 87,
        "length": 16,
        "offset": 83,
        "surroundingCode": " * The resulting tensors are available outside of scope\n */\npublic fun DoubleField.produceMapWithTF(\n    block: DoubleTensorFlowAlgebra.() -> Map<Symbol, StructureND<Double>>,\n): Map<Symbol, StructureND<Double>> = Graph().use { graph ->"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-tensorflow.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "bc77ca0ce4417e9aef0ab6be74b04fc5cf942b6ecd88cbc5d9b8e3179eea5ea8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"covarF\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-optimization/src/commonMain/kotlin/space/kscience/kmath/optimization/QowOptimizer.kt",
      "language": "kotlin",
      "line": 89,
      "offset": 26,
      "length": 6,
      "code": {
        "startLine": 87,
        "length": 6,
        "offset": 119,
        "surroundingCode": "     * D(\\phi)=E(\\phi_k(\\theta_0) \\phi_l(\\theta_0))= disDeriv_k * disDeriv_l /sigma^2\n     */\n    private fun QoWeight.covarF(): Matrix<Double> =\n        linearSpace.matrix(size, size).symmetric { s1, s2 ->\n            (0 until data.size).sumOf { d -> derivs[d, s1] * derivs[d, s2] / dispersion[d] }"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-optimization.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "8c725415d5ab4820e60054b3ae17a27457e87fd866168fcc79b9669c9195053c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"covarFExp\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-optimization/src/commonMain/kotlin/space/kscience/kmath/optimization/QowOptimizer.kt",
      "language": "kotlin",
      "line": 98,
      "offset": 26,
      "length": 9,
      "code": {
        "startLine": 96,
        "length": 9,
        "offset": 77,
        "surroundingCode": "     * http://arxiv.org/abs/physics/0604127\n     */\n    private fun QoWeight.covarFExp(theta: Map<Symbol, Double>): Matrix<Double> =\n        with(linearSpace) {\n            /*"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-optimization.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5b0ca27b6738c28d1a4c4098139878284b6e44a1c6aebfbadd85701e3659a663"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"covariance\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-optimization/src/commonMain/kotlin/space/kscience/kmath/optimization/QowOptimizer.kt",
      "language": "kotlin",
      "line": 231,
      "offset": 26,
      "length": 10,
      "code": {
        "startLine": 229,
        "length": 10,
        "offset": 32,
        "surroundingCode": "    }\n\n    private fun QoWeight.covariance(): Matrix<Double> {\n        val logger = problem.getFeature<OptimizationLog>()\n"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-optimization.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "76165733c8ad420c39869317978d821e6c32a6b0f830cdeaf9752019fb78b1e7"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"maximumLogLikelihood\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-optimization/src/commonMain/kotlin/space/kscience/kmath/optimization/logLikelihood.kt",
      "language": "kotlin",
      "line": 62,
      "offset": 68,
      "length": 20,
      "code": {
        "startLine": 60,
        "length": 20,
        "offset": 86,
        "surroundingCode": "\n@UnstableKMathAPI\npublic suspend fun Optimizer<Double, FunctionOptimization<Double>>.maximumLogLikelihood(\n    data: XYColumnarData<Double, Double, Double>,\n    model: DifferentiableExpression<Double>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-optimization.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "162b7e6402e7754f3dceb51998820e50d980595a3c8681414b68be8523404611"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"optimizeWith\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-optimization/src/commonMain/kotlin/space/kscience/kmath/optimization/OptimizationBuilder.kt",
      "language": "kotlin",
      "line": 47,
      "offset": 52,
      "length": 12,
      "code": {
        "startLine": 45,
        "length": 12,
        "offset": 144,
        "surroundingCode": "): FunctionOptimization<T> = FunctionOptimizationBuilder(expression).apply(builder).build()\n\npublic suspend fun <T> DifferentiableExpression<T>.optimizeWith(\n    optimizer: Optimizer<T, FunctionOptimization<T>>,\n    startingPoint: Map<Symbol, T>,"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-optimization.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f434c1dafd8e354a8e542b48f37e72862795c6589b0d811b9d1eeac3cf22dbc4"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"OptimizationCovariance\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-optimization/src/commonMain/kotlin/space/kscience/kmath/optimization/OptimizationProblem.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 14,
      "length": 22,
      "code": {
        "startLine": 33,
        "length": 22,
        "offset": 16,
        "surroundingCode": "}\n\npublic class OptimizationCovariance<T>(public val covariance: Matrix<T>) : OptimizationFeature {\n    override fun toString(): String = \"Covariance($covariance)\"\n}"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-optimization.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3cf34d8a56abd3c13d65a76b89780fb64056a809d41f1009234639f90e4e713b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "kmath-optimization/src/commonMain/kotlin/space/kscience/kmath/optimization/OptimizationProblem.kt",
      "language": "kotlin",
      "line": 61,
      "offset": 12,
      "length": 11,
      "code": {
        "startLine": 59,
        "length": 11,
        "offset": 106,
        "surroundingCode": "\npublic class OptimizationParameters(public val symbols: List<Symbol>) : OptimizationFeature {\n    public constructor(vararg symbols: Symbol) : this(listOf(*symbols))\n\n    override fun toString(): String = \"Parameters($symbols)\""
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-optimization.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a22d84d13b62ec47d050840d9b69ddf35e4e3ae0eb51d84b26e5bdaecdaa0b24"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "Reports visibility modifiers that match the default visibility of an element (`public` for most elements, `protected` for members that override a protected member).",
  "sources": [
    {
      "type": "file",
      "path": "kmath-stat/src/commonMain/kotlin/space/kscience/kmath/samplers/AhrensDieterMarsagliaTsangGammaSampler.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 45,
      "length": 8,
      "code": {
        "startLine": 31,
        "length": 8,
        "offset": 153,
        "surroundingCode": "        if (alpha < 1) AhrensDieterGammaSampler(alpha, theta) else MarsagliaTsangGammaSampler(alpha, theta)\n\n    private abstract class BaseGammaSampler internal constructor(\n        protected val alpha: Double,\n        protected val theta: Double"
      }
    }
  ],
  "attributes": {
    "module": "kmath.kmath-stat.commonMain",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": "7bce6e180f47f9c5ca4ffd4423093cc6475ee001dd25a8360a15313b52de7c25"
}]}